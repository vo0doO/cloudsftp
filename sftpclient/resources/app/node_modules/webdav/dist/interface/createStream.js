"use strict";

var Stream = require("stream");
var joinURL = require("url-join");

var _require = require("../merge.js"),
    merge = _require.merge;

var responseHandlers = require("../response.js");
var request = require("../request.js");
var encodePath = request.encodePath;
var fetch = request.fetch;

var PassThroughStream = Stream.PassThrough;

function createReadStream(filePath, options) {
    var outStream = new PassThroughStream();
    getFileStream(filePath, options).then(function __handleStream(stream) {
        stream.pipe(outStream);
    }).catch(function __handleReadError(err) {
        outStream.emit("error", err);
    });
    return outStream;
}

function createWriteStream(filePath, options) {
    var writeStream = new PassThroughStream();
    var headers = merge({}, options.headers);
    // if (typeof options.range === "object" && typeof options.range.start === "number") {
    //     var rangeHeader = "bytes=" + options.range.start + "-";
    //     if (typeof options.range.end === "number") {
    //         rangeHeader += options.range.end;
    //     }
    //     options.headers.Range = rangeHeader;
    // }
    if (options.overwrite === false) {
        headers["If-None-Match"] = "*";
    }
    var fetchURL = joinURL(options.remoteURL, encodePath(filePath));
    var fetchOptions = {
        method: "PUT",
        headers: headers,
        body: writeStream,
        agent: options.agent
    };
    fetch(fetchURL, fetchOptions);
    return writeStream;
}

function getFileStream(filePath, options) {
    var rangeHeader = void 0;
    if (typeof options.range === "object" && typeof options.range.start === "number") {
        rangeHeader = "bytes=" + options.range.start + "-";
        if (typeof options.range.end === "number") {
            rangeHeader += options.range.end;
        }
        options.headers.Range = rangeHeader;
    }
    var fetchURL = joinURL(options.remoteURL, encodePath(filePath));
    var fetchOptions = {
        method: "GET",
        headers: options.headers,
        agent: options.agent
    };
    return fetch(fetchURL, fetchOptions).then(responseHandlers.handleResponseCode).then(function __mapResultToStream(res) {
        return res.body;
    });
}

module.exports = {
    createReadStream,
    createWriteStream
};