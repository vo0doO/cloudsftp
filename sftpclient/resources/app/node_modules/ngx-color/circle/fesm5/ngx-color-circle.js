import { ChangeDetectionStrategy, Component, EventEmitter, Input, Output, NgModule } from '@angular/core';
import { __extends } from 'tslib';
import { CommonModule } from '@angular/common';
import { amber, blue, blueGrey, brown, cyan, deepOrange, deepPurple, green, indigo, lightBlue, lightGreen, lime, orange, pink, purple, red, teal, yellow } from 'material-colors';
import { ColorWrap, SwatchModule, isValidHex } from 'ngx-color';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var CircleSwatchComponent = /** @class */ (function () {
    function CircleSwatchComponent() {
        this.circleSize = 28;
        this.circleSpacing = 14;
        this.focus = false;
        this.onClick = new EventEmitter();
        this.onSwatchHover = new EventEmitter();
        this.swatchStyle = {
            borderRadius: '50%',
            background: 'transparent',
            transition: '100ms box-shadow ease',
        };
    }
    /**
     * @return {?}
     */
    CircleSwatchComponent.prototype.ngOnChanges = /**
     * @return {?}
     */
    function () {
        this.focusStyle = {
            boxShadow: this.color + " 0px 0px 0px 3px inset",
        };
        this.swatchStyle.boxShadow = "inset 0 0 0 " + this.circleSize / 2 + "px " + this.color;
    };
    /**
     * @param {?} __0
     * @return {?}
     */
    CircleSwatchComponent.prototype.handleClick = /**
     * @param {?} __0
     * @return {?}
     */
    function (_a) {
        var hex = _a.hex, $event = _a.$event;
        this.onClick.emit({ hex: hex, $event: $event });
    };
    CircleSwatchComponent.decorators = [
        { type: Component, args: [{
                    selector: 'color-circle-swatch',
                    template: "\n  <div class=\"circle-swatch\"\n    [style.width.px]=\"circleSize\" [style.height.px]=\"circleSize\"\n    [style.margin-right.px]=\"circleSpacing\" [style.margin-bottom.px]=\"circleSpacing\"\n    >\n    <color-swatch\n      [color]=\"color\" [style]=\"swatchStyle\" [focus]=\"focus\" [focusStyle]=\"focusStyle\"\n      (onClick)=\"handleClick($event)\" (onHover)=\"onSwatchHover.emit($event)\">\n    </color-swatch>\n    <div class=\"clear\"></div>\n  </div>\n  ",
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    preserveWhitespaces: false,
                    styles: ["\n  .circle-swatch {\n    transform: scale(1);\n    transition: transform 100ms ease;\n  }\n  .circle-swatch:hover {\n    transform: scale(1.2);\n  }\n  "]
                }] }
    ];
    CircleSwatchComponent.propDecorators = {
        color: [{ type: Input }],
        circleSize: [{ type: Input }],
        circleSpacing: [{ type: Input }],
        focus: [{ type: Input }],
        onClick: [{ type: Output }],
        onSwatchHover: [{ type: Output }]
    };
    return CircleSwatchComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var CircleComponent = /** @class */ (function (_super) {
    __extends(CircleComponent, _super);
    function CircleComponent() {
        var _this = _super.call(this) || this;
        /**
         * Pixel value for picker width
         */
        _this.width = 252;
        /**
         * Color squares to display
         */
        _this.colors = [
            red['500'],
            pink['500'],
            purple['500'],
            deepPurple['500'],
            indigo['500'],
            blue['500'],
            lightBlue['500'],
            cyan['500'],
            teal['500'],
            green['500'],
            lightGreen['500'],
            lime['500'],
            yellow['500'],
            amber['500'],
            orange['500'],
            deepOrange['500'],
            brown['500'],
            blueGrey['500'],
        ];
        /**
         * Value for circle size
         */
        _this.circleSize = 28;
        /**
         * Value for spacing between circles
         */
        _this.circleSpacing = 14;
        return _this;
    }
    /**
     * @param {?} color
     * @return {?}
     */
    CircleComponent.prototype.isActive = /**
     * @param {?} color
     * @return {?}
     */
    function (color) {
        return this.hex === color;
    };
    /**
     * @param {?} __0
     * @return {?}
     */
    CircleComponent.prototype.handleBlockChange = /**
     * @param {?} __0
     * @return {?}
     */
    function (_a) {
        var hex = _a.hex, $event = _a.$event;
        if (isValidHex(hex)) {
            this.handleChange({ hex: hex, source: 'hex' }, $event);
        }
    };
    /**
     * @param {?} __0
     * @return {?}
     */
    CircleComponent.prototype.handleValueChange = /**
     * @param {?} __0
     * @return {?}
     */
    function (_a) {
        var data = _a.data, $event = _a.$event;
        this.handleChange(data, $event);
    };
    CircleComponent.decorators = [
        { type: Component, args: [{
                    selector: 'color-circle',
                    template: "\n  <div class=\"circle-picker {{ className }}\"\n    [style.width.px]=\"width\"\n    [style.margin-right.px]=\"-circleSpacing\"\n    [style.margin-bottom.px]=\"-circleSpacing\">\n    <color-circle-swatch\n      *ngFor=\"let color of colors\"\n      [color]=\"color\" [focus]=\"isActive(color)\"\n      (onClick)=\"handleBlockChange($event)\"\n      (onSwatchHover)=\"onSwatchHover.emit($event)\"\n    ></color-circle-swatch>\n  </div>\n  ",
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    preserveWhitespaces: false,
                    styles: ["\n      .circle-picker {\n        display: flex;\n        flex-wrap: wrap;\n      }\n    "]
                }] }
    ];
    /** @nocollapse */
    CircleComponent.ctorParameters = function () { return []; };
    CircleComponent.propDecorators = {
        width: [{ type: Input }],
        colors: [{ type: Input }],
        circleSize: [{ type: Input }],
        circleSpacing: [{ type: Input }]
    };
    return CircleComponent;
}(ColorWrap));
var ColorCircleModule = /** @class */ (function () {
    function ColorCircleModule() {
    }
    ColorCircleModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [CircleComponent, CircleSwatchComponent],
                    exports: [CircleComponent, CircleSwatchComponent],
                    imports: [CommonModule, SwatchModule],
                },] }
    ];
    return ColorCircleModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */

export { CircleComponent, ColorCircleModule, CircleSwatchComponent as Éµa };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,