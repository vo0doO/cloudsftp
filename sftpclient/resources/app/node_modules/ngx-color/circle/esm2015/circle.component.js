/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { CommonModule } from '@angular/common';
import { ChangeDetectionStrategy, Component, Input, NgModule, } from '@angular/core';
import { amber, blue, blueGrey, brown, cyan, deepOrange, deepPurple, green, indigo, lightBlue, lightGreen, lime, orange, pink, purple, red, teal, yellow, } from 'material-colors';
import { ColorWrap, SwatchModule } from 'ngx-color';
import { isValidHex } from 'ngx-color';
import { CircleSwatchComponent } from './circle-swatch.component';
export class CircleComponent extends ColorWrap {
    constructor() {
        super();
        /**
         * Pixel value for picker width
         */
        this.width = 252;
        /**
         * Color squares to display
         */
        this.colors = [
            red['500'],
            pink['500'],
            purple['500'],
            deepPurple['500'],
            indigo['500'],
            blue['500'],
            lightBlue['500'],
            cyan['500'],
            teal['500'],
            green['500'],
            lightGreen['500'],
            lime['500'],
            yellow['500'],
            amber['500'],
            orange['500'],
            deepOrange['500'],
            brown['500'],
            blueGrey['500'],
        ];
        /**
         * Value for circle size
         */
        this.circleSize = 28;
        /**
         * Value for spacing between circles
         */
        this.circleSpacing = 14;
    }
    /**
     * @param {?} color
     * @return {?}
     */
    isActive(color) {
        return this.hex === color;
    }
    /**
     * @param {?} __0
     * @return {?}
     */
    handleBlockChange({ hex, $event }) {
        if (isValidHex(hex)) {
            this.handleChange({ hex, source: 'hex' }, $event);
        }
    }
    /**
     * @param {?} __0
     * @return {?}
     */
    handleValueChange({ data, $event }) {
        this.handleChange(data, $event);
    }
}
CircleComponent.decorators = [
    { type: Component, args: [{
                selector: 'color-circle',
                template: `
  <div class="circle-picker {{ className }}"
    [style.width.px]="width"
    [style.margin-right.px]="-circleSpacing"
    [style.margin-bottom.px]="-circleSpacing">
    <color-circle-swatch
      *ngFor="let color of colors"
      [color]="color" [focus]="isActive(color)"
      (onClick)="handleBlockChange($event)"
      (onSwatchHover)="onSwatchHover.emit($event)"
    ></color-circle-swatch>
  </div>
  `,
                changeDetection: ChangeDetectionStrategy.OnPush,
                preserveWhitespaces: false,
                styles: [`
      .circle-picker {
        display: flex;
        flex-wrap: wrap;
      }
    `]
            }] }
];
/** @nocollapse */
CircleComponent.ctorParameters = () => [];
CircleComponent.propDecorators = {
    width: [{ type: Input }],
    colors: [{ type: Input }],
    circleSize: [{ type: Input }],
    circleSpacing: [{ type: Input }]
};
if (false) {
    /**
     * Pixel value for picker width
     * @type {?}
     */
    CircleComponent.prototype.width;
    /**
     * Color squares to display
     * @type {?}
     */
    CircleComponent.prototype.colors;
    /**
     * Value for circle size
     * @type {?}
     */
    CircleComponent.prototype.circleSize;
    /**
     * Value for spacing between circles
     * @type {?}
     */
    CircleComponent.prototype.circleSpacing;
}
export class ColorCircleModule {
}
ColorCircleModule.decorators = [
    { type: NgModule, args: [{
                declarations: [CircleComponent, CircleSwatchComponent],
                exports: [CircleComponent, CircleSwatchComponent],
                imports: [CommonModule, SwatchModule],
            },] }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2lyY2xlLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25neC1jb2xvci9jaXJjbGUvIiwic291cmNlcyI6WyJjaXJjbGUuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDL0MsT0FBTyxFQUNMLHVCQUF1QixFQUN2QixTQUFTLEVBQ1QsS0FBSyxFQUNMLFFBQVEsR0FDVCxNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQ0wsS0FBSyxFQUNMLElBQUksRUFDSixRQUFRLEVBQ1IsS0FBSyxFQUNMLElBQUksRUFDSixVQUFVLEVBQ1YsVUFBVSxFQUNWLEtBQUssRUFDTCxNQUFNLEVBQ04sU0FBUyxFQUNULFVBQVUsRUFDVixJQUFJLEVBQ0osTUFBTSxFQUNOLElBQUksRUFDSixNQUFNLEVBQ04sR0FBRyxFQUNILElBQUksRUFDSixNQUFNLEdBQ1AsTUFBTSxpQkFBaUIsQ0FBQztBQUV6QixPQUFPLEVBQUUsU0FBUyxFQUFFLFlBQVksRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUNwRCxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sV0FBVyxDQUFDO0FBQ3ZDLE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBNEJsRSxNQUFNLE9BQU8sZUFBZ0IsU0FBUSxTQUFTO0lBOEI1QztRQUNFLEtBQUssRUFBRSxDQUFDOzs7O1FBN0JELFVBQUssR0FBb0IsR0FBRyxDQUFDOzs7O1FBR3RDLFdBQU0sR0FBYTtZQUNqQixHQUFHLENBQUMsS0FBSyxDQUFDO1lBQ1YsSUFBSSxDQUFDLEtBQUssQ0FBQztZQUNYLE1BQU0sQ0FBQyxLQUFLLENBQUM7WUFDYixVQUFVLENBQUMsS0FBSyxDQUFDO1lBQ2pCLE1BQU0sQ0FBQyxLQUFLLENBQUM7WUFDYixJQUFJLENBQUMsS0FBSyxDQUFDO1lBQ1gsU0FBUyxDQUFDLEtBQUssQ0FBQztZQUNoQixJQUFJLENBQUMsS0FBSyxDQUFDO1lBQ1gsSUFBSSxDQUFDLEtBQUssQ0FBQztZQUNYLEtBQUssQ0FBQyxLQUFLLENBQUM7WUFDWixVQUFVLENBQUMsS0FBSyxDQUFDO1lBQ2pCLElBQUksQ0FBQyxLQUFLLENBQUM7WUFDWCxNQUFNLENBQUMsS0FBSyxDQUFDO1lBQ2IsS0FBSyxDQUFDLEtBQUssQ0FBQztZQUNaLE1BQU0sQ0FBQyxLQUFLLENBQUM7WUFDYixVQUFVLENBQUMsS0FBSyxDQUFDO1lBQ2pCLEtBQUssQ0FBQyxLQUFLLENBQUM7WUFDWixRQUFRLENBQUMsS0FBSyxDQUFDO1NBQ2hCLENBQUM7Ozs7UUFFTyxlQUFVLEdBQUcsRUFBRSxDQUFDOzs7O1FBRWhCLGtCQUFhLEdBQUcsRUFBRSxDQUFDO0lBSTVCLENBQUM7Ozs7O0lBQ0QsUUFBUSxDQUFDLEtBQUs7UUFDWixPQUFPLElBQUksQ0FBQyxHQUFHLEtBQUssS0FBSyxDQUFDO0lBQzVCLENBQUM7Ozs7O0lBQ0QsaUJBQWlCLENBQUMsRUFBRSxHQUFHLEVBQUUsTUFBTSxFQUFFO1FBQy9CLElBQUksVUFBVSxDQUFDLEdBQUcsQ0FBQyxFQUFFO1lBQ25CLElBQUksQ0FBQyxZQUFZLENBQUMsRUFBRSxHQUFHLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBRSxFQUFFLE1BQU0sQ0FBQyxDQUFDO1NBQ25EO0lBQ0gsQ0FBQzs7Ozs7SUFDRCxpQkFBaUIsQ0FBQyxFQUFFLElBQUksRUFBRSxNQUFNLEVBQUU7UUFDaEMsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFDbEMsQ0FBQzs7O1lBckVGLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUsY0FBYztnQkFDeEIsUUFBUSxFQUFFOzs7Ozs7Ozs7Ozs7R0FZVDtnQkFTRCxlQUFlLEVBQUUsdUJBQXVCLENBQUMsTUFBTTtnQkFDL0MsbUJBQW1CLEVBQUUsS0FBSzt5QkFSeEI7Ozs7O0tBS0M7YUFJSjs7Ozs7b0JBR0UsS0FBSztxQkFFTCxLQUFLO3lCQXNCTCxLQUFLOzRCQUVMLEtBQUs7Ozs7Ozs7SUExQk4sZ0NBQXNDOzs7OztJQUV0QyxpQ0FvQkU7Ozs7O0lBRUYscUNBQXlCOzs7OztJQUV6Qix3Q0FBNEI7O0FBdUI5QixNQUFNLE9BQU8saUJBQWlCOzs7WUFMN0IsUUFBUSxTQUFDO2dCQUNSLFlBQVksRUFBRSxDQUFDLGVBQWUsRUFBRSxxQkFBcUIsQ0FBQztnQkFDdEQsT0FBTyxFQUFFLENBQUMsZUFBZSxFQUFFLHFCQUFxQixDQUFDO2dCQUNqRCxPQUFPLEVBQUUsQ0FBQyxZQUFZLEVBQUUsWUFBWSxDQUFDO2FBQ3RDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tbW9uTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcbmltcG9ydCB7XG4gIENoYW5nZURldGVjdGlvblN0cmF0ZWd5LFxuICBDb21wb25lbnQsXG4gIElucHV0LFxuICBOZ01vZHVsZSxcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge1xuICBhbWJlcixcbiAgYmx1ZSxcbiAgYmx1ZUdyZXksXG4gIGJyb3duLFxuICBjeWFuLFxuICBkZWVwT3JhbmdlLFxuICBkZWVwUHVycGxlLFxuICBncmVlbixcbiAgaW5kaWdvLFxuICBsaWdodEJsdWUsXG4gIGxpZ2h0R3JlZW4sXG4gIGxpbWUsXG4gIG9yYW5nZSxcbiAgcGluayxcbiAgcHVycGxlLFxuICByZWQsXG4gIHRlYWwsXG4gIHllbGxvdyxcbn0gZnJvbSAnbWF0ZXJpYWwtY29sb3JzJztcblxuaW1wb3J0IHsgQ29sb3JXcmFwLCBTd2F0Y2hNb2R1bGUgfSBmcm9tICduZ3gtY29sb3InO1xuaW1wb3J0IHsgaXNWYWxpZEhleCB9IGZyb20gJ25neC1jb2xvcic7XG5pbXBvcnQgeyBDaXJjbGVTd2F0Y2hDb21wb25lbnQgfSBmcm9tICcuL2NpcmNsZS1zd2F0Y2guY29tcG9uZW50JztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnY29sb3ItY2lyY2xlJyxcbiAgdGVtcGxhdGU6IGBcbiAgPGRpdiBjbGFzcz1cImNpcmNsZS1waWNrZXIge3sgY2xhc3NOYW1lIH19XCJcbiAgICBbc3R5bGUud2lkdGgucHhdPVwid2lkdGhcIlxuICAgIFtzdHlsZS5tYXJnaW4tcmlnaHQucHhdPVwiLWNpcmNsZVNwYWNpbmdcIlxuICAgIFtzdHlsZS5tYXJnaW4tYm90dG9tLnB4XT1cIi1jaXJjbGVTcGFjaW5nXCI+XG4gICAgPGNvbG9yLWNpcmNsZS1zd2F0Y2hcbiAgICAgICpuZ0Zvcj1cImxldCBjb2xvciBvZiBjb2xvcnNcIlxuICAgICAgW2NvbG9yXT1cImNvbG9yXCIgW2ZvY3VzXT1cImlzQWN0aXZlKGNvbG9yKVwiXG4gICAgICAob25DbGljayk9XCJoYW5kbGVCbG9ja0NoYW5nZSgkZXZlbnQpXCJcbiAgICAgIChvblN3YXRjaEhvdmVyKT1cIm9uU3dhdGNoSG92ZXIuZW1pdCgkZXZlbnQpXCJcbiAgICA+PC9jb2xvci1jaXJjbGUtc3dhdGNoPlxuICA8L2Rpdj5cbiAgYCxcbiAgc3R5bGVzOiBbXG4gICAgYFxuICAgICAgLmNpcmNsZS1waWNrZXIge1xuICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICBmbGV4LXdyYXA6IHdyYXA7XG4gICAgICB9XG4gICAgYCxcbiAgXSxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG4gIHByZXNlcnZlV2hpdGVzcGFjZXM6IGZhbHNlLFxufSlcbmV4cG9ydCBjbGFzcyBDaXJjbGVDb21wb25lbnQgZXh0ZW5kcyBDb2xvcldyYXAge1xuICAvKiogUGl4ZWwgdmFsdWUgZm9yIHBpY2tlciB3aWR0aCAqL1xuICBASW5wdXQoKSB3aWR0aDogc3RyaW5nIHwgbnVtYmVyID0gMjUyO1xuICAvKiogQ29sb3Igc3F1YXJlcyB0byBkaXNwbGF5ICovXG4gIEBJbnB1dCgpXG4gIGNvbG9yczogc3RyaW5nW10gPSBbXG4gICAgcmVkWyc1MDAnXSxcbiAgICBwaW5rWyc1MDAnXSxcbiAgICBwdXJwbGVbJzUwMCddLFxuICAgIGRlZXBQdXJwbGVbJzUwMCddLFxuICAgIGluZGlnb1snNTAwJ10sXG4gICAgYmx1ZVsnNTAwJ10sXG4gICAgbGlnaHRCbHVlWyc1MDAnXSxcbiAgICBjeWFuWyc1MDAnXSxcbiAgICB0ZWFsWyc1MDAnXSxcbiAgICBncmVlblsnNTAwJ10sXG4gICAgbGlnaHRHcmVlblsnNTAwJ10sXG4gICAgbGltZVsnNTAwJ10sXG4gICAgeWVsbG93Wyc1MDAnXSxcbiAgICBhbWJlclsnNTAwJ10sXG4gICAgb3JhbmdlWyc1MDAnXSxcbiAgICBkZWVwT3JhbmdlWyc1MDAnXSxcbiAgICBicm93blsnNTAwJ10sXG4gICAgYmx1ZUdyZXlbJzUwMCddLFxuICBdO1xuICAvKiogVmFsdWUgZm9yIGNpcmNsZSBzaXplICovXG4gIEBJbnB1dCgpIGNpcmNsZVNpemUgPSAyODtcbiAgLyoqIFZhbHVlIGZvciBzcGFjaW5nIGJldHdlZW4gY2lyY2xlcyAqL1xuICBASW5wdXQoKSBjaXJjbGVTcGFjaW5nID0gMTQ7XG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoKTtcbiAgfVxuICBpc0FjdGl2ZShjb2xvcikge1xuICAgIHJldHVybiB0aGlzLmhleCA9PT0gY29sb3I7XG4gIH1cbiAgaGFuZGxlQmxvY2tDaGFuZ2UoeyBoZXgsICRldmVudCB9KSB7XG4gICAgaWYgKGlzVmFsaWRIZXgoaGV4KSkge1xuICAgICAgdGhpcy5oYW5kbGVDaGFuZ2UoeyBoZXgsIHNvdXJjZTogJ2hleCcgfSwgJGV2ZW50KTtcbiAgICB9XG4gIH1cbiAgaGFuZGxlVmFsdWVDaGFuZ2UoeyBkYXRhLCAkZXZlbnQgfSkge1xuICAgIHRoaXMuaGFuZGxlQ2hhbmdlKGRhdGEsICRldmVudCk7XG4gIH1cbn1cblxuQE5nTW9kdWxlKHtcbiAgZGVjbGFyYXRpb25zOiBbQ2lyY2xlQ29tcG9uZW50LCBDaXJjbGVTd2F0Y2hDb21wb25lbnRdLFxuICBleHBvcnRzOiBbQ2lyY2xlQ29tcG9uZW50LCBDaXJjbGVTd2F0Y2hDb21wb25lbnRdLFxuICBpbXBvcnRzOiBbQ29tbW9uTW9kdWxlLCBTd2F0Y2hNb2R1bGVdLFxufSlcbmV4cG9ydCBjbGFzcyBDb2xvckNpcmNsZU1vZHVsZSB7fVxuIl19