(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('ngx-color'), require('@angular/common')) :
    typeof define === 'function' && define.amd ? define('ngx-color/compact', ['exports', '@angular/core', 'ngx-color', '@angular/common'], factory) :
    (factory((global['ngx-color'] = global['ngx-color'] || {}, global['ngx-color'].compact = {}),global.ng.core,global['ngx-color'],global.ng.common));
}(this, (function (exports,core,ngxColor,common) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b)
                if (b.hasOwnProperty(p))
                    d[p] = b[p]; };
        return extendStatics(d, b);
    };
    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var CompactColorComponent = /** @class */ (function () {
        function CompactColorComponent() {
            this.onClick = new core.EventEmitter();
            this.onSwatchHover = new core.EventEmitter();
            this.swatchStyle = {
                width: '15px',
                height: '15px',
                float: 'left',
                marginRight: '5px',
                marginBottom: '5px',
                position: 'relative',
                cursor: 'pointer',
            };
            this.swatchFocus = {};
            this.getContrastingColor = ngxColor.getContrastingColor;
        }
        /**
         * @return {?}
         */
        CompactColorComponent.prototype.ngOnChanges = /**
         * @return {?}
         */
            function () {
                this.swatchStyle.background = this.color;
                this.swatchFocus.boxShadow = "0 0 4px " + this.color;
                if (this.color.toLowerCase() === '#ffffff') {
                    this.swatchStyle.boxShadow = 'inset 0 0 0 1px #ddd';
                }
            };
        /**
         * @param {?} __0
         * @return {?}
         */
        CompactColorComponent.prototype.handleClick = /**
         * @param {?} __0
         * @return {?}
         */
            function (_a) {
                var hex = _a.hex, $event = _a.$event;
                this.onClick.emit({ hex: hex, $event: $event });
            };
        CompactColorComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'color-compact-color',
                        template: "\n  <div class=\"compact-color\">\n    <color-swatch class=\"swatch\"\n      [color]=\"color\" [style]=\"swatchStyle\"\n      [focusStyle]=\"swatchFocus\"\n      (onClick)=\"handleClick($event)\" (onHover)=\"onSwatchHover.emit($event)\"\n      >\n      <div class=\"compact-dot\"\n        [class.active]=\"active\" [style.background]=\"getContrastingColor(color)\"\n      ></div>\n    </color-swatch>\n  </div>\n  ",
                        changeDetection: core.ChangeDetectionStrategy.OnPush,
                        preserveWhitespaces: false,
                        styles: ["\n  .compact-dot {\n    position: absolute;\n    top: 5px;\n    right: 5px;\n    bottom: 5px;\n    left: 5px;\n    border-radius: 50%;\n    opacity: 0;\n  }\n  .compact-dot.active {\n    opacity: 1;\n  }\n  "]
                    }] }
        ];
        CompactColorComponent.propDecorators = {
            color: [{ type: core.Input }],
            active: [{ type: core.Input }],
            onClick: [{ type: core.Output }],
            onSwatchHover: [{ type: core.Output }]
        };
        return CompactColorComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var CompactFieldsComponent = /** @class */ (function () {
        function CompactFieldsComponent() {
            this.onChange = new core.EventEmitter();
            this.HEXWrap = {
                marginTop: '-3px',
                marginBottom: '-3px',
                // flex: '6 1 0%',
                position: 'relative',
            };
            this.HEXinput = {
                width: '80%',
                padding: '0px',
                paddingLeft: '20%',
                border: 'none',
                outline: 'none',
                background: 'none',
                fontSize: '12px',
                color: '#333',
                height: '16px',
            };
            this.HEXlabel = {
                display: 'none',
            };
            this.RGBwrap = {
                marginTop: '-3px',
                marginBottom: '-3px',
                // flex: '3 1 0%',
                position: 'relative',
            };
            this.RGBinput = {
                width: '80%',
                padding: '0px',
                paddingLeft: '30%',
                border: 'none',
                outline: 'none',
                background: 'none',
                fontSize: '12px',
                color: '#333',
                height: '16px',
            };
            this.RGBlabel = {
                position: 'absolute',
                top: '6px',
                left: '0px',
                'line-height': '16px',
                'text-transform': 'uppercase',
                fontSize: '12px',
                color: '#999',
            };
        }
        /**
         * @param {?} __0
         * @return {?}
         */
        CompactFieldsComponent.prototype.handleChange = /**
         * @param {?} __0
         * @return {?}
         */
            function (_a) {
                var data = _a.data, $event = _a.$event;
                if (data.hex) {
                    if (ngxColor.isValidHex(data.hex)) {
                        this.onChange.emit({
                            data: {
                                hex: data.hex,
                                source: 'hex',
                            },
                            $event: $event,
                        });
                    }
                }
                else {
                    this.onChange.emit({
                        data: {
                            r: data.r || this.rgb.r,
                            g: data.g || this.rgb.g,
                            b: data.b || this.rgb.b,
                            source: 'rgb',
                        },
                        $event: $event,
                    });
                }
            };
        CompactFieldsComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'color-compact-fields',
                        template: "\n  <div class=\"compact-fields\">\n    <div class=\"compact-active\" [style.background]=\"hex\"></div>\n    <color-editable-input\n      style=\"flex: 6 1 0%;\"\n      [style]=\"{ wrap: HEXWrap, input: HEXinput, label: HEXlabel }\"\n      label=\"hex\"\n      [value]=\"hex\"\n      (onChange)=\"handleChange($event)\"\n    ></color-editable-input>\n    <color-editable-input\n      style=\"flex: 3 1 0%\"\n      [style]=\"{ wrap: RGBwrap, input: RGBinput, label: RGBlabel }\"\n      label=\"r\"\n      [value]=\"rgb.r\"\n      (onChange)=\"handleChange($event)\"\n    ></color-editable-input>\n    <color-editable-input\n      style=\"flex: 3 1 0%\"\n      [style]=\"{ wrap: RGBwrap, input: RGBinput, label: RGBlabel }\"\n      label=\"g\"\n      [value]=\"rgb.g\"\n      (onChange)=\"handleChange($event)\"\n    ></color-editable-input>\n    <color-editable-input\n      style=\"flex: 3 1 0%\"\n      [style]=\"{ wrap: RGBwrap, input: RGBinput, label: RGBlabel }\"\n      label=\"b\"\n      [value]=\"rgb.b\"\n      (onChange)=\"handleChange($event)\"\n    ></color-editable-input>\n  </div>\n  ",
                        changeDetection: core.ChangeDetectionStrategy.OnPush,
                        preserveWhitespaces: false,
                        styles: ["\n  .compact-fields {\n    display: flex;\n    padding-bottom: 6px;\n    padding-right: 5px;\n    position: relative;\n  }\n  .compact-active {\n    position: absolute;\n    top: 6px;\n    left: 5px;\n    height: 9px;\n    width: 9px;\n  }\n  "]
                    }] }
        ];
        CompactFieldsComponent.propDecorators = {
            hex: [{ type: core.Input }],
            rgb: [{ type: core.Input }],
            onChange: [{ type: core.Output }]
        };
        return CompactFieldsComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var CompactComponent = /** @class */ (function (_super) {
        __extends(CompactComponent, _super);
        function CompactComponent() {
            var _this = _super.call(this) || this;
            /**
             * Color squares to display
             */
            _this.colors = [
                '#4D4D4D',
                '#999999',
                '#FFFFFF',
                '#F44E3B',
                '#FE9200',
                '#FCDC00',
                '#DBDF00',
                '#A4DD00',
                '#68CCCA',
                '#73D8FF',
                '#AEA1FF',
                '#FDA1FF',
                '#333333',
                '#808080',
                '#cccccc',
                '#D33115',
                '#E27300',
                '#FCC400',
                '#B0BC00',
                '#68BC00',
                '#16A5A5',
                '#009CE0',
                '#7B64FF',
                '#FA28FF',
                '#000000',
                '#666666',
                '#B3B3B3',
                '#9F0500',
                '#C45100',
                '#FB9E00',
                '#808900',
                '#194D33',
                '#0C797D',
                '#0062B1',
                '#653294',
                '#AB149E',
            ];
            return _this;
        }
        /**
         * @param {?} __0
         * @return {?}
         */
        CompactComponent.prototype.handleBlockChange = /**
         * @param {?} __0
         * @return {?}
         */
            function (_a) {
                var hex = _a.hex, $event = _a.$event;
                if (ngxColor.isValidHex(hex)) {
                    this.handleChange({ hex: hex, source: 'hex' }, $event);
                }
            };
        /**
         * @param {?} __0
         * @return {?}
         */
        CompactComponent.prototype.handleValueChange = /**
         * @param {?} __0
         * @return {?}
         */
            function (_a) {
                var data = _a.data, $event = _a.$event;
                this.handleChange(data, $event);
            };
        CompactComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'color-compact',
                        template: "\n  <color-raised class=\"color-compact\">\n    <div class=\"compact-picker {{ className }}\">\n      <div>\n        <color-compact-color\n          *ngFor=\"let color of colors\" [color]=\"color\"\n          [active]=\"color.toLowerCase() === hex.toLowerCase()\"\n          (onClick)=\"handleBlockChange($event)\"\n        ></color-compact-color>\n        <div class=\"compact-clear\"></div>\n      </div>\n      <color-compact-fields\n        [hex]=\"hex\"\n        [rgb]=\"rgb\"\n        (onChange)=\"handleValueChange($event)\"\n      ></color-compact-fields>\n    </div>\n  </color-raised>\n  ",
                        changeDetection: core.ChangeDetectionStrategy.OnPush,
                        preserveWhitespaces: false,
                        styles: ["\n    .color-compact {\n      background: #f6f6f6;\n      radius: 4px;\n    }\n    .compact-picker {\n      padding-top: 5px;\n      padding-left: 5px;\n      box-sizing: border-box;\n      width: 245px;\n    }\n    .compact-clear {\n      clear: both;\n    }\n  "]
                    }] }
        ];
        /** @nocollapse */
        CompactComponent.ctorParameters = function () { return []; };
        CompactComponent.propDecorators = {
            colors: [{ type: core.Input }]
        };
        return CompactComponent;
    }(ngxColor.ColorWrap));
    var ColorCompactModule = /** @class */ (function () {
        function ColorCompactModule() {
        }
        ColorCompactModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [
                            CompactComponent,
                            CompactColorComponent,
                            CompactFieldsComponent,
                        ],
                        exports: [CompactComponent, CompactColorComponent, CompactFieldsComponent],
                        imports: [common.CommonModule, ngxColor.EditableInputModule, ngxColor.SwatchModule, ngxColor.RaisedModule],
                    },] }
        ];
        return ColorCompactModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */

    exports.CompactComponent = CompactComponent;
    exports.ColorCompactModule = ColorCompactModule;
    exports.ɵa = CompactColorComponent;
    exports.ɵb = CompactFieldsComponent;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,