import { ChangeDetectionStrategy, Component, EventEmitter, Input, Output, NgModule } from '@angular/core';
import { __extends } from 'tslib';
import { CommonModule } from '@angular/common';
import { ColorWrap, HueModule, SwatchModule } from 'ngx-color';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var SliderSwatchComponent = /** @class */ (function () {
    function SliderSwatchComponent() {
        this.first = false;
        this.last = false;
        this.onClick = new EventEmitter();
    }
    /**
     * @return {?}
     */
    SliderSwatchComponent.prototype.ngOnChanges = /**
     * @return {?}
     */
    function () {
        this.background = "hsl(" + this.hsl.h + ", 50%, " + this.offset * 100 + "%)";
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    SliderSwatchComponent.prototype.handleClick = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        this.onClick.emit({
            data: {
                h: this.hsl.h,
                s: 0.5,
                l: this.offset,
                source: 'hsl',
            },
            $event: $event,
        });
    };
    SliderSwatchComponent.decorators = [
        { type: Component, args: [{
                    selector: 'color-slider-swatch',
                    template: "\n  <div class=\"slider-swatch\" [style.background]=\"background\"\n    [class.first]=\"first\" [class.last]=\"last\" [class.active]=\"active\"\n    (click)=\"handleClick($event)\"\n  ></div>\n  ",
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    preserveWhitespaces: false,
                    styles: ["\n    .slider-swatch {\n      height: 12px;\n      background: rgb(121, 211, 166);\n      cursor: pointer;\n    }\n    .slider-swatch.active {\n      transform: scaleY(1.8);\n      border-top-right-radius: 3.6px 2px;\n      border-top-left-radius: 3.6px 2px;\n      border-bottom-right-radius: 3.6px 2px;\n      border-bottom-left-radius: 3.6px 2px;\n    }\n    .slider-swatch.first {\n      border-radius: 2px 0px 0px 2px;\n    }\n    .slider-swatch.last {\n      border-radius: 0px 2px 2px 0px;\n    }\n\n  "]
                }] }
    ];
    SliderSwatchComponent.propDecorators = {
        hsl: [{ type: Input }],
        active: [{ type: Input }],
        offset: [{ type: Input }],
        first: [{ type: Input }],
        last: [{ type: Input }],
        onClick: [{ type: Output }]
    };
    return SliderSwatchComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var SliderSwatchesComponent = /** @class */ (function () {
    function SliderSwatchesComponent() {
        this.onClick = new EventEmitter();
        this.onSwatchHover = new EventEmitter();
    }
    /**
     * @param {?} l
     * @param {?} s
     * @return {?}
     */
    SliderSwatchesComponent.prototype.active = /**
     * @param {?} l
     * @param {?} s
     * @return {?}
     */
    function (l, s) {
        return (Math.round(this.hsl.l * 100) / 100 === l &&
            Math.round(this.hsl.s * 100) / 100 === s);
    };
    /**
     * @param {?} __0
     * @return {?}
     */
    SliderSwatchesComponent.prototype.handleClick = /**
     * @param {?} __0
     * @return {?}
     */
    function (_a) {
        var data = _a.data, $event = _a.$event;
        this.onClick.emit({ data: data, $event: $event });
    };
    SliderSwatchesComponent.decorators = [
        { type: Component, args: [{
                    selector: 'color-slider-swatches',
                    template: "\n  <div class=\"slider-swatches\">\n    <div class=\"slider-swatch-wrap\">\n      <color-slider-swatch\n        [hsl]=\"hsl\"\n        offset=\".80\"\n        [active]=\"active(0.80, 0.50)\"\n        (onClick)=\"handleClick($event)\"\n        first=\"true\"\n      ></color-slider-swatch>\n    </div>\n    <div class=\"slider-swatch-wrap\">\n      <color-slider-swatch\n        [hsl]=\"hsl\"\n        offset=\".65\"\n        [active]=\"active(0.65, 0.50)\"\n        (onClick)=\"handleClick($event)\"\n      ></color-slider-swatch>\n    </div>\n    <div class=\"slider-swatch-wrap\">\n      <color-slider-swatch\n        [hsl]=\"hsl\"\n        offset=\".50\"\n        [active]=\"active(0.50, 0.50)\"\n        (onClick)=\"handleClick($event)\"\n      ></color-slider-swatch>\n    </div>\n    <div class=\"slider-swatch-wrap\">\n      <color-slider-swatch\n        [hsl]=\"hsl\"\n        offset=\".35\"\n        [active]=\"active(0.35, 0.50)\"\n        (onClick)=\"handleClick($event)\"\n      ></color-slider-swatch>\n    </div>\n    <div class=\"slider-swatch-wrap\">\n      <color-slider-swatch\n        [hsl]=\"hsl\"\n        offset=\".20\"\n        [active]=\"active(0.20, 0.50)\"\n        (onClick)=\"handleClick($event)\"\n        last=\"true\"\n      ></color-slider-swatch>\n    </div>\n  </div>\n  ",
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    preserveWhitespaces: false,
                    styles: ["\n    .slider-swatches {\n      margin-top: 20px;\n    }\n    .slider-swatch-wrap {\n      box-sizing: border-box;\n      width: 20%;\n      padding-right: 1px;\n      float: left;\n    }\n  "]
                }] }
    ];
    SliderSwatchesComponent.propDecorators = {
        hsl: [{ type: Input }],
        onClick: [{ type: Output }],
        onSwatchHover: [{ type: Output }]
    };
    return SliderSwatchesComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var SliderComponent = /** @class */ (function (_super) {
    __extends(SliderComponent, _super);
    function SliderComponent() {
        var _this = _super.call(this) || this;
        _this.pointer = {
            width: '14px',
            height: '14px',
            borderRadius: '6px',
            transform: 'translate(-7px, -2px)',
            backgroundColor: 'rgb(248, 248, 248)',
            boxShadow: '0 1px 4px 0 rgba(0, 0, 0, 0.37)',
        };
        _this.radius = 2;
        return _this;
    }
    /**
     * @param {?} __0
     * @return {?}
     */
    SliderComponent.prototype.handlePickerChange = /**
     * @param {?} __0
     * @return {?}
     */
    function (_a) {
        var data = _a.data, $event = _a.$event;
        this.handleChange(data, $event);
    };
    SliderComponent.decorators = [
        { type: Component, args: [{
                    selector: 'color-slider',
                    template: "\n  <div class=\"slider-picker {{ className }}\">\n    <div class=\"slider-hue\">\n      <color-hue\n        [hsl]=\"hsl\" [radius]=\"radius\" [pointer]=\"pointer\"\n        (onChange)=\"handlePickerChange($event)\"\n      ></color-hue>\n    </div>\n    <div class=\"slider-swatches\">\n      <color-slider-swatches [hsl]=\"hsl\"\n        (onClick)=\"handlePickerChange($event)\"\n      ></color-slider-swatches>\n    </div>\n  </div>\n  ",
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    preserveWhitespaces: false,
                    styles: ["\n    .slider-hue {\n      height: 12px;\n      position: relative;\n    }\n  "]
                }] }
    ];
    /** @nocollapse */
    SliderComponent.ctorParameters = function () { return []; };
    SliderComponent.propDecorators = {
        pointer: [{ type: Input }],
        radius: [{ type: Input }]
    };
    return SliderComponent;
}(ColorWrap));
var ColorSliderModule = /** @class */ (function () {
    function ColorSliderModule() {
    }
    ColorSliderModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [
                        SliderComponent,
                        SliderSwatchComponent,
                        SliderSwatchesComponent,
                    ],
                    exports: [SliderComponent, SliderSwatchComponent, SliderSwatchesComponent],
                    imports: [CommonModule, HueModule, SwatchModule],
                },] }
    ];
    return ColorSliderModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */

export { SliderComponent, ColorSliderModule, SliderSwatchComponent as ɵa, SliderSwatchesComponent as ɵb };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,