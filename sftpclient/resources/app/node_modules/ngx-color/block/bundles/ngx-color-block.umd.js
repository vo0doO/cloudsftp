(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common'), require('ngx-color')) :
    typeof define === 'function' && define.amd ? define('ngx-color/block', ['exports', '@angular/core', '@angular/common', 'ngx-color'], factory) :
    (factory((global['ngx-color'] = global['ngx-color'] || {}, global['ngx-color'].block = {}),global.ng.core,global.ng.common,global['ngx-color']));
}(this, (function (exports,core,common,ngxColor) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b)
                if (b.hasOwnProperty(p))
                    d[p] = b[p]; };
        return extendStatics(d, b);
    };
    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var BlockSwatchesComponent = /** @class */ (function () {
        function BlockSwatchesComponent() {
            this.onClick = new core.EventEmitter();
            this.onSwatchHover = new core.EventEmitter();
        }
        /**
         * @return {?}
         */
        BlockSwatchesComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.swatchStyle = {
                    width: '22px',
                    height: '22px',
                    float: 'left',
                    marginRight: '10px',
                    marginBottom: '10px',
                    borderRadius: '4px',
                };
            };
        /**
         * @param {?} __0
         * @return {?}
         */
        BlockSwatchesComponent.prototype.handleClick = /**
         * @param {?} __0
         * @return {?}
         */
            function (_a) {
                var hex = _a.hex, $event = _a.$event;
                this.onClick.emit({ hex: hex, $event: $event });
            };
        /**
         * @param {?} c
         * @return {?}
         */
        BlockSwatchesComponent.prototype.focusStyle = /**
         * @param {?} c
         * @return {?}
         */
            function (c) {
                return {
                    boxShadow: c + " 0 0 4px",
                };
            };
        BlockSwatchesComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'color-block-swatches',
                        template: "\n    <div class=\"block-swatches\">\n      <color-swatch\n        *ngFor=\"let c of colors\"\n        [color]=\"c\"\n        [style]=\"swatchStyle\"\n        [focusStyle]=\"focusStyle(c)\"\n        (onClick)=\"handleClick($event)\"\n        (onHover)=\"onSwatchHover.emit($event)\"\n      ></color-swatch>\n      <div class=\"clear\"></div>\n    </div>\n  ",
                        styles: ["\n    .block-swatches {\n      margin-right: -10px;\n    }\n    .clear {\n      clear: both;\n    }\n  "]
                    }] }
        ];
        /** @nocollapse */
        BlockSwatchesComponent.ctorParameters = function () { return []; };
        BlockSwatchesComponent.propDecorators = {
            colors: [{ type: core.Input }],
            onClick: [{ type: core.Output }],
            onSwatchHover: [{ type: core.Output }]
        };
        return BlockSwatchesComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var BlockComponent = /** @class */ (function (_super) {
        __extends(BlockComponent, _super);
        function BlockComponent() {
            var _this = _super.call(this) || this;
            /**
             * Pixel value for picker width
             */
            _this.width = 170;
            /**
             * Color squares to display
             */
            _this.colors = [
                '#D9E3F0',
                '#F47373',
                '#697689',
                '#37D67A',
                '#2CCCE4',
                '#555555',
                '#dce775',
                '#ff8a65',
                '#ba68c8',
            ];
            _this.triangle = 'top';
            _this.input = {
                width: '100%',
                fontSize: '12px',
                color: '#666',
                border: '0px',
                outline: 'none',
                height: '22px',
                boxShadow: 'inset 0 0 0 1px #ddd',
                borderRadius: '4px',
                padding: '0 7px',
                boxSizing: 'border-box',
            };
            _this.wrap = {
                position: 'relative',
                width: '100%',
            };
            return _this;
        }
        /**
         * @param {?} __0
         * @return {?}
         */
        BlockComponent.prototype.handleValueChange = /**
         * @param {?} __0
         * @return {?}
         */
            function (_a) {
                var data = _a.data, $event = _a.$event;
                this.handleBlockChange({ hex: data, $event: $event });
            };
        /**
         * @param {?} hex
         * @return {?}
         */
        BlockComponent.prototype.getContrastingColor = /**
         * @param {?} hex
         * @return {?}
         */
            function (hex) {
                return ngxColor.getContrastingColor(hex);
            };
        /**
         * @param {?} __0
         * @return {?}
         */
        BlockComponent.prototype.handleBlockChange = /**
         * @param {?} __0
         * @return {?}
         */
            function (_a) {
                var hex = _a.hex, $event = _a.$event;
                if (ngxColor.isValidHex(hex)) {
                    // this.hex = hex;
                    this.handleChange({
                        hex: hex,
                        source: 'hex',
                    }, $event);
                }
            };
        BlockComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'color-block',
                        template: "\n  <div class=\"block-card block-picker {{ className }}\">\n    <div class=\"block-triangle\" *ngIf=\"triangle !== 'hide'\"\n      [style.border-color]=\"'transparent transparent ' + this.hex + ' transparent'\"\n    ></div>\n\n    <div class=\"block-head\" [style.background]=\"hex\">\n      <color-checkboard *ngIf=\"hex === 'transparent'\"\n        borderRadius=\"6px 6px 0 0\"\n      ></color-checkboard>\n      <div class=\"block-label\" [style.color]=\"getContrastingColor(hex)\">\n        {{ hex }}\n      </div>\n    </div>\n\n    <div class=\"block-body\">\n      <color-block-swatches [colors]=\"colors\"\n        (onClick)=\"handleBlockChange($event)\"\n        (onSwatchHover)=\"onSwatchHover.emit($event)\"\n      ></color-block-swatches>\n      <color-editable-input [value]=\"hex\"\n        (onChange)=\"handleValueChange($event)\"\n        [style]=\"{input: input, wrap: wrap}\"\n      ></color-editable-input>\n    </div>\n  </div>\n  ",
                        preserveWhitespaces: false,
                        changeDetection: core.ChangeDetectionStrategy.OnPush,
                        styles: ["\n    .block-card {\n      background: #fff;\n      border-radius: 6px;\n      box-shadow: 0 1px rgba(0, 0, 0, .1);\n      position: relative;\n    }\n    .block-head {\n      align-items: center;\n      border-radius: 6px 6px 0 0;\n      display: flex;\n      height: 110px;\n      justify-content: center;\n      position: relative;\n    }\n    .block-body {\n      padding: 10px;\n    }\n    .block-label {\n      font-size: 18px;\n      position: relative;\n    }\n    .block-triangle {\n      border-style: solid;\n      border-width: 0 10px 10px 10px;\n      height: 0;\n      left: 50%;\n      margin-left: -10px;\n      position: absolute;\n      top: -10px;\n      width: 0;\n    }\n  "]
                    }] }
        ];
        /** @nocollapse */
        BlockComponent.ctorParameters = function () { return []; };
        BlockComponent.propDecorators = {
            width: [{ type: core.Input }],
            colors: [{ type: core.Input }],
            triangle: [{ type: core.Input }]
        };
        return BlockComponent;
    }(ngxColor.ColorWrap));
    var ColorBlockModule = /** @class */ (function () {
        function ColorBlockModule() {
        }
        ColorBlockModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [BlockComponent, BlockSwatchesComponent],
                        exports: [BlockComponent, BlockSwatchesComponent],
                        imports: [common.CommonModule, ngxColor.CheckboardModule, ngxColor.SwatchModule, ngxColor.EditableInputModule],
                    },] }
        ];
        return ColorBlockModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */

    exports.BlockComponent = BlockComponent;
    exports.ColorBlockModule = ColorBlockModule;
    exports.ɵa = BlockSwatchesComponent;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,