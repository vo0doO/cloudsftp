(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('ngx-color'), require('@angular/common')) :
    typeof define === 'function' && define.amd ? define('ngx-color/sketch', ['exports', '@angular/core', 'ngx-color', '@angular/common'], factory) :
    (factory((global['ngx-color'] = global['ngx-color'] || {}, global['ngx-color'].sketch = {}),global.ng.core,global['ngx-color'],global.ng.common));
}(this, (function (exports,core,ngxColor,common) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b)
                if (b.hasOwnProperty(p))
                    d[p] = b[p]; };
        return extendStatics(d, b);
    };
    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var SketchFieldsComponent = /** @class */ (function () {
        function SketchFieldsComponent() {
            this.disableAlpha = false;
            this.onChange = new core.EventEmitter();
            this.input = {
                width: '100%',
                padding: '4px 10% 3px',
                border: 'none',
                boxSizing: 'border-box',
                boxShadow: 'inset 0 0 0 1px #ccc',
                fontSize: '11px',
            };
            this.label = {
                display: 'block',
                textAlign: 'center',
                fontSize: '11px',
                color: '#222',
                paddingTop: '3px',
                paddingBottom: '4px',
                textTransform: 'capitalize',
            };
        }
        /**
         * @param {?} value
         * @return {?}
         */
        SketchFieldsComponent.prototype.round = /**
         * @param {?} value
         * @return {?}
         */
            function (value) {
                return Math.round(value);
            };
        /**
         * @param {?} __0
         * @return {?}
         */
        SketchFieldsComponent.prototype.handleChange = /**
         * @param {?} __0
         * @return {?}
         */
            function (_a) {
                var data = _a.data, $event = _a.$event;
                if (data.hex) {
                    if (ngxColor.isValidHex(data.hex)) {
                        this.onChange.emit({
                            data: {
                                hex: data.hex,
                                source: 'hex',
                            },
                            $event: $event,
                        });
                    }
                }
                else if (data.r || data.g || data.b) {
                    this.onChange.emit({
                        data: {
                            r: data.r || this.rgb.r,
                            g: data.g || this.rgb.g,
                            b: data.b || this.rgb.b,
                            source: 'rgb',
                        },
                        $event: $event,
                    });
                }
                else if (data.a) {
                    if (data.a < 0) {
                        data.a = 0;
                    }
                    else if (data.a > 100) {
                        data.a = 100;
                    }
                    data.a /= 100;
                    this.onChange.emit({
                        data: {
                            h: this.hsl.h,
                            s: this.hsl.s,
                            l: this.hsl.l,
                            a: Math.round(data.a * 100) / 100,
                            source: 'rgb',
                        },
                        $event: $event,
                    });
                }
                else if (data.h || data.s || data.l) {
                    this.onChange.emit({
                        data: {
                            h: data.h || this.hsl.h,
                            s: Number((data.s && data.s) || this.hsl.s),
                            l: Number((data.l && data.l) || this.hsl.l),
                            source: 'hsl',
                        },
                        $event: $event,
                    });
                }
            };
        SketchFieldsComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'color-sketch-fields',
                        template: "\n  <div class=\"sketch-fields\">\n    <div class=\"sketch-double\">\n      <color-editable-input\n        [style]=\"{ input: input, label: label }\"\n        label=\"hex\"\n        [value]=\"hex.replace('#', '')\"\n        (onChange)=\"handleChange($event)\"\n      ></color-editable-input>\n    </div>\n    <div class=\"sketch-single\">\n      <color-editable-input\n        [style]=\"{ input: input, label: label }\"\n        label=\"r\"\n        [value]=\"rgb.r\"\n        (onChange)=\"handleChange($event)\"\n        [dragLabel]=\"true\"\n        [dragMax]=\"255\"\n      ></color-editable-input>\n    </div>\n    <div class=\"sketch-single\">\n      <color-editable-input\n        [style]=\"{ input: input, label: label }\"\n        label=\"g\"\n        [value]=\"rgb.g\"\n        (onChange)=\"handleChange($event)\"\n        [dragLabel]=\"true\"\n        [dragMax]=\"255\"\n      ></color-editable-input>\n    </div>\n    <div class=\"sketch-single\">\n      <color-editable-input\n        [style]=\"{ input: input, label: label }\"\n        label=\"b\"\n        [value]=\"rgb.b\"\n        (onChange)=\"handleChange($event)\"\n        [dragLabel]=\"true\"\n        [dragMax]=\"255\"\n      ></color-editable-input>\n    </div>\n    <div class=\"sketch-alpha\" *ngIf=\"disableAlpha === false\">\n      <color-editable-input\n        [style]=\"{ input: input, label: label }\"\n        label=\"a\"\n        [value]=\"round(rgb.a * 100)\"\n        (onChange)=\"handleChange($event)\"\n        [dragLabel]=\"true\"\n        [dragMax]=\"100\"\n      ></color-editable-input>\n    </div>\n  </div>\n  ",
                        changeDetection: core.ChangeDetectionStrategy.OnPush,
                        preserveWhitespaces: false,
                        styles: ["\n    .sketch-fields {\n      display: flex;\n      padding-top: 4px;\n    }\n    .sketch-double {\n      -webkit-box-flex: 2;\n      flex: 2 1 0%;\n    }\n    .sketch-single {\n      flex: 1 1 0%;\n      padding-left: 6px;\n    }\n    .sketch-alpha {\n      -webkit-box-flex: 1;\n      flex: 1 1 0%;\n      padding-left: 6px;\n    }\n  "]
                    }] }
        ];
        SketchFieldsComponent.propDecorators = {
            hsl: [{ type: core.Input }],
            rgb: [{ type: core.Input }],
            hex: [{ type: core.Input }],
            disableAlpha: [{ type: core.Input }],
            onChange: [{ type: core.Output }]
        };
        return SketchFieldsComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var SketchPresetColorsComponent = /** @class */ (function () {
        function SketchPresetColorsComponent() {
            this.onClick = new core.EventEmitter();
            this.onSwatchHover = new core.EventEmitter();
            this.swatchStyle = {
                borderRadius: '3px',
                boxShadow: 'inset 0 0 0 1px rgba(0,0,0,.15)',
            };
        }
        /**
         * @param {?} __0
         * @return {?}
         */
        SketchPresetColorsComponent.prototype.handleClick = /**
         * @param {?} __0
         * @return {?}
         */
            function (_a) {
                var hex = _a.hex, $event = _a.$event;
                this.onClick.emit({ hex: hex, $event: $event });
            };
        /**
         * @param {?} val
         * @return {?}
         */
        SketchPresetColorsComponent.prototype.normalizeValue = /**
         * @param {?} val
         * @return {?}
         */
            function (val) {
                if (typeof val === 'string') {
                    return { color: val };
                }
                return val;
            };
        /**
         * @param {?} val
         * @return {?}
         */
        SketchPresetColorsComponent.prototype.focusStyle = /**
         * @param {?} val
         * @return {?}
         */
            function (val) {
                /** @type {?} */
                var c = this.normalizeValue(val);
                return {
                    boxShadow: "inset 0 0 0 1px rgba(0,0,0,.15), 0 0 4px " + c.color,
                };
            };
        SketchPresetColorsComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'color-sketch-preset-colors',
                        template: "\n  <div class=\"sketch-swatches\">\n    <div class=\"sketch-wrap\" *ngFor=\"let c of colors\">\n      <color-swatch\n        [color]=\"normalizeValue(c).color\"\n        [style]=\"swatchStyle\"\n        [focusStyle]=\"focusStyle(c)\"\n        (onClick)=\"handleClick($event)\"\n        (onHover)=\"onSwatchHover.emit($event)\"\n        class=\"swatch\"\n      ></color-swatch>\n    </div>\n  </div>\n  ",
                        changeDetection: core.ChangeDetectionStrategy.OnPush,
                        preserveWhitespaces: false,
                        styles: ["\n    .sketch-swatches {\n      margin: 0px -10px;\n      padding: 10px 0px 0px 10px;\n      border-top: 1px solid rgb(238, 238, 238);\n      display: flex;\n      flex-wrap: wrap;\n      position: relative;\n    }\n    .sketch-wrap {\n      width: 16px;\n      height: 16px;\n      margin: 0px 10px 10px 0px;\n    }\n  "]
                    }] }
        ];
        SketchPresetColorsComponent.propDecorators = {
            colors: [{ type: core.Input }],
            onClick: [{ type: core.Output }],
            onSwatchHover: [{ type: core.Output }]
        };
        return SketchPresetColorsComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var SketchComponent = /** @class */ (function (_super) {
        __extends(SketchComponent, _super);
        function SketchComponent() {
            var _this = _super.call(this) || this;
            /**
             * Remove alpha slider and options from picker
             */
            _this.disableAlpha = false;
            /**
             * Hex strings for default colors at bottom of picker
             */
            _this.presetColors = [
                '#D0021B',
                '#F5A623',
                '#F8E71C',
                '#8B572A',
                '#7ED321',
                '#417505',
                '#BD10E0',
                '#9013FE',
                '#4A90E2',
                '#50E3C2',
                '#B8E986',
                '#000000',
                '#4A4A4A',
                '#9B9B9B',
                '#FFFFFF',
            ];
            /**
             * Width of picker
             */
            _this.width = 200;
            return _this;
        }
        /**
         * @return {?}
         */
        SketchComponent.prototype.afterValidChange = /**
         * @return {?}
         */
            function () {
                this.activeBackground = "rgba(" + this.rgb.r + ", " + this.rgb.g + ", " + this.rgb.b + ", " + this.rgb.a + ")";
            };
        /**
         * @param {?} __0
         * @return {?}
         */
        SketchComponent.prototype.handleValueChange = /**
         * @param {?} __0
         * @return {?}
         */
            function (_a) {
                var data = _a.data, $event = _a.$event;
                this.handleChange(data, $event);
            };
        /**
         * @param {?} __0
         * @return {?}
         */
        SketchComponent.prototype.handleBlockChange = /**
         * @param {?} __0
         * @return {?}
         */
            function (_a) {
                var hex = _a.hex, $event = _a.$event;
                if (ngxColor.isValidHex(hex)) {
                    // this.hex = hex;
                    this.handleChange({
                        hex: hex,
                        source: 'hex',
                    }, $event);
                }
            };
        SketchComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'color-sketch',
                        template: "\n  <div class=\"sketch-picker {{ className }}\" [style.width]=\"width\">\n    <div class=\"sketch-saturation\">\n      <color-saturation [hsl]=\"hsl\" [hsv]=\"hsv\"\n        (onChange)=\"handleValueChange($event)\"\n      >\n      </color-saturation>\n    </div>\n    <div class=\"sketch-controls\">\n      <div class=\"sketch-sliders\">\n        <div class=\"sketch-hue\">\n          <color-hue [hsl]=\"hsl\"\n            (onChange)=\"handleValueChange($event)\"\n          ></color-hue>\n        </div>\n        <div class=\"sketch-alpha\">\n          <color-alpha\n            [radius]=\"2\" [rgb]=\"rgb\" [hsl]=\"hsl\"\n            (onChange)=\"handleValueChange($event)\"\n          ></color-alpha>\n        </div>\n      </div>\n      <div class=\"sketch-color\">\n        <color-checkboard></color-checkboard>\n        <div class=\"sketch-active\" [style.background]=\"activeBackground\"></div>\n      </div>\n    </div>\n    <div class=\"sketch-controls\">\n      <color-sketch-fields\n        [rgb]=\"rgb\" [hsl]=\"hsl\" [hex]=\"hex\"\n        [disableAlpha]=\"disableAlpha\"\n        (onChange)=\"handleValueChange($event)\"\n      ></color-sketch-fields>\n    </div>\n    <div class=\"sketch-controls\">\n      <color-sketch-preset-colors\n        [colors]=\"presetColors\"\n        (onClick)=\"handleBlockChange($event)\"\n        (onSwatchHover)=\"onSwatchHover.emit($event)\"\n      ></color-sketch-preset-colors>\n    </div>\n  </div>\n  ",
                        changeDetection: core.ChangeDetectionStrategy.OnPush,
                        preserveWhitespaces: false,
                        styles: ["\n    .sketch-picker {\n      padding: 10px 10px 0;\n      box-sizing: initial;\n      background: #fff;\n      border-radius: 4px;\n      box-shadow: 0 0 0 1px rgba(0,0,0,.15), 0 8px 16px rgba(0,0,0,.15);\n    }\n    .sketch-saturation {\n      width: 100%;\n      padding-bottom: 75%;\n      position: relative;\n      overflow: hidden;\n    }\n    .sketch-controls {\n      display: flex;\n    }\n    .sketch-sliders {\n      padding: 4px 0px;\n      -webkit-box-flex: 1;\n      flex: 1 1 0%;\n    }\n    .sketch-hue {\n      position: relative;\n      height: 10px;\n      overflow: hidden;\n    }\n    .sketch-alpha {\n      position: relative;\n      height: 10px;\n      margin-top: 4px;\n      overflow: hidden;\n    }\n    .sketch-color {\n      width: 24px;\n      height: 24px;\n      position: relative;\n      margin-top: 4px;\n      margin-left: 4px;\n      border-radius: 3px;\n    }\n    .sketch-active {\n      position: absolute;\n      top: 0px;\n      right: 0px;\n      bottom: 0px;\n      left: 0px;\n      border-radius: 2px;\n      box-shadow: rgba(0, 0, 0, 0.15) 0px 0px 0px 1px inset, rgba(0, 0, 0, 0.25) 0px 0px 4px inset;\n    }\n  "]
                    }] }
        ];
        /** @nocollapse */
        SketchComponent.ctorParameters = function () { return []; };
        SketchComponent.propDecorators = {
            disableAlpha: [{ type: core.Input }],
            presetColors: [{ type: core.Input }],
            width: [{ type: core.Input }]
        };
        return SketchComponent;
    }(ngxColor.ColorWrap));
    var ColorSketchModule = /** @class */ (function () {
        function ColorSketchModule() {
        }
        ColorSketchModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [
                            SketchComponent,
                            SketchFieldsComponent,
                            SketchPresetColorsComponent,
                        ],
                        exports: [
                            SketchComponent,
                            SketchFieldsComponent,
                            SketchPresetColorsComponent,
                        ],
                        imports: [
                            common.CommonModule,
                            ngxColor.AlphaModule,
                            ngxColor.CheckboardModule,
                            ngxColor.EditableInputModule,
                            ngxColor.HueModule,
                            ngxColor.SaturationModule,
                            ngxColor.SwatchModule,
                        ],
                    },] }
        ];
        return ColorSketchModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */

    exports.SketchComponent = SketchComponent;
    exports.ColorSketchModule = ColorSketchModule;
    exports.ɵa = SketchFieldsComponent;
    exports.ɵb = SketchPresetColorsComponent;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,