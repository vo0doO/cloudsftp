/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { CommonModule } from '@angular/common';
import { ChangeDetectionStrategy, Component, EventEmitter, Input, NgModule, Output, } from '@angular/core';
import { fromEvent } from 'rxjs';
export class EditableInputComponent {
    constructor() {
        this.placeholder = '';
        this.onChange = new EventEmitter();
        this.focus = false;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.wrapStyle = this.style && this.style.wrap ? this.style.wrap : {};
        this.inputStyle = this.style && this.style.input ? this.style.input : {};
        this.labelStyle = this.style && this.style.label ? this.style.label : {};
        if (this.dragLabel) {
            this.labelStyle.cursor = 'ew-resize';
        }
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    handleFocus($event) {
        this.focus = true;
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    handleFocusOut($event) {
        this.focus = false;
        this.currentValue = this.blurValue;
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    handleKeydown($event) {
        // In case `e.target.value` is a percentage remove the `%` character
        // and update accordingly with a percentage
        // https://github.com/casesandberg/react-color/issues/383
        /** @type {?} */
        const stringValue = String($event.target.value);
        /** @type {?} */
        const isPercentage = stringValue.indexOf('%') > -1;
        /** @type {?} */
        const number = Number(stringValue.replace(/%/g, ''));
        if (!isNaN(number)) {
            /** @type {?} */
            const amount = this.arrowOffset || 1;
            // Up
            if ($event.keyCode === 38) {
                if (this.label) {
                    this.onChange.emit({
                        data: { [this.label]: number + amount },
                        $event,
                    });
                }
                else {
                    this.onChange.emit({ data: number + amount, $event });
                }
                if (isPercentage) {
                    this.currentValue = `${number + amount}%`;
                }
                else {
                    this.currentValue = number + amount;
                }
            }
            // Down
            if ($event.keyCode === 40) {
                if (this.label) {
                    this.onChange.emit({
                        data: { [this.label]: number - amount },
                        $event,
                    });
                }
                else {
                    this.onChange.emit({ data: number - amount, $event });
                }
                if (isPercentage) {
                    this.currentValue = `${number - amount}%`;
                }
                else {
                    this.currentValue = number - amount;
                }
            }
        }
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    handleKeyup($event) {
        if ($event.keyCode === 40 || $event.keyCode === 38) {
            return;
        }
        if (this.label) {
            this.onChange.emit({
                data: { [this.label]: $event.target.value },
                $event,
            });
        }
        else {
            this.onChange.emit({ data: $event.target.value, $event });
        }
    }
    /**
     * @return {?}
     */
    ngOnChanges() {
        if (!this.focus) {
            this.currentValue = String(this.value).toUpperCase();
            this.blurValue = String(this.value).toUpperCase();
        }
        else {
            this.blurValue = String(this.value).toUpperCase();
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.unsubscribe();
    }
    /**
     * @return {?}
     */
    subscribe() {
        this.mousemove = fromEvent(document, 'mousemove').subscribe((ev) => this.handleDrag(ev));
        this.mouseup = fromEvent(document, 'mouseup').subscribe(() => this.unsubscribe());
    }
    /**
     * @return {?}
     */
    unsubscribe() {
        if (this.mousemove) {
            this.mousemove.unsubscribe();
        }
        if (this.mouseup) {
            this.mouseup.unsubscribe();
        }
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    handleMousedown($event) {
        if (this.dragLabel) {
            $event.preventDefault();
            this.handleDrag($event);
            this.subscribe();
        }
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    handleDrag($event) {
        if (this.dragLabel) {
            /** @type {?} */
            const newValue = Math.round(this.value + $event.movementX);
            if (newValue >= 0 && newValue <= this.dragMax) {
                this.onChange.emit({ data: { [this.label]: newValue }, $event });
            }
        }
    }
}
EditableInputComponent.decorators = [
    { type: Component, args: [{
                selector: 'color-editable-input',
                template: `
  <div class="wrap" [ngStyle]="wrapStyle">
    <input [ngStyle]="inputStyle" spellCheck="false"
      [value]="currentValue" [placeholder]="placeholder"
      (keydown)="handleKeydown($event)" (keyup)="handleKeyup($event)"
      (focus)="handleFocus($event)" (focusout)="handleFocusOut($event)" />
    <span *ngIf="label" [ngStyle]="labelStyle" (mousedown)="handleMousedown($event)">
      {{ label }}
    </span>
  </div>
  `,
                changeDetection: ChangeDetectionStrategy.OnPush,
                styles: [`
    :host {
      display: flex;
    }
    .wrap {
      position: relative;
    }
  `]
            }] }
];
EditableInputComponent.propDecorators = {
    style: [{ type: Input }],
    label: [{ type: Input }],
    value: [{ type: Input }],
    arrowOffset: [{ type: Input }],
    dragLabel: [{ type: Input }],
    dragMax: [{ type: Input }],
    placeholder: [{ type: Input }],
    onChange: [{ type: Output }]
};
if (false) {
    /** @type {?} */
    EditableInputComponent.prototype.style;
    /** @type {?} */
    EditableInputComponent.prototype.label;
    /** @type {?} */
    EditableInputComponent.prototype.value;
    /** @type {?} */
    EditableInputComponent.prototype.arrowOffset;
    /** @type {?} */
    EditableInputComponent.prototype.dragLabel;
    /** @type {?} */
    EditableInputComponent.prototype.dragMax;
    /** @type {?} */
    EditableInputComponent.prototype.placeholder;
    /** @type {?} */
    EditableInputComponent.prototype.onChange;
    /** @type {?} */
    EditableInputComponent.prototype.currentValue;
    /** @type {?} */
    EditableInputComponent.prototype.blurValue;
    /** @type {?} */
    EditableInputComponent.prototype.wrapStyle;
    /** @type {?} */
    EditableInputComponent.prototype.inputStyle;
    /** @type {?} */
    EditableInputComponent.prototype.labelStyle;
    /** @type {?} */
    EditableInputComponent.prototype.focus;
    /** @type {?} */
    EditableInputComponent.prototype.mousemove;
    /** @type {?} */
    EditableInputComponent.prototype.mouseup;
}
export class EditableInputModule {
}
EditableInputModule.decorators = [
    { type: NgModule, args: [{
                declarations: [EditableInputComponent],
                exports: [EditableInputComponent],
                imports: [CommonModule],
            },] }
];
//# sourceMappingURL=data:application/json;base64,