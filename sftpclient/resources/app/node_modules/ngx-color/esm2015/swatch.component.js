/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { CommonModule } from '@angular/common';
import { ChangeDetectionStrategy, Component, EventEmitter, Input, NgModule, Output, } from '@angular/core';
import { CheckboardModule } from './checkboard.component';
export class SwatchComponent {
    constructor() {
        this.style = {};
        this.focusStyle = {};
        this.onClick = new EventEmitter();
        this.onHover = new EventEmitter();
        this.divStyles = {};
        this.focusStyles = {};
        this.inFocus = false;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.divStyles = Object.assign({ background: this.color, height: '100%', width: '100%', cursor: 'pointer', position: 'relative', outline: 'none' }, this.style);
        this.focusStyles = Object.assign({}, this.divStyles, this.focusStyle);
    }
    /**
     * @return {?}
     */
    activeStyles() {
        return this.focus || this.inFocus ? this.focusStyles : this.divStyles;
    }
    /**
     * @return {?}
     */
    handleFocusOut() {
        this.inFocus = false;
    }
    /**
     * @return {?}
     */
    handleFocus() {
        this.inFocus = true;
    }
    /**
     * @param {?} hex
     * @param {?} $event
     * @return {?}
     */
    handleHover(hex, $event) {
        this.onHover.emit({ hex, $event });
    }
    /**
     * @param {?} hex
     * @param {?} $event
     * @return {?}
     */
    handleClick(hex, $event) {
        this.onClick.emit({ hex, $event });
    }
}
SwatchComponent.decorators = [
    { type: Component, args: [{
                selector: 'color-swatch',
                template: `
  <div class="swatch"
    [ngStyle]="activeStyles()" [attr.title]="color"
    (click)="handleClick(color, $event)"
    (keydown.enter)="handleClick(color, $event)"
    (focus)="handleFocus()"
    (focusout)="handleFocusOut()"
    (mouseover)="handleHover(color, $event)"
    tabindex="0"
  >
    <ng-content></ng-content>
    <color-checkboard
      *ngIf="color === 'transparent'"
      boxShadow="inset 0 0 0 1px rgba(0,0,0,0.1)"
    ></color-checkboard>
  </div>
  `,
                changeDetection: ChangeDetectionStrategy.OnPush,
                preserveWhitespaces: false
            }] }
];
SwatchComponent.propDecorators = {
    color: [{ type: Input }],
    style: [{ type: Input }],
    focusStyle: [{ type: Input }],
    focus: [{ type: Input }],
    onClick: [{ type: Output }],
    onHover: [{ type: Output }]
};
if (false) {
    /** @type {?} */
    SwatchComponent.prototype.color;
    /** @type {?} */
    SwatchComponent.prototype.style;
    /** @type {?} */
    SwatchComponent.prototype.focusStyle;
    /** @type {?} */
    SwatchComponent.prototype.focus;
    /** @type {?} */
    SwatchComponent.prototype.onClick;
    /** @type {?} */
    SwatchComponent.prototype.onHover;
    /** @type {?} */
    SwatchComponent.prototype.divStyles;
    /** @type {?} */
    SwatchComponent.prototype.focusStyles;
    /** @type {?} */
    SwatchComponent.prototype.inFocus;
}
export class SwatchModule {
}
SwatchModule.decorators = [
    { type: NgModule, args: [{
                declarations: [SwatchComponent],
                exports: [SwatchComponent],
                imports: [CommonModule, CheckboardModule],
            },] }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3dhdGNoLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25neC1jb2xvci8iLCJzb3VyY2VzIjpbInN3YXRjaC5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUMvQyxPQUFPLEVBQ0wsdUJBQXVCLEVBQ3ZCLFNBQVMsRUFDVCxZQUFZLEVBQ1osS0FBSyxFQUNMLFFBQVEsRUFFUixNQUFNLEdBQ1AsTUFBTSxlQUFlLENBQUM7QUFFdkIsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUF3QjFELE1BQU0sT0FBTyxlQUFlO0lBdEI1QjtRQXdCVyxVQUFLLEdBQThCLEVBQUUsQ0FBQztRQUN0QyxlQUFVLEdBQThCLEVBQUUsQ0FBQztRQUUxQyxZQUFPLEdBQUcsSUFBSSxZQUFZLEVBQWlDLENBQUM7UUFDNUQsWUFBTyxHQUFHLElBQUksWUFBWSxFQUFpQyxDQUFDO1FBQ3RFLGNBQVMsR0FBNEIsRUFBRSxDQUFDO1FBQ3hDLGdCQUFXLEdBQTRCLEVBQUUsQ0FBQztRQUMxQyxZQUFPLEdBQUcsS0FBSyxDQUFDO0lBZ0NsQixDQUFDOzs7O0lBOUJDLFFBQVE7UUFDTixJQUFJLENBQUMsU0FBUyxtQkFDWixVQUFVLEVBQUUsSUFBSSxDQUFDLEtBQUssRUFDdEIsTUFBTSxFQUFFLE1BQU0sRUFDZCxLQUFLLEVBQUUsTUFBTSxFQUNiLE1BQU0sRUFBRSxTQUFTLEVBQ2pCLFFBQVEsRUFBRSxVQUFVLEVBQ3BCLE9BQU8sRUFBRSxNQUFNLElBQ1osSUFBSSxDQUFDLEtBQUssQ0FDZCxDQUFDO1FBQ0YsSUFBSSxDQUFDLFdBQVcscUJBQ1gsSUFBSSxDQUFDLFNBQVMsRUFDZCxJQUFJLENBQUMsVUFBVSxDQUNuQixDQUFDO0lBQ0osQ0FBQzs7OztJQUNELFlBQVk7UUFDVixPQUFPLElBQUksQ0FBQyxLQUFLLElBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQztJQUN4RSxDQUFDOzs7O0lBQ0QsY0FBYztRQUNaLElBQUksQ0FBQyxPQUFPLEdBQUcsS0FBSyxDQUFDO0lBQ3ZCLENBQUM7Ozs7SUFDRCxXQUFXO1FBQ1QsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUM7SUFDdEIsQ0FBQzs7Ozs7O0lBQ0QsV0FBVyxDQUFDLEdBQUcsRUFBRSxNQUFNO1FBQ3JCLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEVBQUUsR0FBRyxFQUFFLE1BQU0sRUFBRSxDQUFDLENBQUM7SUFDckMsQ0FBQzs7Ozs7O0lBQ0QsV0FBVyxDQUFDLEdBQUcsRUFBRSxNQUFNO1FBQ3JCLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEVBQUUsR0FBRyxFQUFFLE1BQU0sRUFBRSxDQUFDLENBQUM7SUFDckMsQ0FBQzs7O1lBOURGLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUsY0FBYztnQkFDeEIsUUFBUSxFQUFFOzs7Ozs7Ozs7Ozs7Ozs7O0dBZ0JUO2dCQUNELGVBQWUsRUFBRSx1QkFBdUIsQ0FBQyxNQUFNO2dCQUMvQyxtQkFBbUIsRUFBRSxLQUFLO2FBQzNCOzs7b0JBRUUsS0FBSztvQkFDTCxLQUFLO3lCQUNMLEtBQUs7b0JBQ0wsS0FBSztzQkFDTCxNQUFNO3NCQUNOLE1BQU07Ozs7SUFMUCxnQ0FBZTs7SUFDZixnQ0FBK0M7O0lBQy9DLHFDQUFvRDs7SUFDcEQsZ0NBQXdCOztJQUN4QixrQ0FBc0U7O0lBQ3RFLGtDQUFzRTs7SUFDdEUsb0NBQXdDOztJQUN4QyxzQ0FBMEM7O0lBQzFDLGtDQUFnQjs7QUF1Q2xCLE1BQU0sT0FBTyxZQUFZOzs7WUFMeEIsUUFBUSxTQUFDO2dCQUNSLFlBQVksRUFBRSxDQUFDLGVBQWUsQ0FBQztnQkFDL0IsT0FBTyxFQUFFLENBQUMsZUFBZSxDQUFDO2dCQUMxQixPQUFPLEVBQUUsQ0FBQyxZQUFZLEVBQUUsZ0JBQWdCLENBQUM7YUFDMUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21tb25Nb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuaW1wb3J0IHtcbiAgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksXG4gIENvbXBvbmVudCxcbiAgRXZlbnRFbWl0dGVyLFxuICBJbnB1dCxcbiAgTmdNb2R1bGUsXG4gIE9uSW5pdCxcbiAgT3V0cHV0LFxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgQ2hlY2tib2FyZE1vZHVsZSB9IGZyb20gJy4vY2hlY2tib2FyZC5jb21wb25lbnQnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdjb2xvci1zd2F0Y2gnLFxuICB0ZW1wbGF0ZTogYFxuICA8ZGl2IGNsYXNzPVwic3dhdGNoXCJcbiAgICBbbmdTdHlsZV09XCJhY3RpdmVTdHlsZXMoKVwiIFthdHRyLnRpdGxlXT1cImNvbG9yXCJcbiAgICAoY2xpY2spPVwiaGFuZGxlQ2xpY2soY29sb3IsICRldmVudClcIlxuICAgIChrZXlkb3duLmVudGVyKT1cImhhbmRsZUNsaWNrKGNvbG9yLCAkZXZlbnQpXCJcbiAgICAoZm9jdXMpPVwiaGFuZGxlRm9jdXMoKVwiXG4gICAgKGZvY3Vzb3V0KT1cImhhbmRsZUZvY3VzT3V0KClcIlxuICAgIChtb3VzZW92ZXIpPVwiaGFuZGxlSG92ZXIoY29sb3IsICRldmVudClcIlxuICAgIHRhYmluZGV4PVwiMFwiXG4gID5cbiAgICA8bmctY29udGVudD48L25nLWNvbnRlbnQ+XG4gICAgPGNvbG9yLWNoZWNrYm9hcmRcbiAgICAgICpuZ0lmPVwiY29sb3IgPT09ICd0cmFuc3BhcmVudCdcIlxuICAgICAgYm94U2hhZG93PVwiaW5zZXQgMCAwIDAgMXB4IHJnYmEoMCwwLDAsMC4xKVwiXG4gICAgPjwvY29sb3ItY2hlY2tib2FyZD5cbiAgPC9kaXY+XG4gIGAsXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxuICBwcmVzZXJ2ZVdoaXRlc3BhY2VzOiBmYWxzZSxcbn0pXG5leHBvcnQgY2xhc3MgU3dhdGNoQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0IHtcbiAgQElucHV0KCkgY29sb3I7XG4gIEBJbnB1dCgpIHN0eWxlOiB7IFtrZXk6IHN0cmluZ106IHN0cmluZyB9ID0ge307XG4gIEBJbnB1dCgpIGZvY3VzU3R5bGU6IHsgW2tleTogc3RyaW5nXTogc3RyaW5nIH0gPSB7fTtcbiAgQElucHV0KCkgZm9jdXM6IGJvb2xlYW47XG4gIEBPdXRwdXQoKSBvbkNsaWNrID0gbmV3IEV2ZW50RW1pdHRlcjx7IGhleDogc3RyaW5nLCAkZXZlbnQ6IEV2ZW50fT4oKTtcbiAgQE91dHB1dCgpIG9uSG92ZXIgPSBuZXcgRXZlbnRFbWl0dGVyPHsgaGV4OiBzdHJpbmcsICRldmVudDogRXZlbnR9PigpO1xuICBkaXZTdHlsZXM6IHtba2V5OiBzdHJpbmddOiBzdHJpbmd9ID0ge307XG4gIGZvY3VzU3R5bGVzOiB7W2tleTogc3RyaW5nXTogc3RyaW5nfSA9IHt9O1xuICBpbkZvY3VzID0gZmFsc2U7XG5cbiAgbmdPbkluaXQoKSB7XG4gICAgdGhpcy5kaXZTdHlsZXMgPSB7XG4gICAgICBiYWNrZ3JvdW5kOiB0aGlzLmNvbG9yLFxuICAgICAgaGVpZ2h0OiAnMTAwJScsXG4gICAgICB3aWR0aDogJzEwMCUnLFxuICAgICAgY3Vyc29yOiAncG9pbnRlcicsXG4gICAgICBwb3NpdGlvbjogJ3JlbGF0aXZlJyxcbiAgICAgIG91dGxpbmU6ICdub25lJyxcbiAgICAgIC4uLnRoaXMuc3R5bGUsXG4gICAgfTtcbiAgICB0aGlzLmZvY3VzU3R5bGVzID0ge1xuICAgICAgLi4udGhpcy5kaXZTdHlsZXMsXG4gICAgICAuLi50aGlzLmZvY3VzU3R5bGUsXG4gICAgfTtcbiAgfVxuICBhY3RpdmVTdHlsZXMoKSB7XG4gICAgcmV0dXJuIHRoaXMuZm9jdXMgfHwgdGhpcy5pbkZvY3VzID8gdGhpcy5mb2N1c1N0eWxlcyA6IHRoaXMuZGl2U3R5bGVzO1xuICB9XG4gIGhhbmRsZUZvY3VzT3V0KCkge1xuICAgIHRoaXMuaW5Gb2N1cyA9IGZhbHNlO1xuICB9XG4gIGhhbmRsZUZvY3VzKCkge1xuICAgIHRoaXMuaW5Gb2N1cyA9IHRydWU7XG4gIH1cbiAgaGFuZGxlSG92ZXIoaGV4LCAkZXZlbnQpIHtcbiAgICB0aGlzLm9uSG92ZXIuZW1pdCh7IGhleCwgJGV2ZW50IH0pO1xuICB9XG4gIGhhbmRsZUNsaWNrKGhleCwgJGV2ZW50KSB7XG4gICAgdGhpcy5vbkNsaWNrLmVtaXQoeyBoZXgsICRldmVudCB9KTtcbiAgfVxufVxuXG5ATmdNb2R1bGUoe1xuICBkZWNsYXJhdGlvbnM6IFtTd2F0Y2hDb21wb25lbnRdLFxuICBleHBvcnRzOiBbU3dhdGNoQ29tcG9uZW50XSxcbiAgaW1wb3J0czogW0NvbW1vbk1vZHVsZSwgQ2hlY2tib2FyZE1vZHVsZV0sXG59KVxuZXhwb3J0IGNsYXNzIFN3YXRjaE1vZHVsZSB7fVxuIl19