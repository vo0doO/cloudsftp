/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { ChangeDetectionStrategy, Component, Input, } from '@angular/core';
export class PhotoshopPreviewsComponent {
    constructor() {
        this.currentColor = '';
        this.backgroundNew = '';
    }
    /**
     * @return {?}
     */
    ngOnChanges() {
        this.backgroundNew = `rgb(${this.rgb.r},${this.rgb.g}, ${this.rgb.b})`;
    }
}
PhotoshopPreviewsComponent.decorators = [
    { type: Component, args: [{
                selector: 'color-photoshop-previews',
                template: `
  <div>
    <div class="photoshop-label">new</div>
    <div class="photoshop-swatches">
      <div class="photoshop-new" [style.background]="backgroundNew"></div>
      <div class="photoshop-current" [style.background]="currentColor"></div>
    </div>
    <div class="photoshop-label">current</div>
  </div>
  `,
                changeDetection: ChangeDetectionStrategy.OnPush,
                preserveWhitespaces: false,
                styles: [`
  .photoshop-swatches {
    border: 1px solid #B3B3B3;
    border-bottom: 1px solid #F0F0F0;
    margin-bottom: 2px;
    margin-top: 1px;
  }
  .photoshop-new {
    height: 34px;
    box-shadow: inset 1px 0 0 #000, inset -1px 0 0 #000, inset 0 1px 0 #000;
  }
  .photoshop-current {
    height: 34px;
    box-shadow: inset 1px 0 0 #000, inset -1px 0 0 #000, inset 0 -1px 0 #000;
  }
  .photoshop-label {
    font-size: 14px;
    color: #000;
    text-align: center;
  }
  `]
            }] }
];
PhotoshopPreviewsComponent.propDecorators = {
    rgb: [{ type: Input }],
    currentColor: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    PhotoshopPreviewsComponent.prototype.rgb;
    /** @type {?} */
    PhotoshopPreviewsComponent.prototype.currentColor;
    /** @type {?} */
    PhotoshopPreviewsComponent.prototype.backgroundNew;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGhvdG9zaG9wLXByZXZpZXdzLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25neC1jb2xvci9waG90b3Nob3AvIiwic291cmNlcyI6WyJwaG90b3Nob3AtcHJldmlld3MuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQ0wsdUJBQXVCLEVBQ3ZCLFNBQVMsRUFDVCxLQUFLLEdBRU4sTUFBTSxlQUFlLENBQUM7QUF5Q3ZCLE1BQU0sT0FBTywwQkFBMEI7SUF0Q3ZDO1FBd0NXLGlCQUFZLEdBQUcsRUFBRSxDQUFDO1FBQzNCLGtCQUFhLEdBQUcsRUFBRSxDQUFDO0lBS3JCLENBQUM7Ozs7SUFIQyxXQUFXO1FBQ1QsSUFBSSxDQUFDLGFBQWEsR0FBRyxPQUFPLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUM7SUFDekUsQ0FBQzs7O1lBN0NGLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUsMEJBQTBCO2dCQUNwQyxRQUFRLEVBQUU7Ozs7Ozs7OztHQVNUO2dCQXdCRCxlQUFlLEVBQUUsdUJBQXVCLENBQUMsTUFBTTtnQkFDL0MsbUJBQW1CLEVBQUUsS0FBSzt5QkF2QnhCOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztHQW9CRDthQUlGOzs7a0JBRUUsS0FBSzsyQkFDTCxLQUFLOzs7O0lBRE4seUNBQWtCOztJQUNsQixrREFBMkI7O0lBQzNCLG1EQUFtQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIENoYW5nZURldGVjdGlvblN0cmF0ZWd5LFxuICBDb21wb25lbnQsXG4gIElucHV0LFxuICBPbkNoYW5nZXMsXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgUkdCIH0gZnJvbSAnbmd4LWNvbG9yJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnY29sb3ItcGhvdG9zaG9wLXByZXZpZXdzJyxcbiAgdGVtcGxhdGU6IGBcbiAgPGRpdj5cbiAgICA8ZGl2IGNsYXNzPVwicGhvdG9zaG9wLWxhYmVsXCI+bmV3PC9kaXY+XG4gICAgPGRpdiBjbGFzcz1cInBob3Rvc2hvcC1zd2F0Y2hlc1wiPlxuICAgICAgPGRpdiBjbGFzcz1cInBob3Rvc2hvcC1uZXdcIiBbc3R5bGUuYmFja2dyb3VuZF09XCJiYWNrZ3JvdW5kTmV3XCI+PC9kaXY+XG4gICAgICA8ZGl2IGNsYXNzPVwicGhvdG9zaG9wLWN1cnJlbnRcIiBbc3R5bGUuYmFja2dyb3VuZF09XCJjdXJyZW50Q29sb3JcIj48L2Rpdj5cbiAgICA8L2Rpdj5cbiAgICA8ZGl2IGNsYXNzPVwicGhvdG9zaG9wLWxhYmVsXCI+Y3VycmVudDwvZGl2PlxuICA8L2Rpdj5cbiAgYCxcbiAgc3R5bGVzOiBbXG4gICAgYFxuICAucGhvdG9zaG9wLXN3YXRjaGVzIHtcbiAgICBib3JkZXI6IDFweCBzb2xpZCAjQjNCM0IzO1xuICAgIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCAjRjBGMEYwO1xuICAgIG1hcmdpbi1ib3R0b206IDJweDtcbiAgICBtYXJnaW4tdG9wOiAxcHg7XG4gIH1cbiAgLnBob3Rvc2hvcC1uZXcge1xuICAgIGhlaWdodDogMzRweDtcbiAgICBib3gtc2hhZG93OiBpbnNldCAxcHggMCAwICMwMDAsIGluc2V0IC0xcHggMCAwICMwMDAsIGluc2V0IDAgMXB4IDAgIzAwMDtcbiAgfVxuICAucGhvdG9zaG9wLWN1cnJlbnQge1xuICAgIGhlaWdodDogMzRweDtcbiAgICBib3gtc2hhZG93OiBpbnNldCAxcHggMCAwICMwMDAsIGluc2V0IC0xcHggMCAwICMwMDAsIGluc2V0IDAgLTFweCAwICMwMDA7XG4gIH1cbiAgLnBob3Rvc2hvcC1sYWJlbCB7XG4gICAgZm9udC1zaXplOiAxNHB4O1xuICAgIGNvbG9yOiAjMDAwO1xuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgfVxuICBgLFxuICBdLFxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcbiAgcHJlc2VydmVXaGl0ZXNwYWNlczogZmFsc2UsXG59KVxuZXhwb3J0IGNsYXNzIFBob3Rvc2hvcFByZXZpZXdzQ29tcG9uZW50IGltcGxlbWVudHMgT25DaGFuZ2VzIHtcbiAgQElucHV0KCkgcmdiOiBSR0I7XG4gIEBJbnB1dCgpIGN1cnJlbnRDb2xvciA9ICcnO1xuICBiYWNrZ3JvdW5kTmV3ID0gJyc7XG5cbiAgbmdPbkNoYW5nZXMoKSB7XG4gICAgdGhpcy5iYWNrZ3JvdW5kTmV3ID0gYHJnYigke3RoaXMucmdiLnJ9LCR7dGhpcy5yZ2IuZ30sICR7dGhpcy5yZ2IuYn0pYDtcbiAgfVxufVxuIl19