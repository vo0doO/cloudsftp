(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('ngx-color'), require('@angular/common')) :
    typeof define === 'function' && define.amd ? define('ngx-color/photoshop', ['exports', '@angular/core', 'ngx-color', '@angular/common'], factory) :
    (factory((global['ngx-color'] = global['ngx-color'] || {}, global['ngx-color'].photoshop = {}),global.ng.core,global['ngx-color'],global.ng.common));
}(this, (function (exports,core,ngxColor,common) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b)
                if (b.hasOwnProperty(p))
                    d[p] = b[p]; };
        return extendStatics(d, b);
    };
    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var PhotoshopButtonComponent = /** @class */ (function () {
        function PhotoshopButtonComponent() {
            this.label = '';
            this.active = false;
            this.click = new core.EventEmitter();
        }
        PhotoshopButtonComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'color-photoshop-button',
                        template: "\n    <div class=\"photoshop-button\"  [class.active]=\"active\"\n      (click)=\"click.emit($event)\"\n    >\n      {{ label }}\n    </div>\n  ",
                        changeDetection: core.ChangeDetectionStrategy.OnPush,
                        preserveWhitespaces: false,
                        styles: ["\n    .photoshop-button {\n      background-image: linear-gradient(\n        -180deg,\n        rgb(255, 255, 255) 0%,\n        rgb(230, 230, 230) 100%\n      );\n      border: 1px solid rgb(135, 135, 135);\n      border-radius: 2px;\n      height: 22px;\n      box-shadow: rgb(234, 234, 234) 0px 1px 0px 0px;\n      font-size: 14px;\n      color: rgb(0, 0, 0);\n      line-height: 20px;\n      text-align: center;\n      margin-bottom: 10px;\n      cursor: pointer;\n    }\n    .photoshop-button.active {\n      box-shadow: 0 0 0 1px #878787;\n    }\n  "]
                    }] }
        ];
        PhotoshopButtonComponent.propDecorators = {
            label: [{ type: core.Input }],
            active: [{ type: core.Input }],
            click: [{ type: core.Output }]
        };
        return PhotoshopButtonComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var PhotoshopFieldsComponent = /** @class */ (function () {
        function PhotoshopFieldsComponent() {
            this.onChange = new core.EventEmitter();
            this.RGBinput = {
                marginLeft: '35%',
                width: '40%',
                height: '22px',
                border: '1px solid rgb(136, 136, 136)',
                boxShadow: 'rgba(0, 0, 0, 0.1) 0px 1px 1px inset, rgb(236, 236, 236) 0px 1px 0px 0px',
                marginBottom: '2px',
                fontSize: '13px',
                paddingLeft: '3px',
                marginRight: '10px',
            };
            this.RGBwrap = {
                position: 'relative',
            };
            this.RGBlabel = {
                left: '0px',
                width: '34px',
                textTransform: 'uppercase',
                fontSize: '13px',
                height: '24px',
                lineHeight: '24px',
                position: 'absolute',
            };
            this.HEXinput = {
                marginLeft: '20%',
                width: '80%',
                height: '22px',
                border: '1px solid #888888',
                boxShadow: 'inset 0 1px 1px rgba(0,0,0,.1), 0 1px 0 0 #ECECEC',
                marginBottom: '3px',
                fontSize: '13px',
                paddingLeft: '3px',
            };
            this.HEXwrap = {
                position: 'relative',
            };
            this.HEXlabel = {
                position: 'absolute',
                top: '0px',
                left: '0px',
                width: '14px',
                textTransform: 'uppercase',
                fontSize: '13px',
                height: '24px',
                lineHeight: '24px',
            };
        }
        /**
         * @param {?} v
         * @return {?}
         */
        PhotoshopFieldsComponent.prototype.round = /**
         * @param {?} v
         * @return {?}
         */
            function (v) {
                return Math.round(v);
            };
        /**
         * @param {?} __0
         * @return {?}
         */
        PhotoshopFieldsComponent.prototype.handleValueChange = /**
         * @param {?} __0
         * @return {?}
         */
            function (_a) {
                var data = _a.data, $event = _a.$event;
                if (data['#']) {
                    if (ngxColor.isValidHex(data['#'])) {
                        this.onChange.emit({
                            data: {
                                hex: data['#'],
                                source: 'hex',
                            },
                            $event: $event,
                        });
                    }
                }
                else if (data.r || data.g || data.b) {
                    this.onChange.emit({
                        data: {
                            r: data.r || this.rgb.r,
                            g: data.g || this.rgb.g,
                            b: data.b || this.rgb.b,
                            source: 'rgb',
                        },
                        $event: $event,
                    });
                }
                else if (data.h || data.s || data.v) {
                    this.onChange.emit({
                        data: {
                            h: data.h || this.hsv.h,
                            s: data.s || this.hsv.s,
                            v: data.v || this.hsv.v,
                            source: 'hsv',
                        },
                        $event: $event,
                    });
                }
            };
        PhotoshopFieldsComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'color-photoshop-fields',
                        template: "\n  <div class=\"photoshop-fields\">\n    <color-editable-input\n      [value]=\"round(hsv.h)\"\n      label=\"h\"\n      (onChange)=\"handleValueChange($event)\"\n      [style]=\"{input: RGBinput, wrap: RGBwrap, label: RGBlabel}\"\n    ></color-editable-input>\n    <color-editable-input\n      [value]=\"round(hsv.s * 100)\"\n      label=\"s\"\n      (onChange)=\"handleValueChange($event)\"\n      [style]=\"{input: RGBinput, wrap: RGBwrap, label: RGBlabel}\"\n    ></color-editable-input>\n    <color-editable-input\n      [value]=\"round(hsv.v * 100)\"\n      label=\"v\"\n      (onChange)=\"handleValueChange($event)\"\n      [style]=\"{input: RGBinput, wrap: RGBwrap, label: RGBlabel}\"\n    ></color-editable-input>\n    <div class=\"photoshop-divider\"></div>\n    <color-editable-input\n      [value]=\"rgb.r\"\n      label=\"r\"\n      (onChange)=\"handleValueChange($event)\"\n      [style]=\"{input: RGBinput, wrap: RGBwrap, label: RGBlabel}\"\n    ></color-editable-input>\n    <color-editable-input\n      [value]=\"rgb.g\"\n      label=\"g\"\n      (onChange)=\"handleValueChange($event)\"\n      [style]=\"{input: RGBinput, wrap: RGBwrap, label: RGBlabel}\"\n    ></color-editable-input>\n    <color-editable-input\n      [value]=\"rgb.b\"\n      label=\"b\"\n      (onChange)=\"handleValueChange($event)\"\n      [style]=\"{input: RGBinput, wrap: RGBwrap, label: RGBlabel}\"\n    ></color-editable-input>\n    <div class=\"photoshop-divider\"></div>\n    <color-editable-input\n      [value]=\"hex.replace('#', '')\"\n      label=\"#\"\n      (onChange)=\"handleValueChange($event)\"\n      [style]=\"{input: HEXinput, wrap: HEXwrap, label: HEXlabel}\"\n    ></color-editable-input>\n    <div class=\"photoshop-field-symbols\">\n      <div class=\"photoshop-symbol\">\u00B0</div>\n      <div class=\"photoshop-symbol\">%</div>\n      <div class=\"photoshop-symbol\">%</div>\n    </div>\n  </div>\n  ",
                        changeDetection: core.ChangeDetectionStrategy.OnPush,
                        preserveWhitespaces: false,
                        styles: ["\n    .photoshop-fields {\n      padding-top: 5px;\n      padding-bottom: 9px;\n      width: 85px;\n      position: relative;\n    }\n    .photoshop-field-symbols {\n      position: absolute;\n      top: 5px;\n      right: -7px;\n      font-size: 13px;\n    }\n    .photoshop-symbol {\n      height: 24px;\n      line-height: 24px;\n      padding-bottom: 7px;\n    }\n    .photoshop-divider {\n      height: 5px;\n    }\n  "]
                    }] }
        ];
        PhotoshopFieldsComponent.propDecorators = {
            rgb: [{ type: core.Input }],
            hsv: [{ type: core.Input }],
            hex: [{ type: core.Input }],
            onChange: [{ type: core.Output }]
        };
        return PhotoshopFieldsComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var PhotoshopPreviewsComponent = /** @class */ (function () {
        function PhotoshopPreviewsComponent() {
            this.currentColor = '';
            this.backgroundNew = '';
        }
        /**
         * @return {?}
         */
        PhotoshopPreviewsComponent.prototype.ngOnChanges = /**
         * @return {?}
         */
            function () {
                this.backgroundNew = "rgb(" + this.rgb.r + "," + this.rgb.g + ", " + this.rgb.b + ")";
            };
        PhotoshopPreviewsComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'color-photoshop-previews',
                        template: "\n  <div>\n    <div class=\"photoshop-label\">new</div>\n    <div class=\"photoshop-swatches\">\n      <div class=\"photoshop-new\" [style.background]=\"backgroundNew\"></div>\n      <div class=\"photoshop-current\" [style.background]=\"currentColor\"></div>\n    </div>\n    <div class=\"photoshop-label\">current</div>\n  </div>\n  ",
                        changeDetection: core.ChangeDetectionStrategy.OnPush,
                        preserveWhitespaces: false,
                        styles: ["\n  .photoshop-swatches {\n    border: 1px solid #B3B3B3;\n    border-bottom: 1px solid #F0F0F0;\n    margin-bottom: 2px;\n    margin-top: 1px;\n  }\n  .photoshop-new {\n    height: 34px;\n    box-shadow: inset 1px 0 0 #000, inset -1px 0 0 #000, inset 0 1px 0 #000;\n  }\n  .photoshop-current {\n    height: 34px;\n    box-shadow: inset 1px 0 0 #000, inset -1px 0 0 #000, inset 0 -1px 0 #000;\n  }\n  .photoshop-label {\n    font-size: 14px;\n    color: #000;\n    text-align: center;\n  }\n  "]
                    }] }
        ];
        PhotoshopPreviewsComponent.propDecorators = {
            rgb: [{ type: core.Input }],
            currentColor: [{ type: core.Input }]
        };
        return PhotoshopPreviewsComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var PhotoshopComponent = /** @class */ (function (_super) {
        __extends(PhotoshopComponent, _super);
        function PhotoshopComponent() {
            var _this = _super.call(this) || this;
            /**
             * Title text
             */
            _this.header = 'Color Picker';
            _this.onAccept = new core.EventEmitter();
            _this.onCancel = new core.EventEmitter();
            _this.circle = {
                width: '12px',
                height: '12px',
                borderRadius: '6px',
                boxShadow: 'rgb(255, 255, 255) 0px 0px 0px 1px inset',
                transform: 'translate(-6px, -10px)',
            };
            return _this;
        }
        /**
         * @param {?} __0
         * @return {?}
         */
        PhotoshopComponent.prototype.handleValueChange = /**
         * @param {?} __0
         * @return {?}
         */
            function (_a) {
                var data = _a.data, $event = _a.$event;
                this.handleChange(data, $event);
            };
        PhotoshopComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'color-photoshop',
                        template: "\n  <div class=\"photoshop-picker {{ className }}\">\n    <div class=\"photoshop-head\">{{ header }}</div>\n    <div class=\"photoshop-body\">\n      <div class=\"photoshop-saturation\">\n        <color-saturation\n          [hsl]=\"hsl\" [hsv]=\"hsv\" [circle]=\"circle\"\n          (onChange)=\"handleValueChange($event)\"\n        ></color-saturation>\n      </div>\n      <div class=\"photoshop-hue\">\n        <color-hue direction=\"vertical\"\n          [hsl]=\"hsl\" [hidePointer]=\"true\"\n          (onChange)=\"handleValueChange($event)\"\n        ></color-hue>\n      </div>\n      <div class=\"photoshop-controls\">\n        <div class=\"photoshop-top\">\n          <div class=\"photoshop-previews\">\n            <color-photoshop-previews\n              [rgb]=\"rgb\" [currentColor]=\"currentColor\"\n            ></color-photoshop-previews>\n          </div>\n          <div class=\"photoshop-actions\">\n            <color-photoshop-button label=\"OK\"\n              [active]=\"true\" (click)=\"onAccept.emit($event)\"\n            ></color-photoshop-button>\n            <color-photoshop-button label=\"Cancel\"\n              (click)=\"onCancel.emit($event)\"\n            >\n            </color-photoshop-button>\n            <color-photoshop-fields\n              [rgb]=\"rgb\" [hex]=\"hex\" [hsv]=\"hsv\"\n              (onChange)=\"handleValueChange($event)\"\n            ></color-photoshop-fields>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n  ",
                        changeDetection: core.ChangeDetectionStrategy.OnPush,
                        preserveWhitespaces: false,
                        styles: ["\n    .photoshop-picker {\n      background: rgb(220, 220, 220);\n      border-radius: 4px;\n      box-shadow: rgba(0, 0, 0, 0.25) 0px 0px 0px 1px, rgba(0, 0, 0, 0.15) 0px 8px 16px;\n      box-sizing: initial; width: 513px;\n    }\n    .photoshop-head {\n      background-image: linear-gradient(\n        -180deg,\n        rgb(240, 240, 240) 0%,\n        rgb(212, 212, 212) 100%\n      );\n      border-bottom: 1px solid rgb(177, 177, 177);\n      box-shadow: rgba(255, 255, 255, 0.2) 0px 1px 0px 0px inset,\n        rgba(0, 0, 0, 0.02) 0px -1px 0px 0px inset;\n      height: 23px;\n      line-height: 24px;\n      border-radius: 4px 4px 0px 0px;\n      font-size: 13px;\n      color: rgb(77, 77, 77);\n      text-align: center;\n    }\n    .photoshop-body {\n      padding: 15px 15px 0px;\n      display: flex;\n    }\n    .photoshop-saturation {\n      width: 256px;\n      height: 256px;\n      position: relative;\n      border-width: 2px;\n      border-style: solid;\n      border-color: rgb(179, 179, 179) rgb(179, 179, 179) rgb(240, 240, 240);\n      border-image: initial;\n      overflow: hidden;\n    }\n    .photoshop-hue {\n      position: relative;\n      height: 256px;\n      width: 23px;\n      margin-left: 10px;\n      border-width: 2px;\n      border-style: solid;\n      border-color: rgb(179, 179, 179) rgb(179, 179, 179) rgb(240, 240, 240);\n      border-image: initial;\n    }\n    .photoshop-controls {\n      width: 180px;\n      margin-left: 10px;\n    }\n    .photoshop-top {\n      display: flex;\n    }\n    .photoshop-previews {\n      width: 60px;\n    }\n    .photoshop-actions {\n      -webkit-box-flex: 1;\n      flex: 1 1 0%;\n      margin-left: 20px;\n    }\n  "]
                    }] }
        ];
        /** @nocollapse */
        PhotoshopComponent.ctorParameters = function () { return []; };
        PhotoshopComponent.propDecorators = {
            header: [{ type: core.Input }],
            onAccept: [{ type: core.Output }],
            onCancel: [{ type: core.Output }]
        };
        return PhotoshopComponent;
    }(ngxColor.ColorWrap));
    var ColorPhotoshopModule = /** @class */ (function () {
        function ColorPhotoshopModule() {
        }
        ColorPhotoshopModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [
                            PhotoshopComponent,
                            PhotoshopPreviewsComponent,
                            PhotoshopButtonComponent,
                            PhotoshopFieldsComponent,
                        ],
                        exports: [
                            PhotoshopComponent,
                            PhotoshopPreviewsComponent,
                            PhotoshopButtonComponent,
                            PhotoshopFieldsComponent,
                        ],
                        imports: [
                            common.CommonModule,
                            ngxColor.EditableInputModule,
                            ngxColor.HueModule,
                            ngxColor.AlphaModule,
                            ngxColor.SwatchModule,
                            ngxColor.SaturationModule,
                        ],
                    },] }
        ];
        return ColorPhotoshopModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */

    exports.PhotoshopComponent = PhotoshopComponent;
    exports.ColorPhotoshopModule = ColorPhotoshopModule;
    exports.ɵb = PhotoshopButtonComponent;
    exports.ɵc = PhotoshopFieldsComponent;
    exports.ɵa = PhotoshopPreviewsComponent;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,