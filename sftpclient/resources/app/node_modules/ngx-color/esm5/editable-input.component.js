/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { CommonModule } from '@angular/common';
import { ChangeDetectionStrategy, Component, EventEmitter, Input, NgModule, Output, } from '@angular/core';
import { fromEvent } from 'rxjs';
var EditableInputComponent = /** @class */ (function () {
    function EditableInputComponent() {
        this.placeholder = '';
        this.onChange = new EventEmitter();
        this.focus = false;
    }
    /**
     * @return {?}
     */
    EditableInputComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.wrapStyle = this.style && this.style.wrap ? this.style.wrap : {};
        this.inputStyle = this.style && this.style.input ? this.style.input : {};
        this.labelStyle = this.style && this.style.label ? this.style.label : {};
        if (this.dragLabel) {
            this.labelStyle.cursor = 'ew-resize';
        }
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    EditableInputComponent.prototype.handleFocus = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        this.focus = true;
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    EditableInputComponent.prototype.handleFocusOut = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        this.focus = false;
        this.currentValue = this.blurValue;
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    EditableInputComponent.prototype.handleKeydown = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        var _a, _b;
        // In case `e.target.value` is a percentage remove the `%` character
        // and update accordingly with a percentage
        // https://github.com/casesandberg/react-color/issues/383
        /** @type {?} */
        var stringValue = String($event.target.value);
        /** @type {?} */
        var isPercentage = stringValue.indexOf('%') > -1;
        /** @type {?} */
        var number = Number(stringValue.replace(/%/g, ''));
        if (!isNaN(number)) {
            /** @type {?} */
            var amount = this.arrowOffset || 1;
            // Up
            if ($event.keyCode === 38) {
                if (this.label) {
                    this.onChange.emit({
                        data: (_a = {}, _a[this.label] = number + amount, _a),
                        $event: $event,
                    });
                }
                else {
                    this.onChange.emit({ data: number + amount, $event: $event });
                }
                if (isPercentage) {
                    this.currentValue = number + amount + "%";
                }
                else {
                    this.currentValue = number + amount;
                }
            }
            // Down
            if ($event.keyCode === 40) {
                if (this.label) {
                    this.onChange.emit({
                        data: (_b = {}, _b[this.label] = number - amount, _b),
                        $event: $event,
                    });
                }
                else {
                    this.onChange.emit({ data: number - amount, $event: $event });
                }
                if (isPercentage) {
                    this.currentValue = number - amount + "%";
                }
                else {
                    this.currentValue = number - amount;
                }
            }
        }
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    EditableInputComponent.prototype.handleKeyup = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        var _a;
        if ($event.keyCode === 40 || $event.keyCode === 38) {
            return;
        }
        if (this.label) {
            this.onChange.emit({
                data: (_a = {}, _a[this.label] = $event.target.value, _a),
                $event: $event,
            });
        }
        else {
            this.onChange.emit({ data: $event.target.value, $event: $event });
        }
    };
    /**
     * @return {?}
     */
    EditableInputComponent.prototype.ngOnChanges = /**
     * @return {?}
     */
    function () {
        if (!this.focus) {
            this.currentValue = String(this.value).toUpperCase();
            this.blurValue = String(this.value).toUpperCase();
        }
        else {
            this.blurValue = String(this.value).toUpperCase();
        }
    };
    /**
     * @return {?}
     */
    EditableInputComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.unsubscribe();
    };
    /**
     * @return {?}
     */
    EditableInputComponent.prototype.subscribe = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.mousemove = fromEvent(document, 'mousemove').subscribe(function (ev) {
            return _this.handleDrag(ev);
        });
        this.mouseup = fromEvent(document, 'mouseup').subscribe(function () {
            return _this.unsubscribe();
        });
    };
    /**
     * @return {?}
     */
    EditableInputComponent.prototype.unsubscribe = /**
     * @return {?}
     */
    function () {
        if (this.mousemove) {
            this.mousemove.unsubscribe();
        }
        if (this.mouseup) {
            this.mouseup.unsubscribe();
        }
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    EditableInputComponent.prototype.handleMousedown = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        if (this.dragLabel) {
            $event.preventDefault();
            this.handleDrag($event);
            this.subscribe();
        }
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    EditableInputComponent.prototype.handleDrag = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        var _a;
        if (this.dragLabel) {
            /** @type {?} */
            var newValue = Math.round(this.value + $event.movementX);
            if (newValue >= 0 && newValue <= this.dragMax) {
                this.onChange.emit({ data: (_a = {}, _a[this.label] = newValue, _a), $event: $event });
            }
        }
    };
    EditableInputComponent.decorators = [
        { type: Component, args: [{
                    selector: 'color-editable-input',
                    template: "\n  <div class=\"wrap\" [ngStyle]=\"wrapStyle\">\n    <input [ngStyle]=\"inputStyle\" spellCheck=\"false\"\n      [value]=\"currentValue\" [placeholder]=\"placeholder\"\n      (keydown)=\"handleKeydown($event)\" (keyup)=\"handleKeyup($event)\"\n      (focus)=\"handleFocus($event)\" (focusout)=\"handleFocusOut($event)\" />\n    <span *ngIf=\"label\" [ngStyle]=\"labelStyle\" (mousedown)=\"handleMousedown($event)\">\n      {{ label }}\n    </span>\n  </div>\n  ",
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    styles: ["\n    :host {\n      display: flex;\n    }\n    .wrap {\n      position: relative;\n    }\n  "]
                }] }
    ];
    EditableInputComponent.propDecorators = {
        style: [{ type: Input }],
        label: [{ type: Input }],
        value: [{ type: Input }],
        arrowOffset: [{ type: Input }],
        dragLabel: [{ type: Input }],
        dragMax: [{ type: Input }],
        placeholder: [{ type: Input }],
        onChange: [{ type: Output }]
    };
    return EditableInputComponent;
}());
export { EditableInputComponent };
if (false) {
    /** @type {?} */
    EditableInputComponent.prototype.style;
    /** @type {?} */
    EditableInputComponent.prototype.label;
    /** @type {?} */
    EditableInputComponent.prototype.value;
    /** @type {?} */
    EditableInputComponent.prototype.arrowOffset;
    /** @type {?} */
    EditableInputComponent.prototype.dragLabel;
    /** @type {?} */
    EditableInputComponent.prototype.dragMax;
    /** @type {?} */
    EditableInputComponent.prototype.placeholder;
    /** @type {?} */
    EditableInputComponent.prototype.onChange;
    /** @type {?} */
    EditableInputComponent.prototype.currentValue;
    /** @type {?} */
    EditableInputComponent.prototype.blurValue;
    /** @type {?} */
    EditableInputComponent.prototype.wrapStyle;
    /** @type {?} */
    EditableInputComponent.prototype.inputStyle;
    /** @type {?} */
    EditableInputComponent.prototype.labelStyle;
    /** @type {?} */
    EditableInputComponent.prototype.focus;
    /** @type {?} */
    EditableInputComponent.prototype.mousemove;
    /** @type {?} */
    EditableInputComponent.prototype.mouseup;
}
var EditableInputModule = /** @class */ (function () {
    function EditableInputModule() {
    }
    EditableInputModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [EditableInputComponent],
                    exports: [EditableInputComponent],
                    imports: [CommonModule],
                },] }
    ];
    return EditableInputModule;
}());
export { EditableInputModule };
//# sourceMappingURL=data:application/json;base64,