/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { CommonModule } from '@angular/common';
import { ChangeDetectionStrategy, Component, EventEmitter, Input, NgModule, Output, } from '@angular/core';
import { CheckboardModule } from './checkboard.component';
import { CoordinatesModule } from './coordinates.directive';
var AlphaComponent = /** @class */ (function () {
    function AlphaComponent() {
        this.direction = 'horizontal';
        this.onChange = new EventEmitter();
    }
    /**
     * @return {?}
     */
    AlphaComponent.prototype.ngOnChanges = /**
     * @return {?}
     */
    function () {
        if (this.direction === 'vertical') {
            this.pointerLeft = 0;
            this.pointerTop = this.rgb.a * 100;
            this.gradient = {
                background: "linear-gradient(to bottom, rgba(" + this.rgb.r + "," + this.rgb.g + "," + this.rgb.b + ", 0) 0%,\n          rgba(" + this.rgb.r + "," + this.rgb.g + "," + this.rgb.b + ", 1) 100%)",
            };
        }
        else {
            this.gradient = {
                background: "linear-gradient(to right, rgba(" + this.rgb.r + "," + this.rgb.g + "," + this.rgb.b + ", 0) 0%,\n          rgba(" + this.rgb.r + "," + this.rgb.g + "," + this.rgb.b + ", 1) 100%)",
            };
            this.pointerLeft = this.rgb.a * 100;
        }
    };
    /**
     * @param {?} __0
     * @return {?}
     */
    AlphaComponent.prototype.handleChange = /**
     * @param {?} __0
     * @return {?}
     */
    function (_a) {
        var top = _a.top, left = _a.left, containerHeight = _a.containerHeight, containerWidth = _a.containerWidth, $event = _a.$event;
        /** @type {?} */
        var data;
        if (this.direction === 'vertical') {
            /** @type {?} */
            var a = void 0;
            if (top < 0) {
                a = 0;
            }
            else if (top > containerHeight) {
                a = 1;
            }
            else {
                a = Math.round(top * 100 / containerHeight) / 100;
            }
            if (this.hsl.a !== a) {
                data = {
                    h: this.hsl.h,
                    s: this.hsl.s,
                    l: this.hsl.l,
                    a: a,
                    source: 'rgb',
                };
            }
        }
        else {
            /** @type {?} */
            var a = void 0;
            if (left < 0) {
                a = 0;
            }
            else if (left > containerWidth) {
                a = 1;
            }
            else {
                a = Math.round(left * 100 / containerWidth) / 100;
            }
            if (this.hsl.a !== a) {
                data = {
                    h: this.hsl.h,
                    s: this.hsl.s,
                    l: this.hsl.l,
                    a: a,
                    source: 'rgb',
                };
            }
        }
        if (!data) {
            return null;
        }
        this.onChange.emit({ data: data, $event: $event });
    };
    AlphaComponent.decorators = [
        { type: Component, args: [{
                    selector: 'color-alpha',
                    template: "\n  <div class=\"alpha\" [style.border-radius]=\"radius\">\n    <div class=\"alpha-checkboard\">\n      <color-checkboard></color-checkboard>\n    </div>\n    <div class=\"alpha-gradient\" [ngStyle]=\"gradient\" [style.box-shadow]=\"shadow\" [style.border-radius]=\"radius\"></div>\n    <div ngx-color-coordinates (coordinatesChange)=\"handleChange($event)\" class=\"alpha-container color-alpha-{{direction}}\">\n      <div class=\"alpha-pointer\" [style.left.%]=\"pointerLeft\" [style.top.%]=\"pointerTop\">\n        <div class=\"alpha-slider\" [ngStyle]=\"pointer\"></div>\n      </div>\n    </div>\n  </div>\n  ",
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    preserveWhitespaces: false,
                    styles: ["\n    .alpha {\n      position: absolute;\n      top: 0;\n      bottom: 0;\n      left: 0;\n      right: 0;\n    }\n    .alpha-checkboard {\n      position: absolute;\n      top: 0;\n      bottom: 0;\n      left: 0;\n      right: 0;\n      overflow: hidden;\n    }\n    .alpha-gradient {\n      position: absolute;\n      top: 0;\n      bottom: 0;\n      left: 0;\n      right: 0;\n    }\n    .alpha-container {\n      position: relative;\n      height: 100%;\n      margin: 0 3px;\n    }\n    .alpha-pointer {\n      position: absolute;\n    }\n    .alpha-slider {\n      width: 4px;\n      border-radius: 1px;\n      height: 8px;\n      box-shadow: 0 0 2px rgba(0, 0, 0, .6);\n      background: #fff;\n      margin-top: 1px;\n      transform: translateX(-2px);\n    },\n  "]
                }] }
    ];
    AlphaComponent.propDecorators = {
        hsl: [{ type: Input }],
        rgb: [{ type: Input }],
        pointer: [{ type: Input }],
        shadow: [{ type: Input }],
        radius: [{ type: Input }],
        direction: [{ type: Input }],
        onChange: [{ type: Output }]
    };
    return AlphaComponent;
}());
export { AlphaComponent };
if (false) {
    /** @type {?} */
    AlphaComponent.prototype.hsl;
    /** @type {?} */
    AlphaComponent.prototype.rgb;
    /** @type {?} */
    AlphaComponent.prototype.pointer;
    /** @type {?} */
    AlphaComponent.prototype.shadow;
    /** @type {?} */
    AlphaComponent.prototype.radius;
    /** @type {?} */
    AlphaComponent.prototype.direction;
    /** @type {?} */
    AlphaComponent.prototype.onChange;
    /** @type {?} */
    AlphaComponent.prototype.gradient;
    /** @type {?} */
    AlphaComponent.prototype.pointerLeft;
    /** @type {?} */
    AlphaComponent.prototype.pointerTop;
}
var AlphaModule = /** @class */ (function () {
    function AlphaModule() {
    }
    AlphaModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [AlphaComponent],
                    exports: [AlphaComponent],
                    imports: [CommonModule, CheckboardModule, CoordinatesModule],
                },] }
    ];
    return AlphaModule;
}());
export { AlphaModule };
//# sourceMappingURL=data:application/json;base64,