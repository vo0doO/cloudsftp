/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import * as _tinycolor from 'tinycolor2';
/** @type {?} */
var tinycolor = _tinycolor;
/**
 * @param {?} data
 * @return {?}
 */
export function simpleCheckForValidColor(data) {
    /** @type {?} */
    var keysToCheck = ['r', 'g', 'b', 'a', 'h', 's', 'l', 'v'];
    /** @type {?} */
    var checked = 0;
    /** @type {?} */
    var passed = 0;
    keysToCheck.forEach(function (letter) {
        if (!data[letter]) {
            return;
        }
        checked += 1;
        if (!isNaN(data[letter])) {
            passed += 1;
        }
        if (letter === 's' || letter === 'l') {
            /** @type {?} */
            var percentPatt = /^\d+%$/;
            if (percentPatt.test(data[letter])) {
                passed += 1;
            }
        }
    });
    return checked === passed ? data : false;
}
/**
 * @param {?} data
 * @param {?=} oldHue
 * @return {?}
 */
export function toState(data, oldHue) {
    /** @type {?} */
    var color = data.hex ? tinycolor(data.hex) : tinycolor(data);
    /** @type {?} */
    var hsl = color.toHsl();
    /** @type {?} */
    var hsv = color.toHsv();
    /** @type {?} */
    var rgb = color.toRgb();
    /** @type {?} */
    var hex = color.toHex();
    if (hsl.s === 0) {
        hsl.h = oldHue || 0;
        hsv.h = oldHue || 0;
    }
    /** @type {?} */
    var transparent = hex === '000000' && rgb.a === 0;
    return {
        hsl: hsl,
        hex: transparent ? 'transparent' : "#" + hex,
        rgb: rgb,
        hsv: hsv,
        oldHue: data.h || oldHue || hsl.h,
        source: data.source,
    };
}
/**
 * @param {?} hex
 * @return {?}
 */
export function isValidHex(hex) {
    return tinycolor(hex).isValid();
}
/**
 * @param {?} data
 * @return {?}
 */
export function getContrastingColor(data) {
    if (!data) {
        return '#fff';
    }
    /** @type {?} */
    var col = toState(data);
    if (col.hex === 'transparent') {
        return 'rgba(0,0,0,0.4)';
    }
    /** @type {?} */
    var yiq = (col.rgb.r * 299 + col.rgb.g * 587 + col.rgb.b * 114) / 1000;
    return yiq >= 128 ? '#000' : '#fff';
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29sb3IuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtY29sb3IvIiwic291cmNlcyI6WyJoZWxwZXJzL2NvbG9yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEtBQUssVUFBVSxNQUFNLFlBQVksQ0FBQzs7SUFJbkMsU0FBUyxHQUFHLFVBQVU7Ozs7O0FBRTVCLE1BQU0sVUFBVSx3QkFBd0IsQ0FBQyxJQUFJOztRQUNyQyxXQUFXLEdBQUcsQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxDQUFDOztRQUN4RCxPQUFPLEdBQUcsQ0FBQzs7UUFDWCxNQUFNLEdBQUcsQ0FBQztJQUNkLFdBQVcsQ0FBQyxPQUFPLENBQUMsVUFBQSxNQUFNO1FBQ3hCLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEVBQUU7WUFDakIsT0FBTztTQUNSO1FBQ0QsT0FBTyxJQUFJLENBQUMsQ0FBQztRQUNiLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUU7WUFDeEIsTUFBTSxJQUFJLENBQUMsQ0FBQztTQUNiO1FBQ0QsSUFBSSxNQUFNLEtBQUssR0FBRyxJQUFJLE1BQU0sS0FBSyxHQUFHLEVBQUU7O2dCQUM5QixXQUFXLEdBQUcsUUFBUTtZQUM1QixJQUFJLFdBQVcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUU7Z0JBQ2xDLE1BQU0sSUFBSSxDQUFDLENBQUM7YUFDYjtTQUNGO0lBQ0gsQ0FBQyxDQUFDLENBQUM7SUFDSCxPQUFPLE9BQU8sS0FBSyxNQUFNLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDO0FBQzNDLENBQUM7Ozs7OztBQUVELE1BQU0sVUFBVSxPQUFPLENBQUMsSUFBSSxFQUFFLE1BQWU7O1FBQ3JDLEtBQUssR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDOztRQUN4RCxHQUFHLEdBQUcsS0FBSyxDQUFDLEtBQUssRUFBRTs7UUFDbkIsR0FBRyxHQUFHLEtBQUssQ0FBQyxLQUFLLEVBQUU7O1FBQ25CLEdBQUcsR0FBRyxLQUFLLENBQUMsS0FBSyxFQUFFOztRQUNuQixHQUFHLEdBQUcsS0FBSyxDQUFDLEtBQUssRUFBRTtJQUN6QixJQUFJLEdBQUcsQ0FBQyxDQUFDLEtBQUssQ0FBQyxFQUFFO1FBQ2YsR0FBRyxDQUFDLENBQUMsR0FBRyxNQUFNLElBQUksQ0FBQyxDQUFDO1FBQ3BCLEdBQUcsQ0FBQyxDQUFDLEdBQUcsTUFBTSxJQUFJLENBQUMsQ0FBQztLQUNyQjs7UUFDSyxXQUFXLEdBQUcsR0FBRyxLQUFLLFFBQVEsSUFBSSxHQUFHLENBQUMsQ0FBQyxLQUFLLENBQUM7SUFFbkQsT0FBTztRQUNMLEdBQUcsS0FBQTtRQUNILEdBQUcsRUFBRSxXQUFXLENBQUMsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsTUFBSSxHQUFLO1FBQzVDLEdBQUcsS0FBQTtRQUNILEdBQUcsS0FBQTtRQUNILE1BQU0sRUFBRSxJQUFJLENBQUMsQ0FBQyxJQUFJLE1BQU0sSUFBSSxHQUFHLENBQUMsQ0FBQztRQUNqQyxNQUFNLEVBQUUsSUFBSSxDQUFDLE1BQU07S0FDcEIsQ0FBQztBQUNKLENBQUM7Ozs7O0FBRUQsTUFBTSxVQUFVLFVBQVUsQ0FBQyxHQUFXO0lBQ3BDLE9BQU8sU0FBUyxDQUFDLEdBQUcsQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFDO0FBQ2xDLENBQUM7Ozs7O0FBRUQsTUFBTSxVQUFVLG1CQUFtQixDQUFDLElBQUk7SUFDdEMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULE9BQU8sTUFBTSxDQUFDO0tBQ2Y7O1FBQ0ssR0FBRyxHQUFHLE9BQU8sQ0FBQyxJQUFJLENBQUM7SUFDekIsSUFBSSxHQUFHLENBQUMsR0FBRyxLQUFLLGFBQWEsRUFBRTtRQUM3QixPQUFPLGlCQUFpQixDQUFDO0tBQzFCOztRQUNLLEdBQUcsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDLEdBQUcsSUFBSTtJQUN4RSxPQUFPLEdBQUcsSUFBSSxHQUFHLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDO0FBQ3RDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBfdGlueWNvbG9yIGZyb20gJ3Rpbnljb2xvcjInO1xuXG5pbXBvcnQgeyBDb2xvciB9IGZyb20gJy4vY29sb3IuaW50ZXJmYWNlcyc7XG5cbmNvbnN0IHRpbnljb2xvciA9IF90aW55Y29sb3I7XG5cbmV4cG9ydCBmdW5jdGlvbiBzaW1wbGVDaGVja0ZvclZhbGlkQ29sb3IoZGF0YSkge1xuICBjb25zdCBrZXlzVG9DaGVjayA9IFsncicsICdnJywgJ2InLCAnYScsICdoJywgJ3MnLCAnbCcsICd2J107XG4gIGxldCBjaGVja2VkID0gMDtcbiAgbGV0IHBhc3NlZCA9IDA7XG4gIGtleXNUb0NoZWNrLmZvckVhY2gobGV0dGVyID0+IHtcbiAgICBpZiAoIWRhdGFbbGV0dGVyXSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjaGVja2VkICs9IDE7XG4gICAgaWYgKCFpc05hTihkYXRhW2xldHRlcl0pKSB7XG4gICAgICBwYXNzZWQgKz0gMTtcbiAgICB9XG4gICAgaWYgKGxldHRlciA9PT0gJ3MnIHx8IGxldHRlciA9PT0gJ2wnKSB7XG4gICAgICBjb25zdCBwZXJjZW50UGF0dCA9IC9eXFxkKyUkLztcbiAgICAgIGlmIChwZXJjZW50UGF0dC50ZXN0KGRhdGFbbGV0dGVyXSkpIHtcbiAgICAgICAgcGFzc2VkICs9IDE7XG4gICAgICB9XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIGNoZWNrZWQgPT09IHBhc3NlZCA/IGRhdGEgOiBmYWxzZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHRvU3RhdGUoZGF0YSwgb2xkSHVlPzogbnVtYmVyKTogQ29sb3Ige1xuICBjb25zdCBjb2xvciA9IGRhdGEuaGV4ID8gdGlueWNvbG9yKGRhdGEuaGV4KSA6IHRpbnljb2xvcihkYXRhKTtcbiAgY29uc3QgaHNsID0gY29sb3IudG9Ic2woKTtcbiAgY29uc3QgaHN2ID0gY29sb3IudG9Ic3YoKTtcbiAgY29uc3QgcmdiID0gY29sb3IudG9SZ2IoKTtcbiAgY29uc3QgaGV4ID0gY29sb3IudG9IZXgoKTtcbiAgaWYgKGhzbC5zID09PSAwKSB7XG4gICAgaHNsLmggPSBvbGRIdWUgfHwgMDtcbiAgICBoc3YuaCA9IG9sZEh1ZSB8fCAwO1xuICB9XG4gIGNvbnN0IHRyYW5zcGFyZW50ID0gaGV4ID09PSAnMDAwMDAwJyAmJiByZ2IuYSA9PT0gMDtcblxuICByZXR1cm4ge1xuICAgIGhzbCxcbiAgICBoZXg6IHRyYW5zcGFyZW50ID8gJ3RyYW5zcGFyZW50JyA6IGAjJHtoZXh9YCxcbiAgICByZ2IsXG4gICAgaHN2LFxuICAgIG9sZEh1ZTogZGF0YS5oIHx8IG9sZEh1ZSB8fCBoc2wuaCxcbiAgICBzb3VyY2U6IGRhdGEuc291cmNlLFxuICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNWYWxpZEhleChoZXg6IHN0cmluZykge1xuICByZXR1cm4gdGlueWNvbG9yKGhleCkuaXNWYWxpZCgpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0Q29udHJhc3RpbmdDb2xvcihkYXRhKSB7XG4gIGlmICghZGF0YSkge1xuICAgIHJldHVybiAnI2ZmZic7XG4gIH1cbiAgY29uc3QgY29sID0gdG9TdGF0ZShkYXRhKTtcbiAgaWYgKGNvbC5oZXggPT09ICd0cmFuc3BhcmVudCcpIHtcbiAgICByZXR1cm4gJ3JnYmEoMCwwLDAsMC40KSc7XG4gIH1cbiAgY29uc3QgeWlxID0gKGNvbC5yZ2IuciAqIDI5OSArIGNvbC5yZ2IuZyAqIDU4NyArIGNvbC5yZ2IuYiAqIDExNCkgLyAxMDAwO1xuICByZXR1cm4geWlxID49IDEyOCA/ICcjMDAwJyA6ICcjZmZmJztcbn1cbiJdfQ==