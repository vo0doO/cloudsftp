(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('ngx-color'), require('@angular/common'), require('material-colors')) :
    typeof define === 'function' && define.amd ? define('ngx-color/swatches', ['exports', '@angular/core', 'ngx-color', '@angular/common', 'material-colors'], factory) :
    (factory((global['ngx-color'] = global['ngx-color'] || {}, global['ngx-color'].swatches = {}),global.ng.core,global['ngx-color'],global.ng.common,global['material-colors']));
}(this, (function (exports,core,ngxColor,common,materialColors) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b)
                if (b.hasOwnProperty(p))
                    d[p] = b[p]; };
        return extendStatics(d, b);
    };
    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var SwatchesColorComponent = /** @class */ (function () {
        function SwatchesColorComponent() {
            this.first = false;
            this.last = false;
            this.onClick = new core.EventEmitter();
            this.onSwatchHover = new core.EventEmitter();
            this.getContrastingColor = ngxColor.getContrastingColor;
            this.colorStyle = {
                width: '40px',
                height: '24px',
                cursor: 'pointer',
                marginBottom: '1px',
            };
            this.focusStyle = {};
        }
        /**
         * @return {?}
         */
        SwatchesColorComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.colorStyle.background = this.color;
                this.focusStyle.boxShadow = "0 0 4px " + this.color;
                if (this.first) {
                    this.colorStyle.borderRadius = '2px 2px 0 0';
                }
                if (this.last) {
                    this.colorStyle.borderRadius = '0 0 2px 2px';
                }
                if (this.color === '#FFFFFF') {
                    this.colorStyle.boxShadow = 'inset 0 0 0 1px #ddd';
                }
            };
        /**
         * @param {?} $event
         * @return {?}
         */
        SwatchesColorComponent.prototype.handleClick = /**
         * @param {?} $event
         * @return {?}
         */
            function ($event) {
                this.onClick.emit({
                    data: {
                        hex: this.color,
                        source: 'hex',
                    },
                    $event: $event,
                });
            };
        SwatchesColorComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'color-swatches-color',
                        template: "\n  <color-swatch [color]=\"color\" [style]=\"colorStyle\" [focusStyle]=\"focusStyle\"\n    [class.first]=\"first\" [class.last]=\"last\"\n    (click)=\"handleClick($event)\" (onHover)=\"onSwatchHover.emit($event)\">\n    <div class=\"swatch-check\" *ngIf=\"active\" [class.first]=\"first\" [class.last]=\"last\">\n      <svg style=\"width: 24px; height: 24px;\" viewBox=\"0 0 24 24\" [style.fill]=\"getContrastingColor(color)\">\n        <path d=\"M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z\" />\n      </svg>\n    </div>\n  </color-swatch>\n  ",
                        changeDetection: core.ChangeDetectionStrategy.OnPush,
                        preserveWhitespaces: false,
                        styles: ["\n    .swatches-group {\n      padding-bottom: 10px;\n      width: 40px;\n      float: left;\n      margin-right: 10px;\n    }\n    .swatch-check {\n      margin-left: 8px;\n    }\n  "]
                    }] }
        ];
        SwatchesColorComponent.propDecorators = {
            color: [{ type: core.Input }],
            first: [{ type: core.Input }],
            last: [{ type: core.Input }],
            active: [{ type: core.Input }],
            onClick: [{ type: core.Output }],
            onSwatchHover: [{ type: core.Output }]
        };
        return SwatchesColorComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var SwatchesGroupComponent = /** @class */ (function () {
        function SwatchesGroupComponent() {
            this.onClick = new core.EventEmitter();
            this.onSwatchHover = new core.EventEmitter();
        }
        SwatchesGroupComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'color-swatches-group',
                        template: "\n  <div class=\"swatches-group\">\n    <color-swatches-color\n      *ngFor=\"let color of group; let idx = index;\"\n      [active]=\"color.toLowerCase() === active\"\n      [color]=\"color\"\n      [first]=\"idx === 0\"\n      [last]=\"idx === group.length - 1\"\n      (onClick)=\"onClick.emit($event)\"\n    >\n    </color-swatches-color>\n  </div>\n  ",
                        changeDetection: core.ChangeDetectionStrategy.OnPush,
                        preserveWhitespaces: false,
                        styles: ["\n    .swatches-group {\n      padding-bottom: 10px;\n      width: 40px;\n      float: left;\n      margin-right: 10px;\n    }\n  "]
                    }] }
        ];
        SwatchesGroupComponent.propDecorators = {
            group: [{ type: core.Input }],
            active: [{ type: core.Input }],
            onClick: [{ type: core.Output }],
            onSwatchHover: [{ type: core.Output }]
        };
        return SwatchesGroupComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var SwatchesComponent = /** @class */ (function (_super) {
        __extends(SwatchesComponent, _super);
        function SwatchesComponent() {
            var _this = _super.call(this) || this;
            /**
             * Pixel value for picker width
             */
            _this.width = 320;
            /**
             * Color squares to display
             */
            _this.height = 240;
            /**
             * An array of color groups, each with an array of colors
             */
            _this.colors = [
                [
                    materialColors.red['900'],
                    materialColors.red['700'],
                    materialColors.red['500'],
                    materialColors.red['300'],
                    materialColors.red['100'],
                ],
                [
                    materialColors.pink['900'],
                    materialColors.pink['700'],
                    materialColors.pink['500'],
                    materialColors.pink['300'],
                    materialColors.pink['100'],
                ],
                [
                    materialColors.purple['900'],
                    materialColors.purple['700'],
                    materialColors.purple['500'],
                    materialColors.purple['300'],
                    materialColors.purple['100'],
                ],
                [
                    materialColors.deepPurple['900'],
                    materialColors.deepPurple['700'],
                    materialColors.deepPurple['500'],
                    materialColors.deepPurple['300'],
                    materialColors.deepPurple['100'],
                ],
                [
                    materialColors.indigo['900'],
                    materialColors.indigo['700'],
                    materialColors.indigo['500'],
                    materialColors.indigo['300'],
                    materialColors.indigo['100'],
                ],
                [
                    materialColors.blue['900'],
                    materialColors.blue['700'],
                    materialColors.blue['500'],
                    materialColors.blue['300'],
                    materialColors.blue['100'],
                ],
                [
                    materialColors.lightBlue['900'],
                    materialColors.lightBlue['700'],
                    materialColors.lightBlue['500'],
                    materialColors.lightBlue['300'],
                    materialColors.lightBlue['100'],
                ],
                [
                    materialColors.cyan['900'],
                    materialColors.cyan['700'],
                    materialColors.cyan['500'],
                    materialColors.cyan['300'],
                    materialColors.cyan['100'],
                ],
                [
                    materialColors.teal['900'],
                    materialColors.teal['700'],
                    materialColors.teal['500'],
                    materialColors.teal['300'],
                    materialColors.teal['100'],
                ],
                [
                    '#194D33',
                    materialColors.green['700'],
                    materialColors.green['500'],
                    materialColors.green['300'],
                    materialColors.green['100'],
                ],
                [
                    materialColors.lightGreen['900'],
                    materialColors.lightGreen['700'],
                    materialColors.lightGreen['500'],
                    materialColors.lightGreen['300'],
                    materialColors.lightGreen['100'],
                ],
                [
                    materialColors.lime['900'],
                    materialColors.lime['700'],
                    materialColors.lime['500'],
                    materialColors.lime['300'],
                    materialColors.lime['100'],
                ],
                [
                    materialColors.yellow['900'],
                    materialColors.yellow['700'],
                    materialColors.yellow['500'],
                    materialColors.yellow['300'],
                    materialColors.yellow['100'],
                ],
                [
                    materialColors.amber['900'],
                    materialColors.amber['700'],
                    materialColors.amber['500'],
                    materialColors.amber['300'],
                    materialColors.amber['100'],
                ],
                [
                    materialColors.orange['900'],
                    materialColors.orange['700'],
                    materialColors.orange['500'],
                    materialColors.orange['300'],
                    materialColors.orange['100'],
                ],
                [
                    materialColors.deepOrange['900'],
                    materialColors.deepOrange['700'],
                    materialColors.deepOrange['500'],
                    materialColors.deepOrange['300'],
                    materialColors.deepOrange['100'],
                ],
                [
                    materialColors.brown['900'],
                    materialColors.brown['700'],
                    materialColors.brown['500'],
                    materialColors.brown['300'],
                    materialColors.brown['100'],
                ],
                [
                    materialColors.blueGrey['900'],
                    materialColors.blueGrey['700'],
                    materialColors.blueGrey['500'],
                    materialColors.blueGrey['300'],
                    materialColors.blueGrey['100'],
                ],
                ['#000000', '#525252', '#969696', '#D9D9D9', '#FFFFFF'],
            ];
            return _this;
        }
        /**
         * @param {?} __0
         * @return {?}
         */
        SwatchesComponent.prototype.handlePickerChange = /**
         * @param {?} __0
         * @return {?}
         */
            function (_a) {
                var data = _a.data, $event = _a.$event;
                this.handleChange(data, $event);
            };
        SwatchesComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'color-swatches',
                        template: "\n  <div class=\"swatches-picker {{ className }}\"\n    [style.width.px]=\"width\" [style.height.px]=\"height\">\n    <color-raised>\n      <div class=\"swatches-overflow\" [style.height.px]=\"height\">\n        <div class=\"swatches-body\">\n          <color-swatches-group\n            *ngFor=\"let group of colors\"\n            [group]=\"group\" [active]=\"hex\"\n            (onClick)=\"handlePickerChange($event)\"\n          ></color-swatches-group>\n        </div>\n      </div>\n    </color-raised>\n  </div>\n  ",
                        changeDetection: core.ChangeDetectionStrategy.OnPush,
                        preserveWhitespaces: false,
                        styles: ["\n      .swatches-overflow {\n        overflow-y: scroll;\n      }\n      .swatches-overflow {\n        padding: 16px 0 6px 16px;\n      }\n    "]
                    }] }
        ];
        /** @nocollapse */
        SwatchesComponent.ctorParameters = function () { return []; };
        SwatchesComponent.propDecorators = {
            width: [{ type: core.Input }],
            height: [{ type: core.Input }],
            colors: [{ type: core.Input }]
        };
        return SwatchesComponent;
    }(ngxColor.ColorWrap));
    var ColorSwatchesModule = /** @class */ (function () {
        function ColorSwatchesModule() {
        }
        ColorSwatchesModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [
                            SwatchesComponent,
                            SwatchesGroupComponent,
                            SwatchesColorComponent,
                        ],
                        exports: [SwatchesComponent, SwatchesGroupComponent, SwatchesColorComponent],
                        imports: [common.CommonModule, ngxColor.SwatchModule, ngxColor.RaisedModule],
                    },] }
        ];
        return ColorSwatchesModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */

    exports.SwatchesComponent = SwatchesComponent;
    exports.ColorSwatchesModule = ColorSwatchesModule;
    exports.ɵb = SwatchesColorComponent;
    exports.ɵa = SwatchesGroupComponent;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,