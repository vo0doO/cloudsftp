/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { CommonModule } from '@angular/common';
import { ChangeDetectionStrategy, Component, Input, NgModule, } from '@angular/core';
import { amber, blue, blueGrey, brown, cyan, deepOrange, deepPurple, green, indigo, lightBlue, lightGreen, lime, orange, pink, purple, red, teal, yellow, } from 'material-colors';
import { ColorWrap, RaisedModule, SwatchModule } from 'ngx-color';
import { SwatchesColorComponent } from './swatches-color.component';
import { SwatchesGroupComponent } from './swatches-group.component';
export class SwatchesComponent extends ColorWrap {
    constructor() {
        super();
        /**
         * Pixel value for picker width
         */
        this.width = 320;
        /**
         * Color squares to display
         */
        this.height = 240;
        /**
         * An array of color groups, each with an array of colors
         */
        this.colors = [
            [
                red['900'],
                red['700'],
                red['500'],
                red['300'],
                red['100'],
            ],
            [
                pink['900'],
                pink['700'],
                pink['500'],
                pink['300'],
                pink['100'],
            ],
            [
                purple['900'],
                purple['700'],
                purple['500'],
                purple['300'],
                purple['100'],
            ],
            [
                deepPurple['900'],
                deepPurple['700'],
                deepPurple['500'],
                deepPurple['300'],
                deepPurple['100'],
            ],
            [
                indigo['900'],
                indigo['700'],
                indigo['500'],
                indigo['300'],
                indigo['100'],
            ],
            [
                blue['900'],
                blue['700'],
                blue['500'],
                blue['300'],
                blue['100'],
            ],
            [
                lightBlue['900'],
                lightBlue['700'],
                lightBlue['500'],
                lightBlue['300'],
                lightBlue['100'],
            ],
            [
                cyan['900'],
                cyan['700'],
                cyan['500'],
                cyan['300'],
                cyan['100'],
            ],
            [
                teal['900'],
                teal['700'],
                teal['500'],
                teal['300'],
                teal['100'],
            ],
            [
                '#194D33',
                green['700'],
                green['500'],
                green['300'],
                green['100'],
            ],
            [
                lightGreen['900'],
                lightGreen['700'],
                lightGreen['500'],
                lightGreen['300'],
                lightGreen['100'],
            ],
            [
                lime['900'],
                lime['700'],
                lime['500'],
                lime['300'],
                lime['100'],
            ],
            [
                yellow['900'],
                yellow['700'],
                yellow['500'],
                yellow['300'],
                yellow['100'],
            ],
            [
                amber['900'],
                amber['700'],
                amber['500'],
                amber['300'],
                amber['100'],
            ],
            [
                orange['900'],
                orange['700'],
                orange['500'],
                orange['300'],
                orange['100'],
            ],
            [
                deepOrange['900'],
                deepOrange['700'],
                deepOrange['500'],
                deepOrange['300'],
                deepOrange['100'],
            ],
            [
                brown['900'],
                brown['700'],
                brown['500'],
                brown['300'],
                brown['100'],
            ],
            [
                blueGrey['900'],
                blueGrey['700'],
                blueGrey['500'],
                blueGrey['300'],
                blueGrey['100'],
            ],
            ['#000000', '#525252', '#969696', '#D9D9D9', '#FFFFFF'],
        ];
    }
    /**
     * @param {?} __0
     * @return {?}
     */
    handlePickerChange({ data, $event }) {
        this.handleChange(data, $event);
    }
}
SwatchesComponent.decorators = [
    { type: Component, args: [{
                selector: 'color-swatches',
                template: `
  <div class="swatches-picker {{ className }}"
    [style.width.px]="width" [style.height.px]="height">
    <color-raised>
      <div class="swatches-overflow" [style.height.px]="height">
        <div class="swatches-body">
          <color-swatches-group
            *ngFor="let group of colors"
            [group]="group" [active]="hex"
            (onClick)="handlePickerChange($event)"
          ></color-swatches-group>
        </div>
      </div>
    </color-raised>
  </div>
  `,
                changeDetection: ChangeDetectionStrategy.OnPush,
                preserveWhitespaces: false,
                styles: [`
      .swatches-overflow {
        overflow-y: scroll;
      }
      .swatches-overflow {
        padding: 16px 0 6px 16px;
      }
    `]
            }] }
];
/** @nocollapse */
SwatchesComponent.ctorParameters = () => [];
SwatchesComponent.propDecorators = {
    width: [{ type: Input }],
    height: [{ type: Input }],
    colors: [{ type: Input }]
};
if (false) {
    /**
     * Pixel value for picker width
     * @type {?}
     */
    SwatchesComponent.prototype.width;
    /**
     * Color squares to display
     * @type {?}
     */
    SwatchesComponent.prototype.height;
    /**
     * An array of color groups, each with an array of colors
     * @type {?}
     */
    SwatchesComponent.prototype.colors;
}
export class ColorSwatchesModule {
}
ColorSwatchesModule.decorators = [
    { type: NgModule, args: [{
                declarations: [
                    SwatchesComponent,
                    SwatchesGroupComponent,
                    SwatchesColorComponent,
                ],
                exports: [SwatchesComponent, SwatchesGroupComponent, SwatchesColorComponent],
                imports: [CommonModule, SwatchModule, RaisedModule],
            },] }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3dhdGNoZXMuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmd4LWNvbG9yL3N3YXRjaGVzLyIsInNvdXJjZXMiOlsic3dhdGNoZXMuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDL0MsT0FBTyxFQUNMLHVCQUF1QixFQUN2QixTQUFTLEVBQ1QsS0FBSyxFQUNMLFFBQVEsR0FDVCxNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQ0wsS0FBSyxFQUNMLElBQUksRUFDSixRQUFRLEVBQ1IsS0FBSyxFQUNMLElBQUksRUFDSixVQUFVLEVBQ1YsVUFBVSxFQUNWLEtBQUssRUFDTCxNQUFNLEVBQ04sU0FBUyxFQUNULFVBQVUsRUFDVixJQUFJLEVBQ0osTUFBTSxFQUNOLElBQUksRUFDSixNQUFNLEVBQ04sR0FBRyxFQUNILElBQUksRUFDSixNQUFNLEdBQ1AsTUFBTSxpQkFBaUIsQ0FBQztBQUV6QixPQUFPLEVBQUUsU0FBUyxFQUFFLFlBQVksRUFBRSxZQUFZLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFDbEUsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFDcEUsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFpQ3BFLE1BQU0sT0FBTyxpQkFBa0IsU0FBUSxTQUFTO0lBd0k5QztRQUNFLEtBQUssRUFBRSxDQUFDOzs7O1FBdklELFVBQUssR0FBb0IsR0FBRyxDQUFDOzs7O1FBRTdCLFdBQU0sR0FBb0IsR0FBRyxDQUFDOzs7O1FBR3ZDLFdBQU0sR0FBZTtZQUNuQjtnQkFDRSxHQUFHLENBQUMsS0FBSyxDQUFDO2dCQUNWLEdBQUcsQ0FBQyxLQUFLLENBQUM7Z0JBQ1YsR0FBRyxDQUFDLEtBQUssQ0FBQztnQkFDVixHQUFHLENBQUMsS0FBSyxDQUFDO2dCQUNWLEdBQUcsQ0FBQyxLQUFLLENBQUM7YUFDWDtZQUNEO2dCQUNFLElBQUksQ0FBQyxLQUFLLENBQUM7Z0JBQ1gsSUFBSSxDQUFDLEtBQUssQ0FBQztnQkFDWCxJQUFJLENBQUMsS0FBSyxDQUFDO2dCQUNYLElBQUksQ0FBQyxLQUFLLENBQUM7Z0JBQ1gsSUFBSSxDQUFDLEtBQUssQ0FBQzthQUNaO1lBQ0Q7Z0JBQ0UsTUFBTSxDQUFDLEtBQUssQ0FBQztnQkFDYixNQUFNLENBQUMsS0FBSyxDQUFDO2dCQUNiLE1BQU0sQ0FBQyxLQUFLLENBQUM7Z0JBQ2IsTUFBTSxDQUFDLEtBQUssQ0FBQztnQkFDYixNQUFNLENBQUMsS0FBSyxDQUFDO2FBQ2Q7WUFDRDtnQkFDRSxVQUFVLENBQUMsS0FBSyxDQUFDO2dCQUNqQixVQUFVLENBQUMsS0FBSyxDQUFDO2dCQUNqQixVQUFVLENBQUMsS0FBSyxDQUFDO2dCQUNqQixVQUFVLENBQUMsS0FBSyxDQUFDO2dCQUNqQixVQUFVLENBQUMsS0FBSyxDQUFDO2FBQ2xCO1lBQ0Q7Z0JBQ0UsTUFBTSxDQUFDLEtBQUssQ0FBQztnQkFDYixNQUFNLENBQUMsS0FBSyxDQUFDO2dCQUNiLE1BQU0sQ0FBQyxLQUFLLENBQUM7Z0JBQ2IsTUFBTSxDQUFDLEtBQUssQ0FBQztnQkFDYixNQUFNLENBQUMsS0FBSyxDQUFDO2FBQ2Q7WUFDRDtnQkFDRSxJQUFJLENBQUMsS0FBSyxDQUFDO2dCQUNYLElBQUksQ0FBQyxLQUFLLENBQUM7Z0JBQ1gsSUFBSSxDQUFDLEtBQUssQ0FBQztnQkFDWCxJQUFJLENBQUMsS0FBSyxDQUFDO2dCQUNYLElBQUksQ0FBQyxLQUFLLENBQUM7YUFDWjtZQUNEO2dCQUNFLFNBQVMsQ0FBQyxLQUFLLENBQUM7Z0JBQ2hCLFNBQVMsQ0FBQyxLQUFLLENBQUM7Z0JBQ2hCLFNBQVMsQ0FBQyxLQUFLLENBQUM7Z0JBQ2hCLFNBQVMsQ0FBQyxLQUFLLENBQUM7Z0JBQ2hCLFNBQVMsQ0FBQyxLQUFLLENBQUM7YUFDakI7WUFDRDtnQkFDRSxJQUFJLENBQUMsS0FBSyxDQUFDO2dCQUNYLElBQUksQ0FBQyxLQUFLLENBQUM7Z0JBQ1gsSUFBSSxDQUFDLEtBQUssQ0FBQztnQkFDWCxJQUFJLENBQUMsS0FBSyxDQUFDO2dCQUNYLElBQUksQ0FBQyxLQUFLLENBQUM7YUFDWjtZQUNEO2dCQUNFLElBQUksQ0FBQyxLQUFLLENBQUM7Z0JBQ1gsSUFBSSxDQUFDLEtBQUssQ0FBQztnQkFDWCxJQUFJLENBQUMsS0FBSyxDQUFDO2dCQUNYLElBQUksQ0FBQyxLQUFLLENBQUM7Z0JBQ1gsSUFBSSxDQUFDLEtBQUssQ0FBQzthQUNaO1lBQ0Q7Z0JBQ0UsU0FBUztnQkFDVCxLQUFLLENBQUMsS0FBSyxDQUFDO2dCQUNaLEtBQUssQ0FBQyxLQUFLLENBQUM7Z0JBQ1osS0FBSyxDQUFDLEtBQUssQ0FBQztnQkFDWixLQUFLLENBQUMsS0FBSyxDQUFDO2FBQ2I7WUFDRDtnQkFDRSxVQUFVLENBQUMsS0FBSyxDQUFDO2dCQUNqQixVQUFVLENBQUMsS0FBSyxDQUFDO2dCQUNqQixVQUFVLENBQUMsS0FBSyxDQUFDO2dCQUNqQixVQUFVLENBQUMsS0FBSyxDQUFDO2dCQUNqQixVQUFVLENBQUMsS0FBSyxDQUFDO2FBQ2xCO1lBQ0Q7Z0JBQ0UsSUFBSSxDQUFDLEtBQUssQ0FBQztnQkFDWCxJQUFJLENBQUMsS0FBSyxDQUFDO2dCQUNYLElBQUksQ0FBQyxLQUFLLENBQUM7Z0JBQ1gsSUFBSSxDQUFDLEtBQUssQ0FBQztnQkFDWCxJQUFJLENBQUMsS0FBSyxDQUFDO2FBQ1o7WUFDRDtnQkFDRSxNQUFNLENBQUMsS0FBSyxDQUFDO2dCQUNiLE1BQU0sQ0FBQyxLQUFLLENBQUM7Z0JBQ2IsTUFBTSxDQUFDLEtBQUssQ0FBQztnQkFDYixNQUFNLENBQUMsS0FBSyxDQUFDO2dCQUNiLE1BQU0sQ0FBQyxLQUFLLENBQUM7YUFDZDtZQUNEO2dCQUNFLEtBQUssQ0FBQyxLQUFLLENBQUM7Z0JBQ1osS0FBSyxDQUFDLEtBQUssQ0FBQztnQkFDWixLQUFLLENBQUMsS0FBSyxDQUFDO2dCQUNaLEtBQUssQ0FBQyxLQUFLLENBQUM7Z0JBQ1osS0FBSyxDQUFDLEtBQUssQ0FBQzthQUNiO1lBQ0Q7Z0JBQ0UsTUFBTSxDQUFDLEtBQUssQ0FBQztnQkFDYixNQUFNLENBQUMsS0FBSyxDQUFDO2dCQUNiLE1BQU0sQ0FBQyxLQUFLLENBQUM7Z0JBQ2IsTUFBTSxDQUFDLEtBQUssQ0FBQztnQkFDYixNQUFNLENBQUMsS0FBSyxDQUFDO2FBQ2Q7WUFDRDtnQkFDRSxVQUFVLENBQUMsS0FBSyxDQUFDO2dCQUNqQixVQUFVLENBQUMsS0FBSyxDQUFDO2dCQUNqQixVQUFVLENBQUMsS0FBSyxDQUFDO2dCQUNqQixVQUFVLENBQUMsS0FBSyxDQUFDO2dCQUNqQixVQUFVLENBQUMsS0FBSyxDQUFDO2FBQ2xCO1lBQ0Q7Z0JBQ0UsS0FBSyxDQUFDLEtBQUssQ0FBQztnQkFDWixLQUFLLENBQUMsS0FBSyxDQUFDO2dCQUNaLEtBQUssQ0FBQyxLQUFLLENBQUM7Z0JBQ1osS0FBSyxDQUFDLEtBQUssQ0FBQztnQkFDWixLQUFLLENBQUMsS0FBSyxDQUFDO2FBQ2I7WUFDRDtnQkFDRSxRQUFRLENBQUMsS0FBSyxDQUFDO2dCQUNmLFFBQVEsQ0FBQyxLQUFLLENBQUM7Z0JBQ2YsUUFBUSxDQUFDLEtBQUssQ0FBQztnQkFDZixRQUFRLENBQUMsS0FBSyxDQUFDO2dCQUNmLFFBQVEsQ0FBQyxLQUFLLENBQUM7YUFDaEI7WUFDRCxDQUFDLFNBQVMsRUFBRSxTQUFTLEVBQUUsU0FBUyxFQUFFLFNBQVMsRUFBRSxTQUFTLENBQUM7U0FDeEQsQ0FBQztJQUdGLENBQUM7Ozs7O0lBQ0Qsa0JBQWtCLENBQUMsRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFO1FBQ2pDLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxFQUFFLE1BQU0sQ0FBQyxDQUFDO0lBQ2xDLENBQUM7OztZQTVLRixTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLGdCQUFnQjtnQkFDMUIsUUFBUSxFQUFFOzs7Ozs7Ozs7Ozs7Ozs7R0FlVDtnQkFXRCxlQUFlLEVBQUUsdUJBQXVCLENBQUMsTUFBTTtnQkFDL0MsbUJBQW1CLEVBQUUsS0FBSzt5QkFWeEI7Ozs7Ozs7S0FPQzthQUlKOzs7OztvQkFHRSxLQUFLO3FCQUVMLEtBQUs7cUJBRUwsS0FBSzs7Ozs7OztJQUpOLGtDQUFzQzs7Ozs7SUFFdEMsbUNBQXVDOzs7OztJQUV2QyxtQ0FpSUU7O0FBa0JKLE1BQU0sT0FBTyxtQkFBbUI7OztZQVQvQixRQUFRLFNBQUM7Z0JBQ1IsWUFBWSxFQUFFO29CQUNaLGlCQUFpQjtvQkFDakIsc0JBQXNCO29CQUN0QixzQkFBc0I7aUJBQ3ZCO2dCQUNELE9BQU8sRUFBRSxDQUFDLGlCQUFpQixFQUFFLHNCQUFzQixFQUFFLHNCQUFzQixDQUFDO2dCQUM1RSxPQUFPLEVBQUUsQ0FBQyxZQUFZLEVBQUUsWUFBWSxFQUFFLFlBQVksQ0FBQzthQUNwRCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbW1vbk1vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5pbXBvcnQge1xuICBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSxcbiAgQ29tcG9uZW50LFxuICBJbnB1dCxcbiAgTmdNb2R1bGUsXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtcbiAgYW1iZXIsXG4gIGJsdWUsXG4gIGJsdWVHcmV5LFxuICBicm93bixcbiAgY3lhbixcbiAgZGVlcE9yYW5nZSxcbiAgZGVlcFB1cnBsZSxcbiAgZ3JlZW4sXG4gIGluZGlnbyxcbiAgbGlnaHRCbHVlLFxuICBsaWdodEdyZWVuLFxuICBsaW1lLFxuICBvcmFuZ2UsXG4gIHBpbmssXG4gIHB1cnBsZSxcbiAgcmVkLFxuICB0ZWFsLFxuICB5ZWxsb3csXG59IGZyb20gJ21hdGVyaWFsLWNvbG9ycyc7XG5cbmltcG9ydCB7IENvbG9yV3JhcCwgUmFpc2VkTW9kdWxlLCBTd2F0Y2hNb2R1bGUgfSBmcm9tICduZ3gtY29sb3InO1xuaW1wb3J0IHsgU3dhdGNoZXNDb2xvckNvbXBvbmVudCB9IGZyb20gJy4vc3dhdGNoZXMtY29sb3IuY29tcG9uZW50JztcbmltcG9ydCB7IFN3YXRjaGVzR3JvdXBDb21wb25lbnQgfSBmcm9tICcuL3N3YXRjaGVzLWdyb3VwLmNvbXBvbmVudCc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2NvbG9yLXN3YXRjaGVzJyxcbiAgdGVtcGxhdGU6IGBcbiAgPGRpdiBjbGFzcz1cInN3YXRjaGVzLXBpY2tlciB7eyBjbGFzc05hbWUgfX1cIlxuICAgIFtzdHlsZS53aWR0aC5weF09XCJ3aWR0aFwiIFtzdHlsZS5oZWlnaHQucHhdPVwiaGVpZ2h0XCI+XG4gICAgPGNvbG9yLXJhaXNlZD5cbiAgICAgIDxkaXYgY2xhc3M9XCJzd2F0Y2hlcy1vdmVyZmxvd1wiIFtzdHlsZS5oZWlnaHQucHhdPVwiaGVpZ2h0XCI+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJzd2F0Y2hlcy1ib2R5XCI+XG4gICAgICAgICAgPGNvbG9yLXN3YXRjaGVzLWdyb3VwXG4gICAgICAgICAgICAqbmdGb3I9XCJsZXQgZ3JvdXAgb2YgY29sb3JzXCJcbiAgICAgICAgICAgIFtncm91cF09XCJncm91cFwiIFthY3RpdmVdPVwiaGV4XCJcbiAgICAgICAgICAgIChvbkNsaWNrKT1cImhhbmRsZVBpY2tlckNoYW5nZSgkZXZlbnQpXCJcbiAgICAgICAgICA+PC9jb2xvci1zd2F0Y2hlcy1ncm91cD5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICA8L2NvbG9yLXJhaXNlZD5cbiAgPC9kaXY+XG4gIGAsXG4gIHN0eWxlczogW1xuICAgIGBcbiAgICAgIC5zd2F0Y2hlcy1vdmVyZmxvdyB7XG4gICAgICAgIG92ZXJmbG93LXk6IHNjcm9sbDtcbiAgICAgIH1cbiAgICAgIC5zd2F0Y2hlcy1vdmVyZmxvdyB7XG4gICAgICAgIHBhZGRpbmc6IDE2cHggMCA2cHggMTZweDtcbiAgICAgIH1cbiAgICBgLFxuICBdLFxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcbiAgcHJlc2VydmVXaGl0ZXNwYWNlczogZmFsc2UsXG59KVxuZXhwb3J0IGNsYXNzIFN3YXRjaGVzQ29tcG9uZW50IGV4dGVuZHMgQ29sb3JXcmFwIHtcbiAgLyoqIFBpeGVsIHZhbHVlIGZvciBwaWNrZXIgd2lkdGggKi9cbiAgQElucHV0KCkgd2lkdGg6IHN0cmluZyB8IG51bWJlciA9IDMyMDtcbiAgLyoqIENvbG9yIHNxdWFyZXMgdG8gZGlzcGxheSAqL1xuICBASW5wdXQoKSBoZWlnaHQ6IHN0cmluZyB8IG51bWJlciA9IDI0MDtcbiAgLyoqIEFuIGFycmF5IG9mIGNvbG9yIGdyb3VwcywgZWFjaCB3aXRoIGFuIGFycmF5IG9mIGNvbG9ycyAqL1xuICBASW5wdXQoKVxuICBjb2xvcnM6IHN0cmluZ1tdW10gPSBbXG4gICAgW1xuICAgICAgcmVkWyc5MDAnXSxcbiAgICAgIHJlZFsnNzAwJ10sXG4gICAgICByZWRbJzUwMCddLFxuICAgICAgcmVkWyczMDAnXSxcbiAgICAgIHJlZFsnMTAwJ10sXG4gICAgXSxcbiAgICBbXG4gICAgICBwaW5rWyc5MDAnXSxcbiAgICAgIHBpbmtbJzcwMCddLFxuICAgICAgcGlua1snNTAwJ10sXG4gICAgICBwaW5rWyczMDAnXSxcbiAgICAgIHBpbmtbJzEwMCddLFxuICAgIF0sXG4gICAgW1xuICAgICAgcHVycGxlWyc5MDAnXSxcbiAgICAgIHB1cnBsZVsnNzAwJ10sXG4gICAgICBwdXJwbGVbJzUwMCddLFxuICAgICAgcHVycGxlWyczMDAnXSxcbiAgICAgIHB1cnBsZVsnMTAwJ10sXG4gICAgXSxcbiAgICBbXG4gICAgICBkZWVwUHVycGxlWyc5MDAnXSxcbiAgICAgIGRlZXBQdXJwbGVbJzcwMCddLFxuICAgICAgZGVlcFB1cnBsZVsnNTAwJ10sXG4gICAgICBkZWVwUHVycGxlWyczMDAnXSxcbiAgICAgIGRlZXBQdXJwbGVbJzEwMCddLFxuICAgIF0sXG4gICAgW1xuICAgICAgaW5kaWdvWyc5MDAnXSxcbiAgICAgIGluZGlnb1snNzAwJ10sXG4gICAgICBpbmRpZ29bJzUwMCddLFxuICAgICAgaW5kaWdvWyczMDAnXSxcbiAgICAgIGluZGlnb1snMTAwJ10sXG4gICAgXSxcbiAgICBbXG4gICAgICBibHVlWyc5MDAnXSxcbiAgICAgIGJsdWVbJzcwMCddLFxuICAgICAgYmx1ZVsnNTAwJ10sXG4gICAgICBibHVlWyczMDAnXSxcbiAgICAgIGJsdWVbJzEwMCddLFxuICAgIF0sXG4gICAgW1xuICAgICAgbGlnaHRCbHVlWyc5MDAnXSxcbiAgICAgIGxpZ2h0Qmx1ZVsnNzAwJ10sXG4gICAgICBsaWdodEJsdWVbJzUwMCddLFxuICAgICAgbGlnaHRCbHVlWyczMDAnXSxcbiAgICAgIGxpZ2h0Qmx1ZVsnMTAwJ10sXG4gICAgXSxcbiAgICBbXG4gICAgICBjeWFuWyc5MDAnXSxcbiAgICAgIGN5YW5bJzcwMCddLFxuICAgICAgY3lhblsnNTAwJ10sXG4gICAgICBjeWFuWyczMDAnXSxcbiAgICAgIGN5YW5bJzEwMCddLFxuICAgIF0sXG4gICAgW1xuICAgICAgdGVhbFsnOTAwJ10sXG4gICAgICB0ZWFsWyc3MDAnXSxcbiAgICAgIHRlYWxbJzUwMCddLFxuICAgICAgdGVhbFsnMzAwJ10sXG4gICAgICB0ZWFsWycxMDAnXSxcbiAgICBdLFxuICAgIFtcbiAgICAgICcjMTk0RDMzJyxcbiAgICAgIGdyZWVuWyc3MDAnXSxcbiAgICAgIGdyZWVuWyc1MDAnXSxcbiAgICAgIGdyZWVuWyczMDAnXSxcbiAgICAgIGdyZWVuWycxMDAnXSxcbiAgICBdLFxuICAgIFtcbiAgICAgIGxpZ2h0R3JlZW5bJzkwMCddLFxuICAgICAgbGlnaHRHcmVlblsnNzAwJ10sXG4gICAgICBsaWdodEdyZWVuWyc1MDAnXSxcbiAgICAgIGxpZ2h0R3JlZW5bJzMwMCddLFxuICAgICAgbGlnaHRHcmVlblsnMTAwJ10sXG4gICAgXSxcbiAgICBbXG4gICAgICBsaW1lWyc5MDAnXSxcbiAgICAgIGxpbWVbJzcwMCddLFxuICAgICAgbGltZVsnNTAwJ10sXG4gICAgICBsaW1lWyczMDAnXSxcbiAgICAgIGxpbWVbJzEwMCddLFxuICAgIF0sXG4gICAgW1xuICAgICAgeWVsbG93Wyc5MDAnXSxcbiAgICAgIHllbGxvd1snNzAwJ10sXG4gICAgICB5ZWxsb3dbJzUwMCddLFxuICAgICAgeWVsbG93WyczMDAnXSxcbiAgICAgIHllbGxvd1snMTAwJ10sXG4gICAgXSxcbiAgICBbXG4gICAgICBhbWJlclsnOTAwJ10sXG4gICAgICBhbWJlclsnNzAwJ10sXG4gICAgICBhbWJlclsnNTAwJ10sXG4gICAgICBhbWJlclsnMzAwJ10sXG4gICAgICBhbWJlclsnMTAwJ10sXG4gICAgXSxcbiAgICBbXG4gICAgICBvcmFuZ2VbJzkwMCddLFxuICAgICAgb3JhbmdlWyc3MDAnXSxcbiAgICAgIG9yYW5nZVsnNTAwJ10sXG4gICAgICBvcmFuZ2VbJzMwMCddLFxuICAgICAgb3JhbmdlWycxMDAnXSxcbiAgICBdLFxuICAgIFtcbiAgICAgIGRlZXBPcmFuZ2VbJzkwMCddLFxuICAgICAgZGVlcE9yYW5nZVsnNzAwJ10sXG4gICAgICBkZWVwT3JhbmdlWyc1MDAnXSxcbiAgICAgIGRlZXBPcmFuZ2VbJzMwMCddLFxuICAgICAgZGVlcE9yYW5nZVsnMTAwJ10sXG4gICAgXSxcbiAgICBbXG4gICAgICBicm93blsnOTAwJ10sXG4gICAgICBicm93blsnNzAwJ10sXG4gICAgICBicm93blsnNTAwJ10sXG4gICAgICBicm93blsnMzAwJ10sXG4gICAgICBicm93blsnMTAwJ10sXG4gICAgXSxcbiAgICBbXG4gICAgICBibHVlR3JleVsnOTAwJ10sXG4gICAgICBibHVlR3JleVsnNzAwJ10sXG4gICAgICBibHVlR3JleVsnNTAwJ10sXG4gICAgICBibHVlR3JleVsnMzAwJ10sXG4gICAgICBibHVlR3JleVsnMTAwJ10sXG4gICAgXSxcbiAgICBbJyMwMDAwMDAnLCAnIzUyNTI1MicsICcjOTY5Njk2JywgJyNEOUQ5RDknLCAnI0ZGRkZGRiddLFxuICBdO1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcigpO1xuICB9XG4gIGhhbmRsZVBpY2tlckNoYW5nZSh7IGRhdGEsICRldmVudCB9KSB7XG4gICAgdGhpcy5oYW5kbGVDaGFuZ2UoZGF0YSwgJGV2ZW50KTtcbiAgfVxufVxuXG5ATmdNb2R1bGUoe1xuICBkZWNsYXJhdGlvbnM6IFtcbiAgICBTd2F0Y2hlc0NvbXBvbmVudCxcbiAgICBTd2F0Y2hlc0dyb3VwQ29tcG9uZW50LFxuICAgIFN3YXRjaGVzQ29sb3JDb21wb25lbnQsXG4gIF0sXG4gIGV4cG9ydHM6IFtTd2F0Y2hlc0NvbXBvbmVudCwgU3dhdGNoZXNHcm91cENvbXBvbmVudCwgU3dhdGNoZXNDb2xvckNvbXBvbmVudF0sXG4gIGltcG9ydHM6IFtDb21tb25Nb2R1bGUsIFN3YXRjaE1vZHVsZSwgUmFpc2VkTW9kdWxlXSxcbn0pXG5leHBvcnQgY2xhc3MgQ29sb3JTd2F0Y2hlc01vZHVsZSB7fVxuIl19