import { __extends } from 'tslib';
import { CommonModule } from '@angular/common';
import { ChangeDetectionStrategy, Component, NgModule } from '@angular/core';
import { ColorWrap, EditableInputModule, RaisedModule, isValidHex } from 'ngx-color';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var MaterialComponent = /** @class */ (function (_super) {
    __extends(MaterialComponent, _super);
    function MaterialComponent() {
        var _this = _super.call(this) || this;
        _this.HEXinput = {
            width: '100%',
            marginTop: '12px',
            fontSize: '15px',
            color: 'rgb(51, 51, 51)',
            padding: '0px',
            'border-width': '0px 0px 2px',
            outline: 'none',
            height: '30px',
        };
        _this.HEXlabel = {
            position: 'absolute',
            top: '0px',
            left: '0px',
            fontSize: '11px',
            color: 'rgb(153, 153, 153)',
            'text-transform': 'capitalize',
        };
        _this.RGBinput = {
            width: '100%',
            marginTop: '12px',
            fontSize: '15px',
            color: '#333',
            padding: '0px',
            border: '0px',
            'border-bottom': '1px solid #eee',
            outline: 'none',
            height: '30px',
        };
        _this.RGBlabel = {
            position: 'absolute',
            top: '0px',
            left: '0px',
            fontSize: '11px',
            color: '#999999',
            'text-transform': 'capitalize',
        };
        return _this;
    }
    /**
     * @param {?} __0
     * @return {?}
     */
    MaterialComponent.prototype.handleValueChange = /**
     * @param {?} __0
     * @return {?}
     */
    function (_a) {
        var data = _a.data, $event = _a.$event;
        this.handleChange(data, $event);
    };
    /**
     * @param {?} __0
     * @return {?}
     */
    MaterialComponent.prototype.handleInputChange = /**
     * @param {?} __0
     * @return {?}
     */
    function (_a) {
        var data = _a.data, $event = _a.$event;
        if (data.hex) {
            if (isValidHex(data.hex)) {
                this.handleValueChange({
                    data: {
                        hex: data.hex,
                        source: 'hex',
                    },
                    $event: $event,
                });
            }
        }
        else if (data.r || data.g || data.b) {
            this.handleValueChange({
                data: {
                    r: data.r || this.rgb.r,
                    g: data.g || this.rgb.g,
                    b: data.b || this.rgb.b,
                    source: 'rgb',
                },
                $event: $event,
            });
        }
    };
    /**
     * @return {?}
     */
    MaterialComponent.prototype.afterValidChange = /**
     * @return {?}
     */
    function () {
        this.HEXinput['border-bottom-color'] = this.hex;
    };
    MaterialComponent.decorators = [
        { type: Component, args: [{
                    selector: 'color-material',
                    template: "\n  <color-raised>\n    <div class=\"material-picker {{ className }}\">\n      <color-editable-input label=\"hex\" [value]=\"hex\"\n        (onChange)=\"handleValueChange($event)\"\n        [style]=\"{input: HEXinput, label: HEXlabel}\"\n      ></color-editable-input>\n      <div class=\"material-split\">\n        <div class=\"material-third\">\n          <color-editable-input label=\"r\" [value]=\"rgb.r\"\n            [style]=\"{ input: RGBinput, label: RGBlabel }\"\n            (onChange)=\"handleInputChange($event)\"\n          ></color-editable-input>\n        </div>\n        <div class=\"material-third\">\n          <color-editable-input label=\"g\" [value]=\"rgb.g\"\n            [style]=\"{ input: RGBinput, label: RGBlabel }\"\n            (onChange)=\"handleInputChange($event)\"\n          ></color-editable-input>\n        </div>\n        <div class=\"material-third\">\n          <color-editable-input label=\"b\" [value]=\"rgb.b\"\n            [style]=\"{ input: RGBinput, label: RGBlabel }\"\n            (onChange)=\"handleInputChange($event)\"\n          ></color-editable-input>\n        </div>\n      </div>\n    </div>\n  </color-raised>\n  ",
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    preserveWhitespaces: false,
                    styles: ["\n  .material-picker {\n    width: 130px;\n    height: 130px;\n    padding: 16px;\n    font-family: Roboto;\n  }\n  .material-split {\n    display: flex;\n    margin-right: -10px;\n    padding-top: 11px;\n  }\n  .material-third {\n    flex: 1 1 0%;\n    padding-right: 10px;\n  }\n  "]
                }] }
    ];
    /** @nocollapse */
    MaterialComponent.ctorParameters = function () { return []; };
    return MaterialComponent;
}(ColorWrap));
var ColorMaterialModule = /** @class */ (function () {
    function ColorMaterialModule() {
    }
    ColorMaterialModule.decorators = [
        { type: NgModule, args: [{
                    exports: [MaterialComponent],
                    declarations: [MaterialComponent],
                    imports: [CommonModule, EditableInputModule, RaisedModule],
                },] }
    ];
    return ColorMaterialModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */

export { MaterialComponent, ColorMaterialModule };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LWNvbG9yLW1hdGVyaWFsLmpzLm1hcCIsInNvdXJjZXMiOlsibmc6Ly9uZ3gtY29sb3IvbWF0ZXJpYWwvbWF0ZXJpYWwuY29tcG9uZW50LnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbW1vbk1vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5pbXBvcnQgeyBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSwgQ29tcG9uZW50LCBOZ01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBDb2xvcldyYXAsIEVkaXRhYmxlSW5wdXRNb2R1bGUsIFJhaXNlZE1vZHVsZSB9IGZyb20gJ25neC1jb2xvcic7XG5pbXBvcnQgeyBpc1ZhbGlkSGV4IH0gZnJvbSAnbmd4LWNvbG9yJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnY29sb3ItbWF0ZXJpYWwnLFxuICB0ZW1wbGF0ZTogYFxuICA8Y29sb3ItcmFpc2VkPlxuICAgIDxkaXYgY2xhc3M9XCJtYXRlcmlhbC1waWNrZXIge3sgY2xhc3NOYW1lIH19XCI+XG4gICAgICA8Y29sb3ItZWRpdGFibGUtaW5wdXQgbGFiZWw9XCJoZXhcIiBbdmFsdWVdPVwiaGV4XCJcbiAgICAgICAgKG9uQ2hhbmdlKT1cImhhbmRsZVZhbHVlQ2hhbmdlKCRldmVudClcIlxuICAgICAgICBbc3R5bGVdPVwie2lucHV0OiBIRVhpbnB1dCwgbGFiZWw6IEhFWGxhYmVsfVwiXG4gICAgICA+PC9jb2xvci1lZGl0YWJsZS1pbnB1dD5cbiAgICAgIDxkaXYgY2xhc3M9XCJtYXRlcmlhbC1zcGxpdFwiPlxuICAgICAgICA8ZGl2IGNsYXNzPVwibWF0ZXJpYWwtdGhpcmRcIj5cbiAgICAgICAgICA8Y29sb3ItZWRpdGFibGUtaW5wdXQgbGFiZWw9XCJyXCIgW3ZhbHVlXT1cInJnYi5yXCJcbiAgICAgICAgICAgIFtzdHlsZV09XCJ7IGlucHV0OiBSR0JpbnB1dCwgbGFiZWw6IFJHQmxhYmVsIH1cIlxuICAgICAgICAgICAgKG9uQ2hhbmdlKT1cImhhbmRsZUlucHV0Q2hhbmdlKCRldmVudClcIlxuICAgICAgICAgID48L2NvbG9yLWVkaXRhYmxlLWlucHV0PlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdiBjbGFzcz1cIm1hdGVyaWFsLXRoaXJkXCI+XG4gICAgICAgICAgPGNvbG9yLWVkaXRhYmxlLWlucHV0IGxhYmVsPVwiZ1wiIFt2YWx1ZV09XCJyZ2IuZ1wiXG4gICAgICAgICAgICBbc3R5bGVdPVwieyBpbnB1dDogUkdCaW5wdXQsIGxhYmVsOiBSR0JsYWJlbCB9XCJcbiAgICAgICAgICAgIChvbkNoYW5nZSk9XCJoYW5kbGVJbnB1dENoYW5nZSgkZXZlbnQpXCJcbiAgICAgICAgICA+PC9jb2xvci1lZGl0YWJsZS1pbnB1dD5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJtYXRlcmlhbC10aGlyZFwiPlxuICAgICAgICAgIDxjb2xvci1lZGl0YWJsZS1pbnB1dCBsYWJlbD1cImJcIiBbdmFsdWVdPVwicmdiLmJcIlxuICAgICAgICAgICAgW3N0eWxlXT1cInsgaW5wdXQ6IFJHQmlucHV0LCBsYWJlbDogUkdCbGFiZWwgfVwiXG4gICAgICAgICAgICAob25DaGFuZ2UpPVwiaGFuZGxlSW5wdXRDaGFuZ2UoJGV2ZW50KVwiXG4gICAgICAgICAgPjwvY29sb3ItZWRpdGFibGUtaW5wdXQ+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gIDwvY29sb3ItcmFpc2VkPlxuICBgLFxuICBzdHlsZXM6IFtcbiAgICBgXG4gIC5tYXRlcmlhbC1waWNrZXIge1xuICAgIHdpZHRoOiAxMzBweDtcbiAgICBoZWlnaHQ6IDEzMHB4O1xuICAgIHBhZGRpbmc6IDE2cHg7XG4gICAgZm9udC1mYW1pbHk6IFJvYm90bztcbiAgfVxuICAubWF0ZXJpYWwtc3BsaXQge1xuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgbWFyZ2luLXJpZ2h0OiAtMTBweDtcbiAgICBwYWRkaW5nLXRvcDogMTFweDtcbiAgfVxuICAubWF0ZXJpYWwtdGhpcmQge1xuICAgIGZsZXg6IDEgMSAwJTtcbiAgICBwYWRkaW5nLXJpZ2h0OiAxMHB4O1xuICB9XG4gIGAsXG4gIF0sXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxuICBwcmVzZXJ2ZVdoaXRlc3BhY2VzOiBmYWxzZSxcbn0pXG5leHBvcnQgY2xhc3MgTWF0ZXJpYWxDb21wb25lbnQgZXh0ZW5kcyBDb2xvcldyYXAge1xuICBIRVhpbnB1dDoge1trZXk6IHN0cmluZ106IHN0cmluZ30gPSB7XG4gICAgd2lkdGg6ICcxMDAlJyxcbiAgICBtYXJnaW5Ub3A6ICcxMnB4JyxcbiAgICBmb250U2l6ZTogJzE1cHgnLFxuICAgIGNvbG9yOiAncmdiKDUxLCA1MSwgNTEpJyxcbiAgICBwYWRkaW5nOiAnMHB4JyxcbiAgICAnYm9yZGVyLXdpZHRoJzogJzBweCAwcHggMnB4JyxcbiAgICBvdXRsaW5lOiAnbm9uZScsXG4gICAgaGVpZ2h0OiAnMzBweCcsXG4gIH07XG4gIEhFWGxhYmVsOiB7W2tleTogc3RyaW5nXTogc3RyaW5nfSA9IHtcbiAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICB0b3A6ICcwcHgnLFxuICAgIGxlZnQ6ICcwcHgnLFxuICAgIGZvbnRTaXplOiAnMTFweCcsXG4gICAgY29sb3I6ICdyZ2IoMTUzLCAxNTMsIDE1MyknLFxuICAgICd0ZXh0LXRyYW5zZm9ybSc6ICdjYXBpdGFsaXplJyxcbiAgfTtcbiAgUkdCaW5wdXQ6IHtba2V5OiBzdHJpbmddOiBzdHJpbmd9ID0ge1xuICAgIHdpZHRoOiAnMTAwJScsXG4gICAgbWFyZ2luVG9wOiAnMTJweCcsXG4gICAgZm9udFNpemU6ICcxNXB4JyxcbiAgICBjb2xvcjogJyMzMzMnLFxuICAgIHBhZGRpbmc6ICcwcHgnLFxuICAgIGJvcmRlcjogJzBweCcsXG4gICAgJ2JvcmRlci1ib3R0b20nOiAnMXB4IHNvbGlkICNlZWUnLFxuICAgIG91dGxpbmU6ICdub25lJyxcbiAgICBoZWlnaHQ6ICczMHB4JyxcbiAgfTtcbiAgUkdCbGFiZWw6IHtba2V5OiBzdHJpbmddOiBzdHJpbmd9ID0ge1xuICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgIHRvcDogJzBweCcsXG4gICAgbGVmdDogJzBweCcsXG4gICAgZm9udFNpemU6ICcxMXB4JyxcbiAgICBjb2xvcjogJyM5OTk5OTknLFxuICAgICd0ZXh0LXRyYW5zZm9ybSc6ICdjYXBpdGFsaXplJyxcbiAgfTtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoKTtcbiAgfVxuICBoYW5kbGVWYWx1ZUNoYW5nZSh7IGRhdGEsICRldmVudCB9KSB7XG4gICAgdGhpcy5oYW5kbGVDaGFuZ2UoZGF0YSwgJGV2ZW50KTtcbiAgfVxuICBoYW5kbGVJbnB1dENoYW5nZSh7IGRhdGEsICRldmVudCB9KSB7XG4gICAgaWYgKGRhdGEuaGV4KSB7XG4gICAgICBpZiAoaXNWYWxpZEhleChkYXRhLmhleCkpIHtcbiAgICAgICAgdGhpcy5oYW5kbGVWYWx1ZUNoYW5nZSh7XG4gICAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgaGV4OiBkYXRhLmhleCxcbiAgICAgICAgICAgIHNvdXJjZTogJ2hleCcsXG4gICAgICAgICAgfSxcbiAgICAgICAgICAkZXZlbnQsXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoZGF0YS5yIHx8IGRhdGEuZyB8fCBkYXRhLmIpIHtcbiAgICAgIHRoaXMuaGFuZGxlVmFsdWVDaGFuZ2Uoe1xuICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgcjogZGF0YS5yIHx8IHRoaXMucmdiLnIsXG4gICAgICAgICAgZzogZGF0YS5nIHx8IHRoaXMucmdiLmcsXG4gICAgICAgICAgYjogZGF0YS5iIHx8IHRoaXMucmdiLmIsXG4gICAgICAgICAgc291cmNlOiAncmdiJyxcbiAgICAgICAgfSxcbiAgICAgICAgJGV2ZW50LFxuICAgICAgfSk7XG4gICAgfVxuICB9XG4gIGFmdGVyVmFsaWRDaGFuZ2UoKSB7XG4gICAgdGhpcy5IRVhpbnB1dFsnYm9yZGVyLWJvdHRvbS1jb2xvciddID0gdGhpcy5oZXg7XG4gIH1cbn1cblxuQE5nTW9kdWxlKHtcbiAgZXhwb3J0czogW01hdGVyaWFsQ29tcG9uZW50XSxcbiAgZGVjbGFyYXRpb25zOiBbTWF0ZXJpYWxDb21wb25lbnRdLFxuICBpbXBvcnRzOiBbQ29tbW9uTW9kdWxlLCBFZGl0YWJsZUlucHV0TW9kdWxlLCBSYWlzZWRNb2R1bGVdLFxufSlcbmV4cG9ydCBjbGFzcyBDb2xvck1hdGVyaWFsTW9kdWxlIHsgfVxuIl0sIm5hbWVzIjpbInRzbGliXzEuX19leHRlbmRzIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0lBNER1Q0EscUNBQVM7SUFzQzlDO1FBQUEsWUFDRSxpQkFBTyxTQUNSO1FBdkNELGNBQVEsR0FBNEI7WUFDbEMsS0FBSyxFQUFFLE1BQU07WUFDYixTQUFTLEVBQUUsTUFBTTtZQUNqQixRQUFRLEVBQUUsTUFBTTtZQUNoQixLQUFLLEVBQUUsaUJBQWlCO1lBQ3hCLE9BQU8sRUFBRSxLQUFLO1lBQ2QsY0FBYyxFQUFFLGFBQWE7WUFDN0IsT0FBTyxFQUFFLE1BQU07WUFDZixNQUFNLEVBQUUsTUFBTTtTQUNmLENBQUM7UUFDRixjQUFRLEdBQTRCO1lBQ2xDLFFBQVEsRUFBRSxVQUFVO1lBQ3BCLEdBQUcsRUFBRSxLQUFLO1lBQ1YsSUFBSSxFQUFFLEtBQUs7WUFDWCxRQUFRLEVBQUUsTUFBTTtZQUNoQixLQUFLLEVBQUUsb0JBQW9CO1lBQzNCLGdCQUFnQixFQUFFLFlBQVk7U0FDL0IsQ0FBQztRQUNGLGNBQVEsR0FBNEI7WUFDbEMsS0FBSyxFQUFFLE1BQU07WUFDYixTQUFTLEVBQUUsTUFBTTtZQUNqQixRQUFRLEVBQUUsTUFBTTtZQUNoQixLQUFLLEVBQUUsTUFBTTtZQUNiLE9BQU8sRUFBRSxLQUFLO1lBQ2QsTUFBTSxFQUFFLEtBQUs7WUFDYixlQUFlLEVBQUUsZ0JBQWdCO1lBQ2pDLE9BQU8sRUFBRSxNQUFNO1lBQ2YsTUFBTSxFQUFFLE1BQU07U0FDZixDQUFDO1FBQ0YsY0FBUSxHQUE0QjtZQUNsQyxRQUFRLEVBQUUsVUFBVTtZQUNwQixHQUFHLEVBQUUsS0FBSztZQUNWLElBQUksRUFBRSxLQUFLO1lBQ1gsUUFBUSxFQUFFLE1BQU07WUFDaEIsS0FBSyxFQUFFLFNBQVM7WUFDaEIsZ0JBQWdCLEVBQUUsWUFBWTtTQUMvQixDQUFDOztLQUdEOzs7OztJQUNELDZDQUFpQjs7OztJQUFqQixVQUFrQixFQUFnQjtZQUFkLGNBQUksRUFBRSxrQkFBTTtRQUM5QixJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksRUFBRSxNQUFNLENBQUMsQ0FBQztLQUNqQzs7Ozs7SUFDRCw2Q0FBaUI7Ozs7SUFBakIsVUFBa0IsRUFBZ0I7WUFBZCxjQUFJLEVBQUUsa0JBQU07UUFDOUIsSUFBSSxJQUFJLENBQUMsR0FBRyxFQUFFO1lBQ1osSUFBSSxVQUFVLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFO2dCQUN4QixJQUFJLENBQUMsaUJBQWlCLENBQUM7b0JBQ3JCLElBQUksRUFBRTt3QkFDSixHQUFHLEVBQUUsSUFBSSxDQUFDLEdBQUc7d0JBQ2IsTUFBTSxFQUFFLEtBQUs7cUJBQ2Q7b0JBQ0QsTUFBTSxRQUFBO2lCQUNQLENBQUMsQ0FBQzthQUNKO1NBQ0Y7YUFBTSxJQUFJLElBQUksQ0FBQyxDQUFDLElBQUksSUFBSSxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsQ0FBQyxFQUFFO1lBQ3JDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQztnQkFDckIsSUFBSSxFQUFFO29CQUNKLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQyxJQUFJLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztvQkFDdkIsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDLElBQUksSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO29CQUN2QixDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7b0JBQ3ZCLE1BQU0sRUFBRSxLQUFLO2lCQUNkO2dCQUNELE1BQU0sUUFBQTthQUNQLENBQUMsQ0FBQztTQUNKO0tBQ0Y7Ozs7SUFDRCw0Q0FBZ0I7OztJQUFoQjtRQUNFLElBQUksQ0FBQyxRQUFRLENBQUMscUJBQXFCLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDO0tBQ2pEOztnQkEzSEYsU0FBUyxTQUFDO29CQUNULFFBQVEsRUFBRSxnQkFBZ0I7b0JBQzFCLFFBQVEsRUFBRSxrcENBNkJUO29CQW9CRCxlQUFlLEVBQUUsdUJBQXVCLENBQUMsTUFBTTtvQkFDL0MsbUJBQW1CLEVBQUUsS0FBSzs2QkFuQnhCLDZSQWdCRDtpQkFJRjs7OztJQXVFRCx3QkFBQztDQUFBLENBdEVzQyxTQUFTLEdBc0UvQzs7SUFFRDtLQUtvQzs7Z0JBTG5DLFFBQVEsU0FBQztvQkFDUixPQUFPLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQztvQkFDNUIsWUFBWSxFQUFFLENBQUMsaUJBQWlCLENBQUM7b0JBQ2pDLE9BQU8sRUFBRSxDQUFDLFlBQVksRUFBRSxtQkFBbUIsRUFBRSxZQUFZLENBQUM7aUJBQzNEOztJQUNrQywwQkFBQztDQUxwQzs7Ozs7Ozs7OyJ9