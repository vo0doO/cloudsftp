import { CommonModule } from '@angular/common';
import { ChangeDetectionStrategy, Component, Input, NgModule } from '@angular/core';
import { AlphaModule, CheckboardModule, ColorWrap, toState } from 'ngx-color';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
class AlphaPickerComponent extends ColorWrap {
    constructor() {
        super();
        /**
         * Pixel value for picker width
         */
        this.width = 316;
        /**
         * Pixel value for picker height
         */
        this.height = 16;
        this.direction = 'horizontal';
        this.pointer = {
            width: '18px',
            height: '18px',
            borderRadius: '50%',
            transform: 'translate(-9px, -2px)',
            boxShadow: '0 1px 4px 0 rgba(0, 0, 0, 0.37)',
        };
    }
    /**
     * @return {?}
     */
    ngOnChanges() {
        if (this.direction === 'vertical') {
            this.pointer.transform = 'translate(-3px, -9px)';
        }
        this.setState(toState(this.color, this.oldHue));
    }
    /**
     * @param {?} __0
     * @return {?}
     */
    handlePickerChange({ data, $event }) {
        this.handleChange(data, $event);
    }
}
AlphaPickerComponent.decorators = [
    { type: Component, args: [{
                selector: 'color-alpha-picker',
                template: `
    <div class="alpha-picker {{ className }}"
      [style.width.px]="width" [style.height.px]="height">
      <color-alpha
        [hsl]="hsl"
        [rgb]="rgb"
        [pointer]="pointer"
        [direction]="direction"
        (onChange)="handlePickerChange($event)"
      ></color-alpha>
    </div>
  `,
                changeDetection: ChangeDetectionStrategy.OnPush,
                preserveWhitespaces: false,
                styles: [`
    .alpha-picker {
      position: relative;
    }
    .color-alpha {
      radius: 2px;
    }
  `]
            }] }
];
/** @nocollapse */
AlphaPickerComponent.ctorParameters = () => [];
AlphaPickerComponent.propDecorators = {
    width: [{ type: Input }],
    height: [{ type: Input }],
    direction: [{ type: Input }]
};
class ColorAlphaModule {
}
ColorAlphaModule.decorators = [
    { type: NgModule, args: [{
                declarations: [AlphaPickerComponent],
                exports: [AlphaPickerComponent],
                imports: [CommonModule, AlphaModule, CheckboardModule],
            },] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */

export { AlphaPickerComponent, ColorAlphaModule };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LWNvbG9yLWFscGhhLmpzLm1hcCIsInNvdXJjZXMiOlsibmc6Ly9uZ3gtY29sb3IvYWxwaGEvYWxwaGEtcGlja2VyLmNvbXBvbmVudC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21tb25Nb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuaW1wb3J0IHtcbiAgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksXG4gIENvbXBvbmVudCxcbiAgSW5wdXQsXG4gIE5nTW9kdWxlLFxuICBPbkNoYW5nZXMsXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBBbHBoYU1vZHVsZSwgQ2hlY2tib2FyZE1vZHVsZSwgQ29sb3JXcmFwIH0gZnJvbSAnbmd4LWNvbG9yJztcbmltcG9ydCB7IHRvU3RhdGUgfSBmcm9tICduZ3gtY29sb3InO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdjb2xvci1hbHBoYS1waWNrZXInLFxuICB0ZW1wbGF0ZTogYFxuICAgIDxkaXYgY2xhc3M9XCJhbHBoYS1waWNrZXIge3sgY2xhc3NOYW1lIH19XCJcbiAgICAgIFtzdHlsZS53aWR0aC5weF09XCJ3aWR0aFwiIFtzdHlsZS5oZWlnaHQucHhdPVwiaGVpZ2h0XCI+XG4gICAgICA8Y29sb3ItYWxwaGFcbiAgICAgICAgW2hzbF09XCJoc2xcIlxuICAgICAgICBbcmdiXT1cInJnYlwiXG4gICAgICAgIFtwb2ludGVyXT1cInBvaW50ZXJcIlxuICAgICAgICBbZGlyZWN0aW9uXT1cImRpcmVjdGlvblwiXG4gICAgICAgIChvbkNoYW5nZSk9XCJoYW5kbGVQaWNrZXJDaGFuZ2UoJGV2ZW50KVwiXG4gICAgICA+PC9jb2xvci1hbHBoYT5cbiAgICA8L2Rpdj5cbiAgYCxcbiAgc3R5bGVzOiBbXG4gICAgYFxuICAgIC5hbHBoYS1waWNrZXIge1xuICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgIH1cbiAgICAuY29sb3ItYWxwaGEge1xuICAgICAgcmFkaXVzOiAycHg7XG4gICAgfVxuICBgLFxuICBdLFxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcbiAgcHJlc2VydmVXaGl0ZXNwYWNlczogZmFsc2UsXG59KVxuZXhwb3J0IGNsYXNzIEFscGhhUGlja2VyQ29tcG9uZW50IGV4dGVuZHMgQ29sb3JXcmFwIGltcGxlbWVudHMgT25DaGFuZ2VzIHtcbiAgLyoqIFBpeGVsIHZhbHVlIGZvciBwaWNrZXIgd2lkdGggKi9cbiAgQElucHV0KCkgd2lkdGg6IHN0cmluZyB8IG51bWJlciA9IDMxNjtcbiAgLyoqIFBpeGVsIHZhbHVlIGZvciBwaWNrZXIgaGVpZ2h0ICovXG4gIEBJbnB1dCgpIGhlaWdodDogc3RyaW5nIHwgbnVtYmVyID0gMTY7XG4gIEBJbnB1dCgpIGRpcmVjdGlvbjogJ2hvcml6b250YWwnIHwgJ3ZlcnRpY2FsJyA9ICdob3Jpem9udGFsJztcbiAgcG9pbnRlcjoge1trZXk6IHN0cmluZ106IHN0cmluZ30gPSB7XG4gICAgd2lkdGg6ICcxOHB4JyxcbiAgICBoZWlnaHQ6ICcxOHB4JyxcbiAgICBib3JkZXJSYWRpdXM6ICc1MCUnLFxuICAgIHRyYW5zZm9ybTogJ3RyYW5zbGF0ZSgtOXB4LCAtMnB4KScsXG4gICAgYm94U2hhZG93OiAnMCAxcHggNHB4IDAgcmdiYSgwLCAwLCAwLCAwLjM3KScsXG4gIH07XG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoKTtcbiAgfVxuICBuZ09uQ2hhbmdlcygpIHtcbiAgICBpZiAodGhpcy5kaXJlY3Rpb24gPT09ICd2ZXJ0aWNhbCcpIHtcbiAgICAgIHRoaXMucG9pbnRlci50cmFuc2Zvcm0gPSAndHJhbnNsYXRlKC0zcHgsIC05cHgpJztcbiAgICB9XG4gICAgdGhpcy5zZXRTdGF0ZSh0b1N0YXRlKHRoaXMuY29sb3IsIHRoaXMub2xkSHVlKSk7XG4gIH1cbiAgaGFuZGxlUGlja2VyQ2hhbmdlKHsgZGF0YSwgJGV2ZW50IH0pIHtcbiAgICB0aGlzLmhhbmRsZUNoYW5nZShkYXRhLCAkZXZlbnQpO1xuICB9XG59XG5cbkBOZ01vZHVsZSh7XG4gIGRlY2xhcmF0aW9uczogW0FscGhhUGlja2VyQ29tcG9uZW50XSxcbiAgZXhwb3J0czogW0FscGhhUGlja2VyQ29tcG9uZW50XSxcbiAgaW1wb3J0czogW0NvbW1vbk1vZHVsZSwgQWxwaGFNb2R1bGUsIENoZWNrYm9hcmRNb2R1bGVdLFxufSlcbmV4cG9ydCBjbGFzcyBDb2xvckFscGhhTW9kdWxlIHt9XG4iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBQSxNQXVDYSxvQkFBcUIsU0FBUSxTQUFTO0lBY2pEO1FBQ0UsS0FBSyxFQUFFLENBQUM7Ozs7UUFiRCxVQUFLLEdBQW9CLEdBQUcsQ0FBQzs7OztRQUU3QixXQUFNLEdBQW9CLEVBQUUsQ0FBQztRQUM3QixjQUFTLEdBQThCLFlBQVksQ0FBQztRQUM3RCxZQUFPLEdBQTRCO1lBQ2pDLEtBQUssRUFBRSxNQUFNO1lBQ2IsTUFBTSxFQUFFLE1BQU07WUFDZCxZQUFZLEVBQUUsS0FBSztZQUNuQixTQUFTLEVBQUUsdUJBQXVCO1lBQ2xDLFNBQVMsRUFBRSxpQ0FBaUM7U0FDN0MsQ0FBQztLQUlEOzs7O0lBQ0QsV0FBVztRQUNULElBQUksSUFBSSxDQUFDLFNBQVMsS0FBSyxVQUFVLEVBQUU7WUFDakMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxTQUFTLEdBQUcsdUJBQXVCLENBQUM7U0FDbEQ7UUFDRCxJQUFJLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO0tBQ2pEOzs7OztJQUNELGtCQUFrQixDQUFDLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRTtRQUNqQyxJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksRUFBRSxNQUFNLENBQUMsQ0FBQztLQUNqQzs7O1lBcERGLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUsb0JBQW9CO2dCQUM5QixRQUFRLEVBQUU7Ozs7Ozs7Ozs7O0dBV1Q7Z0JBV0QsZUFBZSxFQUFFLHVCQUF1QixDQUFDLE1BQU07Z0JBQy9DLG1CQUFtQixFQUFFLEtBQUs7eUJBVnhCOzs7Ozs7O0dBT0Q7YUFJRjs7Ozs7b0JBR0UsS0FBSztxQkFFTCxLQUFLO3dCQUNMLEtBQUs7O01BNEJLLGdCQUFnQjs7O1lBTDVCLFFBQVEsU0FBQztnQkFDUixZQUFZLEVBQUUsQ0FBQyxvQkFBb0IsQ0FBQztnQkFDcEMsT0FBTyxFQUFFLENBQUMsb0JBQW9CLENBQUM7Z0JBQy9CLE9BQU8sRUFBRSxDQUFDLFlBQVksRUFBRSxXQUFXLEVBQUUsZ0JBQWdCLENBQUM7YUFDdkQ7Ozs7Ozs7Ozs7In0=