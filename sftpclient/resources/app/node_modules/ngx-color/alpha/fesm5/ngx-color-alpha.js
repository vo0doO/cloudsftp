import { __extends } from 'tslib';
import { CommonModule } from '@angular/common';
import { ChangeDetectionStrategy, Component, Input, NgModule } from '@angular/core';
import { AlphaModule, CheckboardModule, ColorWrap, toState } from 'ngx-color';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var AlphaPickerComponent = /** @class */ (function (_super) {
    __extends(AlphaPickerComponent, _super);
    function AlphaPickerComponent() {
        var _this = _super.call(this) || this;
        /**
         * Pixel value for picker width
         */
        _this.width = 316;
        /**
         * Pixel value for picker height
         */
        _this.height = 16;
        _this.direction = 'horizontal';
        _this.pointer = {
            width: '18px',
            height: '18px',
            borderRadius: '50%',
            transform: 'translate(-9px, -2px)',
            boxShadow: '0 1px 4px 0 rgba(0, 0, 0, 0.37)',
        };
        return _this;
    }
    /**
     * @return {?}
     */
    AlphaPickerComponent.prototype.ngOnChanges = /**
     * @return {?}
     */
    function () {
        if (this.direction === 'vertical') {
            this.pointer.transform = 'translate(-3px, -9px)';
        }
        this.setState(toState(this.color, this.oldHue));
    };
    /**
     * @param {?} __0
     * @return {?}
     */
    AlphaPickerComponent.prototype.handlePickerChange = /**
     * @param {?} __0
     * @return {?}
     */
    function (_a) {
        var data = _a.data, $event = _a.$event;
        this.handleChange(data, $event);
    };
    AlphaPickerComponent.decorators = [
        { type: Component, args: [{
                    selector: 'color-alpha-picker',
                    template: "\n    <div class=\"alpha-picker {{ className }}\"\n      [style.width.px]=\"width\" [style.height.px]=\"height\">\n      <color-alpha\n        [hsl]=\"hsl\"\n        [rgb]=\"rgb\"\n        [pointer]=\"pointer\"\n        [direction]=\"direction\"\n        (onChange)=\"handlePickerChange($event)\"\n      ></color-alpha>\n    </div>\n  ",
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    preserveWhitespaces: false,
                    styles: ["\n    .alpha-picker {\n      position: relative;\n    }\n    .color-alpha {\n      radius: 2px;\n    }\n  "]
                }] }
    ];
    /** @nocollapse */
    AlphaPickerComponent.ctorParameters = function () { return []; };
    AlphaPickerComponent.propDecorators = {
        width: [{ type: Input }],
        height: [{ type: Input }],
        direction: [{ type: Input }]
    };
    return AlphaPickerComponent;
}(ColorWrap));
var ColorAlphaModule = /** @class */ (function () {
    function ColorAlphaModule() {
    }
    ColorAlphaModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [AlphaPickerComponent],
                    exports: [AlphaPickerComponent],
                    imports: [CommonModule, AlphaModule, CheckboardModule],
                },] }
    ];
    return ColorAlphaModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */

export { AlphaPickerComponent, ColorAlphaModule };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LWNvbG9yLWFscGhhLmpzLm1hcCIsInNvdXJjZXMiOlsibmc6Ly9uZ3gtY29sb3IvYWxwaGEvYWxwaGEtcGlja2VyLmNvbXBvbmVudC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21tb25Nb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuaW1wb3J0IHtcbiAgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksXG4gIENvbXBvbmVudCxcbiAgSW5wdXQsXG4gIE5nTW9kdWxlLFxuICBPbkNoYW5nZXMsXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBBbHBoYU1vZHVsZSwgQ2hlY2tib2FyZE1vZHVsZSwgQ29sb3JXcmFwIH0gZnJvbSAnbmd4LWNvbG9yJztcbmltcG9ydCB7IHRvU3RhdGUgfSBmcm9tICduZ3gtY29sb3InO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdjb2xvci1hbHBoYS1waWNrZXInLFxuICB0ZW1wbGF0ZTogYFxuICAgIDxkaXYgY2xhc3M9XCJhbHBoYS1waWNrZXIge3sgY2xhc3NOYW1lIH19XCJcbiAgICAgIFtzdHlsZS53aWR0aC5weF09XCJ3aWR0aFwiIFtzdHlsZS5oZWlnaHQucHhdPVwiaGVpZ2h0XCI+XG4gICAgICA8Y29sb3ItYWxwaGFcbiAgICAgICAgW2hzbF09XCJoc2xcIlxuICAgICAgICBbcmdiXT1cInJnYlwiXG4gICAgICAgIFtwb2ludGVyXT1cInBvaW50ZXJcIlxuICAgICAgICBbZGlyZWN0aW9uXT1cImRpcmVjdGlvblwiXG4gICAgICAgIChvbkNoYW5nZSk9XCJoYW5kbGVQaWNrZXJDaGFuZ2UoJGV2ZW50KVwiXG4gICAgICA+PC9jb2xvci1hbHBoYT5cbiAgICA8L2Rpdj5cbiAgYCxcbiAgc3R5bGVzOiBbXG4gICAgYFxuICAgIC5hbHBoYS1waWNrZXIge1xuICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgIH1cbiAgICAuY29sb3ItYWxwaGEge1xuICAgICAgcmFkaXVzOiAycHg7XG4gICAgfVxuICBgLFxuICBdLFxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcbiAgcHJlc2VydmVXaGl0ZXNwYWNlczogZmFsc2UsXG59KVxuZXhwb3J0IGNsYXNzIEFscGhhUGlja2VyQ29tcG9uZW50IGV4dGVuZHMgQ29sb3JXcmFwIGltcGxlbWVudHMgT25DaGFuZ2VzIHtcbiAgLyoqIFBpeGVsIHZhbHVlIGZvciBwaWNrZXIgd2lkdGggKi9cbiAgQElucHV0KCkgd2lkdGg6IHN0cmluZyB8IG51bWJlciA9IDMxNjtcbiAgLyoqIFBpeGVsIHZhbHVlIGZvciBwaWNrZXIgaGVpZ2h0ICovXG4gIEBJbnB1dCgpIGhlaWdodDogc3RyaW5nIHwgbnVtYmVyID0gMTY7XG4gIEBJbnB1dCgpIGRpcmVjdGlvbjogJ2hvcml6b250YWwnIHwgJ3ZlcnRpY2FsJyA9ICdob3Jpem9udGFsJztcbiAgcG9pbnRlcjoge1trZXk6IHN0cmluZ106IHN0cmluZ30gPSB7XG4gICAgd2lkdGg6ICcxOHB4JyxcbiAgICBoZWlnaHQ6ICcxOHB4JyxcbiAgICBib3JkZXJSYWRpdXM6ICc1MCUnLFxuICAgIHRyYW5zZm9ybTogJ3RyYW5zbGF0ZSgtOXB4LCAtMnB4KScsXG4gICAgYm94U2hhZG93OiAnMCAxcHggNHB4IDAgcmdiYSgwLCAwLCAwLCAwLjM3KScsXG4gIH07XG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoKTtcbiAgfVxuICBuZ09uQ2hhbmdlcygpIHtcbiAgICBpZiAodGhpcy5kaXJlY3Rpb24gPT09ICd2ZXJ0aWNhbCcpIHtcbiAgICAgIHRoaXMucG9pbnRlci50cmFuc2Zvcm0gPSAndHJhbnNsYXRlKC0zcHgsIC05cHgpJztcbiAgICB9XG4gICAgdGhpcy5zZXRTdGF0ZSh0b1N0YXRlKHRoaXMuY29sb3IsIHRoaXMub2xkSHVlKSk7XG4gIH1cbiAgaGFuZGxlUGlja2VyQ2hhbmdlKHsgZGF0YSwgJGV2ZW50IH0pIHtcbiAgICB0aGlzLmhhbmRsZUNoYW5nZShkYXRhLCAkZXZlbnQpO1xuICB9XG59XG5cbkBOZ01vZHVsZSh7XG4gIGRlY2xhcmF0aW9uczogW0FscGhhUGlja2VyQ29tcG9uZW50XSxcbiAgZXhwb3J0czogW0FscGhhUGlja2VyQ29tcG9uZW50XSxcbiAgaW1wb3J0czogW0NvbW1vbk1vZHVsZSwgQWxwaGFNb2R1bGUsIENoZWNrYm9hcmRNb2R1bGVdLFxufSlcbmV4cG9ydCBjbGFzcyBDb2xvckFscGhhTW9kdWxlIHt9XG4iXSwibmFtZXMiOlsidHNsaWJfMS5fX2V4dGVuZHMiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7SUF1QzBDQSx3Q0FBUztJQWNqRDtRQUFBLFlBQ0UsaUJBQU8sU0FDUjs7OztRQWRRLFdBQUssR0FBb0IsR0FBRyxDQUFDOzs7O1FBRTdCLFlBQU0sR0FBb0IsRUFBRSxDQUFDO1FBQzdCLGVBQVMsR0FBOEIsWUFBWSxDQUFDO1FBQzdELGFBQU8sR0FBNEI7WUFDakMsS0FBSyxFQUFFLE1BQU07WUFDYixNQUFNLEVBQUUsTUFBTTtZQUNkLFlBQVksRUFBRSxLQUFLO1lBQ25CLFNBQVMsRUFBRSx1QkFBdUI7WUFDbEMsU0FBUyxFQUFFLGlDQUFpQztTQUM3QyxDQUFDOztLQUlEOzs7O0lBQ0QsMENBQVc7OztJQUFYO1FBQ0UsSUFBSSxJQUFJLENBQUMsU0FBUyxLQUFLLFVBQVUsRUFBRTtZQUNqQyxJQUFJLENBQUMsT0FBTyxDQUFDLFNBQVMsR0FBRyx1QkFBdUIsQ0FBQztTQUNsRDtRQUNELElBQUksQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7S0FDakQ7Ozs7O0lBQ0QsaURBQWtCOzs7O0lBQWxCLFVBQW1CLEVBQWdCO1lBQWQsY0FBSSxFQUFFLGtCQUFNO1FBQy9CLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxFQUFFLE1BQU0sQ0FBQyxDQUFDO0tBQ2pDOztnQkFwREYsU0FBUyxTQUFDO29CQUNULFFBQVEsRUFBRSxvQkFBb0I7b0JBQzlCLFFBQVEsRUFBRSxpVkFXVDtvQkFXRCxlQUFlLEVBQUUsdUJBQXVCLENBQUMsTUFBTTtvQkFDL0MsbUJBQW1CLEVBQUUsS0FBSzs2QkFWeEIsNEdBT0Q7aUJBSUY7Ozs7O3dCQUdFLEtBQUs7eUJBRUwsS0FBSzs0QkFDTCxLQUFLOztJQXFCUiwyQkFBQztDQUFBLENBMUJ5QyxTQUFTLEdBMEJsRDs7SUFFRDtLQUtnQzs7Z0JBTC9CLFFBQVEsU0FBQztvQkFDUixZQUFZLEVBQUUsQ0FBQyxvQkFBb0IsQ0FBQztvQkFDcEMsT0FBTyxFQUFFLENBQUMsb0JBQW9CLENBQUM7b0JBQy9CLE9BQU8sRUFBRSxDQUFDLFlBQVksRUFBRSxXQUFXLEVBQUUsZ0JBQWdCLENBQUM7aUJBQ3ZEOztJQUM4Qix1QkFBQztDQUxoQzs7Ozs7Ozs7OyJ9