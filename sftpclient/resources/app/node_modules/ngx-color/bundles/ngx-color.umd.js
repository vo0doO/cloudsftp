(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/common'), require('@angular/core'), require('rxjs'), require('rxjs/operators'), require('tinycolor2')) :
    typeof define === 'function' && define.amd ? define('ngx-color', ['exports', '@angular/common', '@angular/core', 'rxjs', 'rxjs/operators', 'tinycolor2'], factory) :
    (factory((global['ngx-color'] = {}),global.ng.common,global.ng.core,global.rxjs,global.rxjs.operators,global.tinycolor2));
}(this, (function (exports,common,core,rxjs,operators,_tinycolor) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /** @type {?} */
    var checkboardCache = {};
    /**
     * @param {?} c1
     * @param {?} c2
     * @param {?} size
     * @return {?}
     */
    function render(c1, c2, size) {
        if (typeof document === 'undefined') {
            return null;
        }
        /** @type {?} */
        var canvas = document.createElement('canvas');
        canvas.width = size * 2;
        canvas.height = size * 2;
        /** @type {?} */
        var ctx = canvas.getContext('2d');
        if (!ctx) {
            return null;
        } // If no context can be found, return early.
        ctx.fillStyle = c1;
        ctx.fillRect(0, 0, canvas.width, canvas.height);
        ctx.fillStyle = c2;
        ctx.fillRect(0, 0, size, size);
        ctx.translate(size, size);
        ctx.fillRect(0, 0, size, size);
        return canvas.toDataURL();
    }
    /**
     * @param {?} c1
     * @param {?} c2
     * @param {?} size
     * @return {?}
     */
    function getCheckerboard(c1, c2, size) {
        /** @type {?} */
        var key = c1 + "-" + c2 + "-" + size;
        if (checkboardCache[key]) {
            return checkboardCache[key];
        }
        /** @type {?} */
        var checkboard = render(c1, c2, size);
        if (!checkboard) {
            return null;
        }
        checkboardCache[key] = checkboard;
        return checkboard;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var CheckboardComponent = /** @class */ (function () {
        function CheckboardComponent() {
            this.white = 'transparent';
            this.size = 8;
            this.grey = 'rgba(0,0,0,.08)';
        }
        /**
         * @return {?}
         */
        CheckboardComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                /** @type {?} */
                var background = getCheckerboard(this.white, this.grey, this.size);
                this.gridStyles = {
                    borderRadius: this.borderRadius,
                    boxShadow: this.boxShadow,
                    background: "url(" + background + ") center left",
                };
            };
        CheckboardComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'color-checkboard',
                        template: "<div class=\"grid\" [ngStyle]=\"gridStyles\"></div>",
                        preserveWhitespaces: false,
                        changeDetection: core.ChangeDetectionStrategy.OnPush,
                        styles: ["\n  .grid {\n    top: 0px;\n    right: 0px;\n    bottom: 0px;\n    left: 0px;\n    position: absolute;\n  }\n  "]
                    }] }
        ];
        CheckboardComponent.propDecorators = {
            white: [{ type: core.Input }],
            size: [{ type: core.Input }],
            grey: [{ type: core.Input }],
            boxShadow: [{ type: core.Input }],
            borderRadius: [{ type: core.Input }]
        };
        return CheckboardComponent;
    }());
    var CheckboardModule = /** @class */ (function () {
        function CheckboardModule() {
        }
        CheckboardModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [CheckboardComponent],
                        exports: [CheckboardComponent],
                        imports: [common.CommonModule],
                    },] }
        ];
        return CheckboardModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var CoordinatesDirective = /** @class */ (function () {
        function CoordinatesDirective(el) {
            this.el = el;
            this.coordinatesChange = new rxjs.Subject();
            this.mousechange = new rxjs.Subject();
            this.mouseListening = false;
        }
        /**
         * @param {?} $event
         * @param {?} x
         * @param {?} y
         * @param {?=} isTouch
         * @return {?}
         */
        CoordinatesDirective.prototype.mousemove = /**
         * @param {?} $event
         * @param {?} x
         * @param {?} y
         * @param {?=} isTouch
         * @return {?}
         */
            function ($event, x, y, isTouch) {
                if (isTouch === void 0) {
                    isTouch = false;
                }
                if (this.mouseListening) {
                    $event.preventDefault();
                    this.mousechange.next({ $event: $event, x: x, y: y, isTouch: isTouch });
                }
            };
        /**
         * @return {?}
         */
        CoordinatesDirective.prototype.mouseup = /**
         * @return {?}
         */
            function () {
                this.mouseListening = false;
            };
        /**
         * @param {?} $event
         * @param {?} x
         * @param {?} y
         * @param {?=} isTouch
         * @return {?}
         */
        CoordinatesDirective.prototype.mousedown = /**
         * @param {?} $event
         * @param {?} x
         * @param {?} y
         * @param {?=} isTouch
         * @return {?}
         */
            function ($event, x, y, isTouch) {
                if (isTouch === void 0) {
                    isTouch = false;
                }
                $event.preventDefault();
                this.mouseListening = true;
                this.mousechange.next({ $event: $event, x: x, y: y, isTouch: isTouch });
            };
        /**
         * @return {?}
         */
        CoordinatesDirective.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                var _this = this;
                this.sub = this.mousechange
                    .pipe(
                // limit times it is updated for the same area
                operators.distinctUntilChanged(function (p, q) { return p.x === q.x && p.y === q.y; }))
                    .subscribe(function (n) { return _this.handleChange(n.x, n.y, n.$event, n.isTouch); });
            };
        /**
         * @return {?}
         */
        CoordinatesDirective.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                this.sub.unsubscribe();
            };
        /**
         * @param {?} x
         * @param {?} y
         * @param {?} $event
         * @param {?} isTouch
         * @return {?}
         */
        CoordinatesDirective.prototype.handleChange = /**
         * @param {?} x
         * @param {?} y
         * @param {?} $event
         * @param {?} isTouch
         * @return {?}
         */
            function (x, y, $event, isTouch) {
                /** @type {?} */
                var containerWidth = this.el.nativeElement.clientWidth;
                /** @type {?} */
                var containerHeight = this.el.nativeElement.clientHeight;
                /** @type {?} */
                var left = x -
                    (this.el.nativeElement.getBoundingClientRect().left + window.pageXOffset);
                /** @type {?} */
                var top = y - this.el.nativeElement.getBoundingClientRect().top;
                if (!isTouch) {
                    top = top - window.pageYOffset;
                }
                this.coordinatesChange.next({
                    x: x,
                    y: y,
                    top: top,
                    left: left,
                    containerWidth: containerWidth,
                    containerHeight: containerHeight,
                    $event: $event,
                });
            };
        CoordinatesDirective.decorators = [
            { type: core.Directive, args: [{ selector: '[ngx-color-coordinates]' },] }
        ];
        /** @nocollapse */
        CoordinatesDirective.ctorParameters = function () {
            return [
                { type: core.ElementRef }
            ];
        };
        CoordinatesDirective.propDecorators = {
            coordinatesChange: [{ type: core.Output }],
            mousemove: [{ type: core.HostListener, args: ['window:mousemove', ['$event', '$event.pageX', '$event.pageY'],] }, { type: core.HostListener, args: ['window:touchmove', [
                            '$event',
                            '$event.touches[0].clientX',
                            '$event.touches[0].clientY',
                            'true',
                        ],] }],
            mouseup: [{ type: core.HostListener, args: ['window:mouseup',] }, { type: core.HostListener, args: ['window:touchend',] }],
            mousedown: [{ type: core.HostListener, args: ['mousedown', ['$event', '$event.pageX', '$event.pageY'],] }, { type: core.HostListener, args: ['touchstart', [
                            '$event',
                            '$event.touches[0].clientX',
                            '$event.touches[0].clientY',
                            'true',
                        ],] }]
        };
        return CoordinatesDirective;
    }());
    var CoordinatesModule = /** @class */ (function () {
        function CoordinatesModule() {
        }
        CoordinatesModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [CoordinatesDirective],
                        exports: [CoordinatesDirective],
                    },] }
        ];
        return CoordinatesModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var AlphaComponent = /** @class */ (function () {
        function AlphaComponent() {
            this.direction = 'horizontal';
            this.onChange = new core.EventEmitter();
        }
        /**
         * @return {?}
         */
        AlphaComponent.prototype.ngOnChanges = /**
         * @return {?}
         */
            function () {
                if (this.direction === 'vertical') {
                    this.pointerLeft = 0;
                    this.pointerTop = this.rgb.a * 100;
                    this.gradient = {
                        background: "linear-gradient(to bottom, rgba(" + this.rgb.r + "," + this.rgb.g + "," + this.rgb.b + ", 0) 0%,\n          rgba(" + this.rgb.r + "," + this.rgb.g + "," + this.rgb.b + ", 1) 100%)",
                    };
                }
                else {
                    this.gradient = {
                        background: "linear-gradient(to right, rgba(" + this.rgb.r + "," + this.rgb.g + "," + this.rgb.b + ", 0) 0%,\n          rgba(" + this.rgb.r + "," + this.rgb.g + "," + this.rgb.b + ", 1) 100%)",
                    };
                    this.pointerLeft = this.rgb.a * 100;
                }
            };
        /**
         * @param {?} __0
         * @return {?}
         */
        AlphaComponent.prototype.handleChange = /**
         * @param {?} __0
         * @return {?}
         */
            function (_a) {
                var top = _a.top, left = _a.left, containerHeight = _a.containerHeight, containerWidth = _a.containerWidth, $event = _a.$event;
                /** @type {?} */
                var data;
                if (this.direction === 'vertical') {
                    /** @type {?} */
                    var a = void 0;
                    if (top < 0) {
                        a = 0;
                    }
                    else if (top > containerHeight) {
                        a = 1;
                    }
                    else {
                        a = Math.round(top * 100 / containerHeight) / 100;
                    }
                    if (this.hsl.a !== a) {
                        data = {
                            h: this.hsl.h,
                            s: this.hsl.s,
                            l: this.hsl.l,
                            a: a,
                            source: 'rgb',
                        };
                    }
                }
                else {
                    /** @type {?} */
                    var a = void 0;
                    if (left < 0) {
                        a = 0;
                    }
                    else if (left > containerWidth) {
                        a = 1;
                    }
                    else {
                        a = Math.round(left * 100 / containerWidth) / 100;
                    }
                    if (this.hsl.a !== a) {
                        data = {
                            h: this.hsl.h,
                            s: this.hsl.s,
                            l: this.hsl.l,
                            a: a,
                            source: 'rgb',
                        };
                    }
                }
                if (!data) {
                    return null;
                }
                this.onChange.emit({ data: data, $event: $event });
            };
        AlphaComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'color-alpha',
                        template: "\n  <div class=\"alpha\" [style.border-radius]=\"radius\">\n    <div class=\"alpha-checkboard\">\n      <color-checkboard></color-checkboard>\n    </div>\n    <div class=\"alpha-gradient\" [ngStyle]=\"gradient\" [style.box-shadow]=\"shadow\" [style.border-radius]=\"radius\"></div>\n    <div ngx-color-coordinates (coordinatesChange)=\"handleChange($event)\" class=\"alpha-container color-alpha-{{direction}}\">\n      <div class=\"alpha-pointer\" [style.left.%]=\"pointerLeft\" [style.top.%]=\"pointerTop\">\n        <div class=\"alpha-slider\" [ngStyle]=\"pointer\"></div>\n      </div>\n    </div>\n  </div>\n  ",
                        changeDetection: core.ChangeDetectionStrategy.OnPush,
                        preserveWhitespaces: false,
                        styles: ["\n    .alpha {\n      position: absolute;\n      top: 0;\n      bottom: 0;\n      left: 0;\n      right: 0;\n    }\n    .alpha-checkboard {\n      position: absolute;\n      top: 0;\n      bottom: 0;\n      left: 0;\n      right: 0;\n      overflow: hidden;\n    }\n    .alpha-gradient {\n      position: absolute;\n      top: 0;\n      bottom: 0;\n      left: 0;\n      right: 0;\n    }\n    .alpha-container {\n      position: relative;\n      height: 100%;\n      margin: 0 3px;\n    }\n    .alpha-pointer {\n      position: absolute;\n    }\n    .alpha-slider {\n      width: 4px;\n      border-radius: 1px;\n      height: 8px;\n      box-shadow: 0 0 2px rgba(0, 0, 0, .6);\n      background: #fff;\n      margin-top: 1px;\n      transform: translateX(-2px);\n    },\n  "]
                    }] }
        ];
        AlphaComponent.propDecorators = {
            hsl: [{ type: core.Input }],
            rgb: [{ type: core.Input }],
            pointer: [{ type: core.Input }],
            shadow: [{ type: core.Input }],
            radius: [{ type: core.Input }],
            direction: [{ type: core.Input }],
            onChange: [{ type: core.Output }]
        };
        return AlphaComponent;
    }());
    var AlphaModule = /** @class */ (function () {
        function AlphaModule() {
        }
        AlphaModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [AlphaComponent],
                        exports: [AlphaComponent],
                        imports: [common.CommonModule, CheckboardModule, CoordinatesModule],
                    },] }
        ];
        return AlphaModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /** @type {?} */
    var tinycolor = _tinycolor;
    /**
     * @param {?} data
     * @return {?}
     */
    function simpleCheckForValidColor(data) {
        /** @type {?} */
        var keysToCheck = ['r', 'g', 'b', 'a', 'h', 's', 'l', 'v'];
        /** @type {?} */
        var checked = 0;
        /** @type {?} */
        var passed = 0;
        keysToCheck.forEach(function (letter) {
            if (!data[letter]) {
                return;
            }
            checked += 1;
            if (!isNaN(data[letter])) {
                passed += 1;
            }
            if (letter === 's' || letter === 'l') {
                /** @type {?} */
                var percentPatt = /^\d+%$/;
                if (percentPatt.test(data[letter])) {
                    passed += 1;
                }
            }
        });
        return checked === passed ? data : false;
    }
    /**
     * @param {?} data
     * @param {?=} oldHue
     * @return {?}
     */
    function toState(data, oldHue) {
        /** @type {?} */
        var color = data.hex ? tinycolor(data.hex) : tinycolor(data);
        /** @type {?} */
        var hsl = color.toHsl();
        /** @type {?} */
        var hsv = color.toHsv();
        /** @type {?} */
        var rgb = color.toRgb();
        /** @type {?} */
        var hex = color.toHex();
        if (hsl.s === 0) {
            hsl.h = oldHue || 0;
            hsv.h = oldHue || 0;
        }
        /** @type {?} */
        var transparent = hex === '000000' && rgb.a === 0;
        return {
            hsl: hsl,
            hex: transparent ? 'transparent' : "#" + hex,
            rgb: rgb,
            hsv: hsv,
            oldHue: data.h || oldHue || hsl.h,
            source: data.source,
        };
    }
    /**
     * @param {?} hex
     * @return {?}
     */
    function isValidHex(hex) {
        return tinycolor(hex).isValid();
    }
    /**
     * @param {?} data
     * @return {?}
     */
    function getContrastingColor(data) {
        if (!data) {
            return '#fff';
        }
        /** @type {?} */
        var col = toState(data);
        if (col.hex === 'transparent') {
            return 'rgba(0,0,0,0.4)';
        }
        /** @type {?} */
        var yiq = (col.rgb.r * 299 + col.rgb.g * 587 + col.rgb.b * 114) / 1000;
        return yiq >= 128 ? '#000' : '#fff';
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var ColorWrap = /** @class */ (function () {
        function ColorWrap() {
            this.className = '';
            this.color = {
                h: 250,
                s: 0.5,
                l: 0.2,
                a: 1,
            };
            this.onChange = new core.EventEmitter();
            this.onChangeComplete = new core.EventEmitter();
            this.onSwatchHover = new core.EventEmitter();
        }
        /**
         * @return {?}
         */
        ColorWrap.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                var _this = this;
                this.changes = this.onChange.pipe(operators.debounceTime(100), operators.distinctUntilChanged())
                    .subscribe(function (x) { return _this.onChangeComplete.emit(x); });
                this.setState(toState(this.color, 0));
                this.currentColor = this.hex;
            };
        /**
         * @return {?}
         */
        ColorWrap.prototype.ngOnChanges = /**
         * @return {?}
         */
            function () {
                this.setState(toState(this.color, this.oldHue));
            };
        /**
         * @return {?}
         */
        ColorWrap.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                this.changes.unsubscribe();
            };
        /**
         * @param {?} data
         * @return {?}
         */
        ColorWrap.prototype.setState = /**
         * @param {?} data
         * @return {?}
         */
            function (data) {
                this.oldHue = data.oldHue;
                this.hsl = data.hsl;
                this.hsv = data.hsv;
                this.rgb = data.rgb;
                this.hex = data.hex;
                this.source = data.source;
                this.afterValidChange();
            };
        /**
         * @param {?} data
         * @param {?} $event
         * @return {?}
         */
        ColorWrap.prototype.handleChange = /**
         * @param {?} data
         * @param {?} $event
         * @return {?}
         */
            function (data, $event) {
                /** @type {?} */
                var isValidColor = simpleCheckForValidColor(data);
                if (isValidColor) {
                    /** @type {?} */
                    var color = toState(data, data.h || this.oldHue);
                    this.setState(color);
                    this.onChange.emit({ color: color, $event: $event });
                    this.afterValidChange();
                }
            };
        /** hook for components after a complete change */
        /**
         * hook for components after a complete change
         * @return {?}
         */
        ColorWrap.prototype.afterValidChange = /**
         * hook for components after a complete change
         * @return {?}
         */
            function () { };
        /**
         * @param {?} data
         * @param {?} $event
         * @return {?}
         */
        ColorWrap.prototype.handleSwatchHover = /**
         * @param {?} data
         * @param {?} $event
         * @return {?}
         */
            function (data, $event) {
                /** @type {?} */
                var isValidColor = simpleCheckForValidColor(data);
                if (isValidColor) {
                    /** @type {?} */
                    var color = toState(data, data.h || this.oldHue);
                    this.setState(color);
                    this.onSwatchHover.emit({ color: color, $event: $event });
                }
            };
        ColorWrap.decorators = [
            { type: core.Component, args: [{
                        // create seletor base for test override property
                        selector: 'color-wrap',
                        template: ""
                    }] }
        ];
        ColorWrap.propDecorators = {
            className: [{ type: core.Input }],
            color: [{ type: core.Input }],
            onChange: [{ type: core.Output }],
            onChangeComplete: [{ type: core.Output }],
            onSwatchHover: [{ type: core.Output }]
        };
        return ColorWrap;
    }());
    var ColorWrapModule = /** @class */ (function () {
        function ColorWrapModule() {
        }
        ColorWrapModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [ColorWrap],
                        exports: [ColorWrap],
                        imports: [common.CommonModule],
                    },] }
        ];
        return ColorWrapModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var EditableInputComponent = /** @class */ (function () {
        function EditableInputComponent() {
            this.placeholder = '';
            this.onChange = new core.EventEmitter();
            this.focus = false;
        }
        /**
         * @return {?}
         */
        EditableInputComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.wrapStyle = this.style && this.style.wrap ? this.style.wrap : {};
                this.inputStyle = this.style && this.style.input ? this.style.input : {};
                this.labelStyle = this.style && this.style.label ? this.style.label : {};
                if (this.dragLabel) {
                    this.labelStyle.cursor = 'ew-resize';
                }
            };
        /**
         * @param {?} $event
         * @return {?}
         */
        EditableInputComponent.prototype.handleFocus = /**
         * @param {?} $event
         * @return {?}
         */
            function ($event) {
                this.focus = true;
            };
        /**
         * @param {?} $event
         * @return {?}
         */
        EditableInputComponent.prototype.handleFocusOut = /**
         * @param {?} $event
         * @return {?}
         */
            function ($event) {
                this.focus = false;
                this.currentValue = this.blurValue;
            };
        /**
         * @param {?} $event
         * @return {?}
         */
        EditableInputComponent.prototype.handleKeydown = /**
         * @param {?} $event
         * @return {?}
         */
            function ($event) {
                var _a, _b;
                // In case `e.target.value` is a percentage remove the `%` character
                // and update accordingly with a percentage
                // https://github.com/casesandberg/react-color/issues/383
                /** @type {?} */
                var stringValue = String($event.target.value);
                /** @type {?} */
                var isPercentage = stringValue.indexOf('%') > -1;
                /** @type {?} */
                var number = Number(stringValue.replace(/%/g, ''));
                if (!isNaN(number)) {
                    /** @type {?} */
                    var amount = this.arrowOffset || 1;
                    // Up
                    if ($event.keyCode === 38) {
                        if (this.label) {
                            this.onChange.emit({
                                data: (_a = {}, _a[this.label] = number + amount, _a),
                                $event: $event,
                            });
                        }
                        else {
                            this.onChange.emit({ data: number + amount, $event: $event });
                        }
                        if (isPercentage) {
                            this.currentValue = number + amount + "%";
                        }
                        else {
                            this.currentValue = number + amount;
                        }
                    }
                    // Down
                    if ($event.keyCode === 40) {
                        if (this.label) {
                            this.onChange.emit({
                                data: (_b = {}, _b[this.label] = number - amount, _b),
                                $event: $event,
                            });
                        }
                        else {
                            this.onChange.emit({ data: number - amount, $event: $event });
                        }
                        if (isPercentage) {
                            this.currentValue = number - amount + "%";
                        }
                        else {
                            this.currentValue = number - amount;
                        }
                    }
                }
            };
        /**
         * @param {?} $event
         * @return {?}
         */
        EditableInputComponent.prototype.handleKeyup = /**
         * @param {?} $event
         * @return {?}
         */
            function ($event) {
                var _a;
                if ($event.keyCode === 40 || $event.keyCode === 38) {
                    return;
                }
                if (this.label) {
                    this.onChange.emit({
                        data: (_a = {}, _a[this.label] = $event.target.value, _a),
                        $event: $event,
                    });
                }
                else {
                    this.onChange.emit({ data: $event.target.value, $event: $event });
                }
            };
        /**
         * @return {?}
         */
        EditableInputComponent.prototype.ngOnChanges = /**
         * @return {?}
         */
            function () {
                if (!this.focus) {
                    this.currentValue = String(this.value).toUpperCase();
                    this.blurValue = String(this.value).toUpperCase();
                }
                else {
                    this.blurValue = String(this.value).toUpperCase();
                }
            };
        /**
         * @return {?}
         */
        EditableInputComponent.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                this.unsubscribe();
            };
        /**
         * @return {?}
         */
        EditableInputComponent.prototype.subscribe = /**
         * @return {?}
         */
            function () {
                var _this = this;
                this.mousemove = rxjs.fromEvent(document, 'mousemove').subscribe(function (ev) {
                    return _this.handleDrag(ev);
                });
                this.mouseup = rxjs.fromEvent(document, 'mouseup').subscribe(function () {
                    return _this.unsubscribe();
                });
            };
        /**
         * @return {?}
         */
        EditableInputComponent.prototype.unsubscribe = /**
         * @return {?}
         */
            function () {
                if (this.mousemove) {
                    this.mousemove.unsubscribe();
                }
                if (this.mouseup) {
                    this.mouseup.unsubscribe();
                }
            };
        /**
         * @param {?} $event
         * @return {?}
         */
        EditableInputComponent.prototype.handleMousedown = /**
         * @param {?} $event
         * @return {?}
         */
            function ($event) {
                if (this.dragLabel) {
                    $event.preventDefault();
                    this.handleDrag($event);
                    this.subscribe();
                }
            };
        /**
         * @param {?} $event
         * @return {?}
         */
        EditableInputComponent.prototype.handleDrag = /**
         * @param {?} $event
         * @return {?}
         */
            function ($event) {
                var _a;
                if (this.dragLabel) {
                    /** @type {?} */
                    var newValue = Math.round(this.value + $event.movementX);
                    if (newValue >= 0 && newValue <= this.dragMax) {
                        this.onChange.emit({ data: (_a = {}, _a[this.label] = newValue, _a), $event: $event });
                    }
                }
            };
        EditableInputComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'color-editable-input',
                        template: "\n  <div class=\"wrap\" [ngStyle]=\"wrapStyle\">\n    <input [ngStyle]=\"inputStyle\" spellCheck=\"false\"\n      [value]=\"currentValue\" [placeholder]=\"placeholder\"\n      (keydown)=\"handleKeydown($event)\" (keyup)=\"handleKeyup($event)\"\n      (focus)=\"handleFocus($event)\" (focusout)=\"handleFocusOut($event)\" />\n    <span *ngIf=\"label\" [ngStyle]=\"labelStyle\" (mousedown)=\"handleMousedown($event)\">\n      {{ label }}\n    </span>\n  </div>\n  ",
                        changeDetection: core.ChangeDetectionStrategy.OnPush,
                        styles: ["\n    :host {\n      display: flex;\n    }\n    .wrap {\n      position: relative;\n    }\n  "]
                    }] }
        ];
        EditableInputComponent.propDecorators = {
            style: [{ type: core.Input }],
            label: [{ type: core.Input }],
            value: [{ type: core.Input }],
            arrowOffset: [{ type: core.Input }],
            dragLabel: [{ type: core.Input }],
            dragMax: [{ type: core.Input }],
            placeholder: [{ type: core.Input }],
            onChange: [{ type: core.Output }]
        };
        return EditableInputComponent;
    }());
    var EditableInputModule = /** @class */ (function () {
        function EditableInputModule() {
        }
        EditableInputModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [EditableInputComponent],
                        exports: [EditableInputComponent],
                        imports: [common.CommonModule],
                    },] }
        ];
        return EditableInputModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var HueComponent = /** @class */ (function () {
        function HueComponent() {
            this.hidePointer = false;
            this.direction = 'horizontal';
            this.onChange = new core.EventEmitter();
            this.left = '0px';
            this.top = '';
        }
        /**
         * @return {?}
         */
        HueComponent.prototype.ngOnChanges = /**
         * @return {?}
         */
            function () {
                if (this.direction === 'horizontal') {
                    this.left = this.hsl.h * 100 / 360 + "%";
                }
                else {
                    this.top = -(this.hsl.h * 100 / 360) + 100 + "%";
                }
            };
        /**
         * @param {?} __0
         * @return {?}
         */
        HueComponent.prototype.handleChange = /**
         * @param {?} __0
         * @return {?}
         */
            function (_a) {
                var top = _a.top, left = _a.left, containerHeight = _a.containerHeight, containerWidth = _a.containerWidth, $event = _a.$event;
                /** @type {?} */
                var data;
                if (this.direction === 'vertical') {
                    /** @type {?} */
                    var h = void 0;
                    if (top < 0) {
                        h = 359;
                    }
                    else if (top > containerHeight) {
                        h = 0;
                    }
                    else {
                        /** @type {?} */
                        var percent = -(top * 100 / containerHeight) + 100;
                        h = 360 * percent / 100;
                    }
                    if (this.hsl.h !== h) {
                        data = {
                            h: h,
                            s: this.hsl.s,
                            l: this.hsl.l,
                            a: this.hsl.a,
                            source: 'rgb',
                        };
                    }
                }
                else {
                    /** @type {?} */
                    var h = void 0;
                    if (left < 0) {
                        h = 0;
                    }
                    else if (left > containerWidth) {
                        h = 359;
                    }
                    else {
                        /** @type {?} */
                        var percent = left * 100 / containerWidth;
                        h = 360 * percent / 100;
                    }
                    if (this.hsl.h !== h) {
                        data = {
                            h: h,
                            s: this.hsl.s,
                            l: this.hsl.l,
                            a: this.hsl.a,
                            source: 'rgb',
                        };
                    }
                }
                if (!data) {
                    return null;
                }
                this.onChange.emit({ data: data, $event: $event });
            };
        HueComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'color-hue',
                        template: "\n  <div class=\"color-hue color-hue-{{direction}}\" [style.border-radius.px]=\"radius\" [style.box-shadow]=\"shadow\">\n    <div ngx-color-coordinates (coordinatesChange)=\"handleChange($event)\" class=\"color-hue-container\">\n      <div class=\"color-hue-pointer\" [style.left]=\"left\" [style.top]=\"top\" *ngIf=\"!hidePointer\">\n        <div class=\"color-hue-slider\" [ngStyle]=\"pointer\"></div>\n      </div>\n    </div>\n  </div>\n  ",
                        preserveWhitespaces: false,
                        changeDetection: core.ChangeDetectionStrategy.OnPush,
                        styles: ["\n    .color-hue {\n      position: absolute;\n      top: 0;\n      bottom: 0;\n      left: 0;\n      right: 0;\n    }\n    .color-hue-container {\n      margin: 0 2px;\n      position: relative;\n      height: 100%;\n    }\n    .color-hue-pointer {\n      position: absolute;\n    }\n    .color-hue-slider {\n      margin-top: 1px;\n      width: 4px;\n      border-radius: 1px;\n      height: 8px;\n      box-shadow: 0 0 2px rgba(0, 0, 0, .6);\n      background: #fff;\n      transform: translateX(-2px);\n    }\n    .color-hue-horizontal {\n      background: linear-gradient(to right, #f00 0%, #ff0 17%, #0f0\n        33%, #0ff 50%, #00f 67%, #f0f 83%, #f00 100%);\n    }\n    .color-hue-vertical {\n      background: linear-gradient(to top, #f00 0%, #ff0 17%, #0f0 33%,\n        #0ff 50%, #00f 67%, #f0f 83%, #f00 100%);\n    }\n  "]
                    }] }
        ];
        HueComponent.propDecorators = {
            hsl: [{ type: core.Input }],
            pointer: [{ type: core.Input }],
            radius: [{ type: core.Input }],
            shadow: [{ type: core.Input }],
            hidePointer: [{ type: core.Input }],
            direction: [{ type: core.Input }],
            onChange: [{ type: core.Output }]
        };
        return HueComponent;
    }());
    var HueModule = /** @class */ (function () {
        function HueModule() {
        }
        HueModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [HueComponent],
                        exports: [HueComponent],
                        imports: [common.CommonModule, CoordinatesModule],
                    },] }
        ];
        return HueModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var RaisedComponent = /** @class */ (function () {
        function RaisedComponent() {
            this.zDepth = 1;
            this.radius = 1;
            this.background = '#fff';
        }
        RaisedComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'color-raised',
                        template: "\n  <div class=\"raised-wrap\">\n    <div class=\"raised-bg zDepth-{{zDepth}}\" [style.background]=\"background\"></div>\n    <div class=\"raised-content\">\n      <ng-content></ng-content>\n    </div>\n  </div>\n  ",
                        preserveWhitespaces: false,
                        changeDetection: core.ChangeDetectionStrategy.OnPush,
                        styles: ["\n    .raised-wrap {\n      position: relative;\n      display: inline-block;\n    }\n    .raised-bg {\n      position: absolute;\n      top: 0px;\n      right: 0px;\n      bottom: 0px;\n      left: 0px;\n    }\n    .raised-content {\n      position: relative;\n    }\n    .zDepth-0 {\n      box-shadow: none;\n    }\n    .zDepth-1 {\n      box-shadow: 0 2px 10px rgba(0,0,0,.12), 0 2px 5px rgba(0,0,0,.16);\n    }\n    .zDepth-2 {\n      box-shadow: 0 6px 20px rgba(0,0,0,.19), 0 8px 17px rgba(0,0,0,.2);\n    }\n    .zDepth-3 {\n      box-shadow: 0 17px 50px rgba(0,0,0,.19), 0 12px 15px rgba(0,0,0,.24);\n    }\n    .zDepth-4 {\n      box-shadow: 0 25px 55px rgba(0,0,0,.21), 0 16px 28px rgba(0,0,0,.22);\n    }\n    .zDepth-5 {\n      box-shadow: 0 40px 77px rgba(0,0,0,.22), 0 27px 24px rgba(0,0,0,.2);\n    }\n  "]
                    }] }
        ];
        RaisedComponent.propDecorators = {
            zDepth: [{ type: core.Input }],
            radius: [{ type: core.Input }],
            background: [{ type: core.Input }]
        };
        return RaisedComponent;
    }());
    var RaisedModule = /** @class */ (function () {
        function RaisedModule() {
        }
        RaisedModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [RaisedComponent],
                        exports: [RaisedComponent],
                        imports: [common.CommonModule],
                    },] }
        ];
        return RaisedModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var SaturationComponent = /** @class */ (function () {
        function SaturationComponent() {
            this.onChange = new core.EventEmitter();
        }
        /**
         * @return {?}
         */
        SaturationComponent.prototype.ngOnChanges = /**
         * @return {?}
         */
            function () {
                this.background = "hsl(" + this.hsl.h + ", 100%, 50%)";
                this.pointerTop = -(this.hsv.v * 100) + 1 + 100 + '%';
                this.pointerLeft = this.hsv.s * 100 + '%';
            };
        /**
         * @param {?} __0
         * @return {?}
         */
        SaturationComponent.prototype.handleChange = /**
         * @param {?} __0
         * @return {?}
         */
            function (_a) {
                var top = _a.top, left = _a.left, containerHeight = _a.containerHeight, containerWidth = _a.containerWidth, $event = _a.$event;
                if (left < 0) {
                    left = 0;
                }
                else if (left > containerWidth) {
                    left = containerWidth;
                }
                else if (top < 0) {
                    top = 0;
                }
                else if (top > containerHeight) {
                    top = containerHeight;
                }
                /** @type {?} */
                var saturation = left / containerWidth;
                /** @type {?} */
                var bright = -(top / containerHeight) + 1;
                bright = bright > 0 ? bright : 0;
                bright = bright > 1 ? 1 : bright;
                /** @type {?} */
                var data = {
                    h: this.hsl.h,
                    s: saturation,
                    v: bright,
                    a: this.hsl.a,
                    source: 'hsva',
                };
                this.onChange.emit({ data: data, $event: $event });
            };
        SaturationComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'color-saturation',
                        template: "\n  <div class=\"color-saturation\" ngx-color-coordinates (coordinatesChange)=\"handleChange($event)\" [style.background]=\"background\">\n    <div class=\"saturation-white\">\n      <div class=\"saturation-black\"></div>\n      <div class=\"saturation-pointer\" [ngStyle]=\"pointer\" [style.top]=\"pointerTop\" [style.left]=\"pointerLeft\">\n        <div class=\"saturation-circle\" [ngStyle]=\"circle\"></div>\n      </div>\n    </div>\n  </div>\n  ",
                        preserveWhitespaces: false,
                        changeDetection: core.ChangeDetectionStrategy.OnPush,
                        styles: ["\n    .saturation-white {\n      background: linear-gradient(to right, #fff, rgba(255,255,255,0));\n      position: absolute;\n      top: 0;\n      bottom: 0;\n      left: 0;\n      right: 0;\n    }\n    .saturation-black {\n      background: linear-gradient(to top, #000, rgba(0,0,0,0));\n      position: absolute;\n      top: 0;\n      bottom: 0;\n      left: 0;\n      right: 0;\n    }\n    .color-saturation {\n      position: absolute;\n      top: 0;\n      bottom: 0;\n      left: 0;\n      right: 0;\n    }\n    .saturation-pointer {\n      position: absolute;\n      cursor: default;\n    }\n    .saturation-circle {\n      width: 4px;\n      height: 4px;\n      box-shadow: 0 0 0 1.5px #fff, inset 0 0 1px 1px rgba(0,0,0,.3), 0 0 1px 2px rgba(0,0,0,.4);\n      border-radius: 50%;\n      cursor: hand;\n      transform: translate(-2px, -4px);\n    }\n  "]
                    }] }
        ];
        SaturationComponent.propDecorators = {
            hsl: [{ type: core.Input }],
            hsv: [{ type: core.Input }],
            radius: [{ type: core.Input }],
            pointer: [{ type: core.Input }],
            circle: [{ type: core.Input }],
            onChange: [{ type: core.Output }]
        };
        return SaturationComponent;
    }());
    var SaturationModule = /** @class */ (function () {
        function SaturationModule() {
        }
        SaturationModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [SaturationComponent],
                        exports: [SaturationComponent],
                        imports: [common.CommonModule, CoordinatesModule],
                    },] }
        ];
        return SaturationModule;
    }());

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    var __assign = function () {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s)
                    if (Object.prototype.hasOwnProperty.call(s, p))
                        t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var SwatchComponent = /** @class */ (function () {
        function SwatchComponent() {
            this.style = {};
            this.focusStyle = {};
            this.onClick = new core.EventEmitter();
            this.onHover = new core.EventEmitter();
            this.divStyles = {};
            this.focusStyles = {};
            this.inFocus = false;
        }
        /**
         * @return {?}
         */
        SwatchComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.divStyles = __assign({ background: this.color, height: '100%', width: '100%', cursor: 'pointer', position: 'relative', outline: 'none' }, this.style);
                this.focusStyles = __assign({}, this.divStyles, this.focusStyle);
            };
        /**
         * @return {?}
         */
        SwatchComponent.prototype.activeStyles = /**
         * @return {?}
         */
            function () {
                return this.focus || this.inFocus ? this.focusStyles : this.divStyles;
            };
        /**
         * @return {?}
         */
        SwatchComponent.prototype.handleFocusOut = /**
         * @return {?}
         */
            function () {
                this.inFocus = false;
            };
        /**
         * @return {?}
         */
        SwatchComponent.prototype.handleFocus = /**
         * @return {?}
         */
            function () {
                this.inFocus = true;
            };
        /**
         * @param {?} hex
         * @param {?} $event
         * @return {?}
         */
        SwatchComponent.prototype.handleHover = /**
         * @param {?} hex
         * @param {?} $event
         * @return {?}
         */
            function (hex, $event) {
                this.onHover.emit({ hex: hex, $event: $event });
            };
        /**
         * @param {?} hex
         * @param {?} $event
         * @return {?}
         */
        SwatchComponent.prototype.handleClick = /**
         * @param {?} hex
         * @param {?} $event
         * @return {?}
         */
            function (hex, $event) {
                this.onClick.emit({ hex: hex, $event: $event });
            };
        SwatchComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'color-swatch',
                        template: "\n  <div class=\"swatch\"\n    [ngStyle]=\"activeStyles()\" [attr.title]=\"color\"\n    (click)=\"handleClick(color, $event)\"\n    (keydown.enter)=\"handleClick(color, $event)\"\n    (focus)=\"handleFocus()\"\n    (focusout)=\"handleFocusOut()\"\n    (mouseover)=\"handleHover(color, $event)\"\n    tabindex=\"0\"\n  >\n    <ng-content></ng-content>\n    <color-checkboard\n      *ngIf=\"color === 'transparent'\"\n      boxShadow=\"inset 0 0 0 1px rgba(0,0,0,0.1)\"\n    ></color-checkboard>\n  </div>\n  ",
                        changeDetection: core.ChangeDetectionStrategy.OnPush,
                        preserveWhitespaces: false
                    }] }
        ];
        SwatchComponent.propDecorators = {
            color: [{ type: core.Input }],
            style: [{ type: core.Input }],
            focusStyle: [{ type: core.Input }],
            focus: [{ type: core.Input }],
            onClick: [{ type: core.Output }],
            onHover: [{ type: core.Output }]
        };
        return SwatchComponent;
    }());
    var SwatchModule = /** @class */ (function () {
        function SwatchModule() {
        }
        SwatchModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [SwatchComponent],
                        exports: [SwatchComponent],
                        imports: [common.CommonModule, CheckboardModule],
                    },] }
        ];
        return SwatchModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */

    exports.AlphaComponent = AlphaComponent;
    exports.AlphaModule = AlphaModule;
    exports.CheckboardComponent = CheckboardComponent;
    exports.CheckboardModule = CheckboardModule;
    exports.ColorWrap = ColorWrap;
    exports.ColorWrapModule = ColorWrapModule;
    exports.EditableInputComponent = EditableInputComponent;
    exports.EditableInputModule = EditableInputModule;
    exports.HueComponent = HueComponent;
    exports.HueModule = HueModule;
    exports.RaisedComponent = RaisedComponent;
    exports.RaisedModule = RaisedModule;
    exports.SaturationComponent = SaturationComponent;
    exports.SaturationModule = SaturationModule;
    exports.SwatchComponent = SwatchComponent;
    exports.SwatchModule = SwatchModule;
    exports.CoordinatesDirective = CoordinatesDirective;
    exports.CoordinatesModule = CoordinatesModule;
    exports.render = render;
    exports.getCheckerboard = getCheckerboard;
    exports.simpleCheckForValidColor = simpleCheckForValidColor;
    exports.toState = toState;
    exports.isValidHex = isValidHex;
    exports.getContrastingColor = getContrastingColor;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,