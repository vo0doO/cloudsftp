/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { CommonModule } from '@angular/common';
import { ChangeDetectionStrategy, Component, Input, NgModule } from '@angular/core';
import { ColorWrap, EditableInputModule, SwatchModule } from 'ngx-color';
import { isValidHex } from 'ngx-color';
var TwitterComponent = /** @class */ (function (_super) {
    tslib_1.__extends(TwitterComponent, _super);
    function TwitterComponent() {
        var _this = _super.call(this) || this;
        /**
         * Pixel value for picker width
         */
        _this.width = 276;
        /**
         * Color squares to display
         */
        _this.colors = [
            '#FF6900',
            '#FCB900',
            '#7BDCB5',
            '#00D084',
            '#8ED1FC',
            '#0693E3',
            '#ABB8C3',
            '#EB144C',
            '#F78DA7',
            '#9900EF',
        ];
        _this.triangle = 'top-left';
        _this.swatchStyle = {
            width: '30px',
            height: '30px',
            borderRadius: '4px',
            fontSize: '0',
        };
        _this.input = {
            borderRadius: '4px',
            borderBottomLeftRadius: '0',
            borderTopLeftRadius: '0',
            border: '1px solid #e6ecf0',
            boxSizing: 'border-box',
            display: 'inline',
            fontSize: '14px',
            height: '30px',
            padding: '0',
            paddingLeft: '6px',
            width: '100%',
            color: '#657786',
        };
        return _this;
    }
    /**
     * @param {?} color
     * @return {?}
     */
    TwitterComponent.prototype.focus = /**
     * @param {?} color
     * @return {?}
     */
    function (color) {
        return { boxShadow: "0 0 4px " + color };
    };
    /**
     * @param {?} __0
     * @return {?}
     */
    TwitterComponent.prototype.handleBlockChange = /**
     * @param {?} __0
     * @return {?}
     */
    function (_a) {
        var hex = _a.hex, $event = _a.$event;
        if (isValidHex(hex)) {
            // this.hex = hex;
            this.handleChange({ hex: hex, source: 'hex' }, $event);
        }
    };
    /**
     * @param {?} __0
     * @return {?}
     */
    TwitterComponent.prototype.handleValueChange = /**
     * @param {?} __0
     * @return {?}
     */
    function (_a) {
        var data = _a.data, $event = _a.$event;
        this.handleBlockChange({ hex: data, $event: $event });
    };
    TwitterComponent.decorators = [
        { type: Component, args: [{
                    selector: 'color-twitter',
                    template: "\n  <div class=\"twitter-picker {{ triangle }}-triangle {{ className }}\" [style.width.px]=\"width\">\n    <div class=\"triangleShadow\"></div>\n    <div class=\"triangle\"></div>\n    <div class=\"twitter-body\">\n      <div class=\"twitter-swatch\" *ngFor=\"let color of colors\">\n        <color-swatch\n          [color]=\"color\"\n          [style]=\"swatchStyle\"\n          [focusStyle]=\"focus(color)\"\n          (onClick)=\"handleBlockChange($event)\"\n        ></color-swatch>\n      </div>\n      <div class=\"twitter-hash\">\n        <div>#</div>\n      </div>\n      <div class=\"twitter-input\">\n        <color-editable-input\n          [style]=\"{ input: input }\"\n          [value]=\"hex.replace('#', '')\"\n          (onChange)=\"handleValueChange($event)\"\n        ></color-editable-input>\n      </div>\n    </div>\n  </div>\n  ",
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    preserveWhitespaces: false,
                    styles: ["\n    .twitter-picker {\n      background: rgb(255, 255, 255);\n      border: 0px solid rgba(0, 0, 0, 0.25);\n      box-shadow: rgba(0, 0, 0, 0.25) 0px 1px 4px;\n      border-radius: 4px;\n      position: relative;\n      box-sizing: border-box;\n    }\n    .triangleShadow {\n      width: 0px;\n      height: 0px;\n      border-style: solid;\n      border-width: 0px 9px 10px;\n      border-color: transparent transparent rgba(0, 0, 0, 0.1);\n      position: absolute;\n    }\n    .triangle {\n      width: 0px;\n      height: 0px;\n      border-style: solid;\n      border-width: 0px 9px 10px;\n      border-color: transparent transparent rgb(255, 255, 255);\n      position: absolute;\n    }\n    .hide-triangle > .triangle {\n      display: none;\n    }\n    .hide-triangle > .triangleShadow {\n      display: none;\n    }\n    .top-left-triangle > .triangle {\n      top: -10px;\n      left: 12px;\n    }\n    .top-left-triangle > .triangleShadow {\n      top: -11px;\n      left: 12px;\n    }\n    .top-right-triangle > .triangle {\n      top: -10px;\n      right: 12px;\n    }\n    .top-right-triangle > .triangleShadow {\n      top: -11px;\n      right: 12px;\n    }\n    .twitter-body {\n      padding: 15px 9px 9px 15px;\n    }\n    .twitter-swatch {\n      width: 30px;\n      height: 30px;\n      display: inline-block;\n      margin: 0 6px 0 0;\n    }\n    .twitter-hash {\n      background: rgb(240, 240, 240);\n      height: 30px;\n      width: 30px;\n      border-radius: 4px 0px 0px 4px;\n      color: rgb(152, 161, 164);\n      margin-left: -3px;\n      display: inline-block;\n\n    }\n    .twitter-hash > div {\n      position: absolute;\n      align-items: center;\n      justify-content: center;\n      height: 30px;\n      width: 30px;\n      display: flex;\n    }\n    .twitter-input {\n      position: relative;\n      display: inline-block;\n      margin-top: -6px;\n      font-size: 10px;\n      height: 27px;\n      padding: 0;\n      position: relative;\n      top: 6px;\n      vertical-align: top;\n      width: 108px;\n      margin-left: -4px;\n    }\n  "]
                }] }
    ];
    /** @nocollapse */
    TwitterComponent.ctorParameters = function () { return []; };
    TwitterComponent.propDecorators = {
        width: [{ type: Input }],
        colors: [{ type: Input }],
        triangle: [{ type: Input }]
    };
    return TwitterComponent;
}(ColorWrap));
export { TwitterComponent };
if (false) {
    /**
     * Pixel value for picker width
     * @type {?}
     */
    TwitterComponent.prototype.width;
    /**
     * Color squares to display
     * @type {?}
     */
    TwitterComponent.prototype.colors;
    /** @type {?} */
    TwitterComponent.prototype.triangle;
    /** @type {?} */
    TwitterComponent.prototype.swatchStyle;
    /** @type {?} */
    TwitterComponent.prototype.input;
}
var ColorTwitterModule = /** @class */ (function () {
    function ColorTwitterModule() {
    }
    ColorTwitterModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [TwitterComponent],
                    exports: [TwitterComponent],
                    imports: [CommonModule, SwatchModule, EditableInputModule],
                },] }
    ];
    return ColorTwitterModule;
}());
export { ColorTwitterModule };
//# sourceMappingURL=data:application/json;base64,