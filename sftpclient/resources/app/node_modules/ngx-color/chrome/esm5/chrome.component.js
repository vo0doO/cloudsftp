/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { CommonModule } from '@angular/common';
import { ChangeDetectionStrategy, Component, Input, NgModule, } from '@angular/core';
import { AlphaModule, CheckboardModule, ColorWrap, EditableInputModule, HueModule, SaturationModule, } from 'ngx-color';
import { ChromeFieldsComponent } from './chrome-fields.component';
var ChromeComponent = /** @class */ (function (_super) {
    tslib_1.__extends(ChromeComponent, _super);
    function ChromeComponent() {
        var _this = _super.call(this) || this;
        /**
         * Remove alpha slider and options from picker
         */
        _this.disableAlpha = false;
        _this.circle = {
            width: '12px',
            height: '12px',
            borderRadius: '6px',
            boxShadow: 'rgb(255, 255, 255) 0px 0px 0px 1px inset',
            transform: 'translate(-6px, -8px)',
        };
        _this.pointer = {
            width: '12px',
            height: '12px',
            borderRadius: '6px',
            transform: 'translate(-6px, -2px)',
            backgroundColor: 'rgb(248, 248, 248)',
            boxShadow: '0 1px 4px 0 rgba(0, 0, 0, 0.37)',
        };
        return _this;
    }
    /**
     * @return {?}
     */
    ChromeComponent.prototype.afterValidChange = /**
     * @return {?}
     */
    function () {
        this.activeBackground = "rgba(" + this.rgb.r + ", " + this.rgb.g + ", " + this.rgb.b + ", " + this.rgb.a + ")";
    };
    /**
     * @param {?} __0
     * @return {?}
     */
    ChromeComponent.prototype.handleValueChange = /**
     * @param {?} __0
     * @return {?}
     */
    function (_a) {
        var data = _a.data, $event = _a.$event;
        this.handleChange(data, $event);
    };
    ChromeComponent.decorators = [
        { type: Component, args: [{
                    selector: 'color-chrome',
                    template: "\n  <div class=\"chrome-picker {{ className }}\">\n    <div class=\"saturation\">\n      <color-saturation\n        [hsl]=\"hsl\"\n        [hsv]=\"hsv\"\n        [circle]=\"circle\"\n        (onChange)=\"handleValueChange($event)\"\n      ></color-saturation>\n    </div>\n    <div class=\"chrome-body\">\n      <div class=\"chrome-controls\">\n        <div class=\"chrome-color\">\n          <div class=\"chrome-swatch\">\n            <div class=\"chrome-active\"\n              [style.background]=\"activeBackground\"\n            ></div>\n            <color-checkboard></color-checkboard>\n          </div>\n        </div>\n        <div class=\"chrome-toggles\">\n          <div class=\"chrome-hue\">\n            <color-hue\n              [radius]=\"2\"\n              [hsl]=\"hsl\"\n              [pointer]=\"pointer\"\n              (onChange)=\"handleValueChange($event)\"\n            ></color-hue>\n          </div>\n          <div class=\"chrome-alpha\" *ngIf=\"!disableAlpha\">\n            <color-alpha\n              [radius]=\"2\" [rgb]=\"rgb\" [hsl]=\"hsl\"\n              [pointer]=\"pointer\" (onChange)=\"handleValueChange($event)\"\n            ></color-alpha>\n          </div>\n        </div>\n      </div>\n      <color-chrome-fields\n        [rgb]=\"rgb\" [hsl]=\"hsl\" [hex]=\"hex\"\n        [disableAlpha]=\"disableAlpha\"\n        (onChange)=\"handleValueChange($event)\"\n      ></color-chrome-fields>\n    </div>\n  </div>\n  ",
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    preserveWhitespaces: false,
                    styles: ["\n      .chrome-picker {\n        background: #fff;\n        border-radius: 2px;\n        box-shadow: 0 0 2px rgba(0, 0, 0, 0.3), 0 4px 8px rgba(0, 0, 0, 0.3);\n        box-sizing: initial;\n        width: 225px;\n        font-family: 'Menlo';\n      }\n      .chrome-controls {\n        display: flex;\n      }\n      .chrome-color {\n        width: 42px;\n      }\n      .chrome-body {\n        padding: 14px 14px 12px;\n      }\n      .chrome-active {\n        position: absolute;\n        top: 0;\n        bottom: 0;\n        left: 0;\n        right: 0;\n        border-radius: 20px;\n        box-shadow: inset 0 0 0 1px rgba(0, 0, 0, 0.1);\n        z-index: 2;\n      }\n      .chrome-swatch {\n        width: 28px;\n        height: 28px;\n        border-radius: 15px;\n        position: relative;\n        overflow: hidden;\n      }\n      .saturation {\n        width: 100%;\n        padding-bottom: 55%;\n        position: relative;\n        border-radius: 2px 2px 0 0;\n        overflow: hidden;\n      }\n      .chrome-toggles {\n        flex: 1;\n      }\n      .chrome-hue {\n        height: 10px;\n        position: relative;\n        margin-bottom: 8px;\n      }\n      .chrome-alpha {\n        height: 10px;\n        position: relative;\n      }\n    "]
                }] }
    ];
    /** @nocollapse */
    ChromeComponent.ctorParameters = function () { return []; };
    ChromeComponent.propDecorators = {
        disableAlpha: [{ type: Input }]
    };
    return ChromeComponent;
}(ColorWrap));
export { ChromeComponent };
if (false) {
    /**
     * Remove alpha slider and options from picker
     * @type {?}
     */
    ChromeComponent.prototype.disableAlpha;
    /** @type {?} */
    ChromeComponent.prototype.circle;
    /** @type {?} */
    ChromeComponent.prototype.pointer;
    /** @type {?} */
    ChromeComponent.prototype.activeBackground;
}
var ColorChromeModule = /** @class */ (function () {
    function ColorChromeModule() {
    }
    ColorChromeModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [ChromeComponent, ChromeFieldsComponent],
                    exports: [ChromeComponent, ChromeFieldsComponent],
                    imports: [
                        CommonModule,
                        AlphaModule,
                        CheckboardModule,
                        EditableInputModule,
                        HueModule,
                        SaturationModule,
                    ],
                },] }
    ];
    return ColorChromeModule;
}());
export { ColorChromeModule };
//# sourceMappingURL=data:application/json;base64,