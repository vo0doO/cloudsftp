/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { ChangeDetectionStrategy, Component, EventEmitter, Input, Output, } from '@angular/core';
import { isValidHex } from 'ngx-color';
var ChromeFieldsComponent = /** @class */ (function () {
    function ChromeFieldsComponent() {
        this.onChange = new EventEmitter();
        this.view = '';
        this.input = {
            fontSize: '11px',
            color: '#333',
            width: '100%',
            borderRadius: '2px',
            border: 'none',
            boxShadow: 'inset 0 0 0 1px #dadada',
            height: '21px',
            'text-align': 'center',
        };
        this.label = {
            'text-transform': 'uppercase',
            fontSize: '11px',
            'line-height': '11px',
            color: '#969696',
            'text-align': 'center',
            display: 'block',
            marginTop: '12px',
        };
    }
    /**
     * @return {?}
     */
    ChromeFieldsComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        if (this.hsl.a === 1 && this.view !== 'hex') {
            this.view = 'hex';
        }
        else if (this.view !== 'rgb' && this.view !== 'hsl') {
            this.view = 'rgb';
        }
    };
    /**
     * @return {?}
     */
    ChromeFieldsComponent.prototype.toggleViews = /**
     * @return {?}
     */
    function () {
        if (this.view === 'hex') {
            this.view = 'rgb';
        }
        else if (this.view === 'rgb') {
            this.view = 'hsl';
        }
        else if (this.view === 'hsl') {
            if (this.hsl.a === 1) {
                this.view = 'hex';
            }
            else {
                this.view = 'rgb';
            }
        }
    };
    /**
     * @param {?} value
     * @return {?}
     */
    ChromeFieldsComponent.prototype.round = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        return Math.round(value);
    };
    /**
     * @param {?} __0
     * @return {?}
     */
    ChromeFieldsComponent.prototype.handleChange = /**
     * @param {?} __0
     * @return {?}
     */
    function (_a) {
        var data = _a.data, $event = _a.$event;
        if (data.hex) {
            if (isValidHex(data.hex)) {
                this.onChange.emit({
                    data: {
                        hex: data.hex,
                        source: 'hex',
                    },
                    $event: $event,
                });
            }
        }
        else if (data.r || data.g || data.b) {
            this.onChange.emit({
                data: {
                    r: data.r || this.rgb.r,
                    g: data.g || this.rgb.g,
                    b: data.b || this.rgb.b,
                    source: 'rgb',
                },
                $event: $event,
            });
        }
        else if (data.a) {
            if (data.a < 0) {
                data.a = 0;
            }
            else if (data.a > 1) {
                data.a = 1;
            }
            this.onChange.emit({
                data: {
                    h: this.hsl.h,
                    s: this.hsl.s,
                    l: this.hsl.l,
                    a: Math.round(data.a * 100) / 100,
                    source: 'rgb',
                },
                $event: $event,
            });
        }
        else if (data.h || data.s || data.l) {
            /** @type {?} */
            var s = data.s && data.s.replace('%', '');
            /** @type {?} */
            var l = data.l && data.l.replace('%', '');
            this.onChange.emit({
                data: {
                    h: data.h || this.hsl.h,
                    s: Number(s || this.hsl.s),
                    l: Number(l || this.hsl.l),
                    source: 'hsl',
                },
                $event: $event,
            });
        }
    };
    ChromeFieldsComponent.decorators = [
        { type: Component, args: [{
                    selector: 'color-chrome-fields',
                    template: "\n    <div class=\"chrome-wrap\">\n      <div class=\"chrome-fields\">\n        <ng-template [ngIf]=\"view === 'hex'\">\n          <div class=\"chrome-field\">\n            <color-editable-input\n              [style]=\"{ input: input, label: label }\"\n              label=\"hex\" [value]=\"hex\"\n              (onChange)=\"handleChange($event)\"\n            ></color-editable-input>\n          </div>\n        </ng-template>\n        <ng-template [ngIf]=\"view === 'rgb'\">\n          <div class=\"chrome-field\">\n            <color-editable-input\n              [style]=\"{ input: input, label: label }\"\n              label=\"r\" [value]=\"rgb.r\"\n              (onChange)=\"handleChange($event)\"\n            ></color-editable-input>\n          </div>\n          <div class=\"chrome-field\">\n            <color-editable-input\n              [style]=\"{ input: input, label: label }\"\n              label=\"g\" [value]=\"rgb.g\"\n              (onChange)=\"handleChange($event)\"\n            ></color-editable-input>\n          </div>\n          <div class=\"chrome-field\">\n            <color-editable-input\n              [style]=\"{ input: input, label: label }\"\n              label=\"b\" [value]=\"rgb.b\"\n              (onChange)=\"handleChange($event)\"\n            ></color-editable-input>\n          </div>\n          <div class=\"chrome-field\">\n            <color-editable-input *ngIf=\"!disableAlpha\"\n              [style]=\"{ input: input, label: label }\"\n              label=\"a\" [value]=\"rgb.a\"\n              [arrowOffset]=\"0.01\"\n              (onChange)=\"handleChange($event)\"\n            ></color-editable-input>\n          </div>\n        </ng-template>\n        <ng-template [ngIf]=\"view === 'hsl'\">\n          <div class=\"chrome-field\">\n            <color-editable-input\n              [style]=\"{ input: input, label: label }\"\n              label=\"h\"\n              [value]=\"round(hsl.h)\"\n              (onChange)=\"handleChange($event)\"\n            ></color-editable-input>\n          </div>\n          <div class=\"chrome-field\">\n            <color-editable-input\n              [style]=\"{ input: input, label: label }\"\n              label=\"s\" [value]=\"round(hsl.s * 100) + '%'\"\n              (onChange)=\"handleChange($event)\"\n            ></color-editable-input>\n          </div>\n          <div class=\"chrome-field\">\n            <color-editable-input\n              [style]=\"{ input: input, label: label }\"\n              label=\"l\" [value]=\"round(hsl.l * 100) + '%'\"\n              (onChange)=\"handleChange($event)\"\n            ></color-editable-input>\n          </div>\n          <div class=\"chrome-field\">\n            <color-editable-input *ngIf=\"!disableAlpha\"\n              [style]=\"{ input: input, label: label }\"\n              label=\"a\" [value]=\"hsl.a\"\n              [arrowOffset]=\"0.01\"\n              (onChange)=\"handleChange($event)\"\n            ></color-editable-input>\n          </div>\n        </ng-template>\n      </div>\n\n      <div class=\"chrome-toggle\">\n        <div class=\"chrome-icon\" (click)=\"toggleViews()\" #icon>\n          <svg class=\"chrome-toggle-svg\" viewBox=\"0 0 24 24\">\n            <path #iconUp fill=\"#333\"\n              d=\"M12,5.83L15.17,9L16.58,7.59L12,3L7.41,7.59L8.83,9L12,5.83Z\"\n            />\n            <path #iconDown fill=\"#333\"\n              d=\"M12,18.17L8.83,15L7.42,16.41L12,21L16.59,16.41L15.17,15Z\"\n            />\n          </svg>\n        </div>\n      </div>\n    </div>\n  ",
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    preserveWhitespaces: false,
                    styles: ["\n      .chrome-wrap {\n        padding-top: 16px;\n        display: flex;\n      }\n      .chrome-fields {\n        flex: 1;\n        display: flex;\n        margin-left: -6px;\n      }\n      .chrome-field {\n        padding-left: 6px;\n        width: 100%;\n      }\n      .chrome-toggle {\n        width: 32px;\n        text-align: right;\n        position: relative;\n      }\n      .chrome-icon {\n        margin-right: -4px;\n        margin-top: 12px;\n        cursor: pointer;\n        position: relative;\n      }\n      .chrome-toggle-svg {\n        width: 24px;\n        height: 24px;\n        border: 1px transparent solid;\n        border-radius: 5px;\n      }\n      .chrome-toggle-svg:hover {\n        background: #eee;\n      }\n    "]
                }] }
    ];
    ChromeFieldsComponent.propDecorators = {
        disableAlpha: [{ type: Input }],
        hsl: [{ type: Input }],
        rgb: [{ type: Input }],
        hex: [{ type: Input }],
        onChange: [{ type: Output }]
    };
    return ChromeFieldsComponent;
}());
export { ChromeFieldsComponent };
if (false) {
    /** @type {?} */
    ChromeFieldsComponent.prototype.disableAlpha;
    /** @type {?} */
    ChromeFieldsComponent.prototype.hsl;
    /** @type {?} */
    ChromeFieldsComponent.prototype.rgb;
    /** @type {?} */
    ChromeFieldsComponent.prototype.hex;
    /** @type {?} */
    ChromeFieldsComponent.prototype.onChange;
    /** @type {?} */
    ChromeFieldsComponent.prototype.view;
    /** @type {?} */
    ChromeFieldsComponent.prototype.input;
    /** @type {?} */
    ChromeFieldsComponent.prototype.label;
}
//# sourceMappingURL=data:application/json;base64,