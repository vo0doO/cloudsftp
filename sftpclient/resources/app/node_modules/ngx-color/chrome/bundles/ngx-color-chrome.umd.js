(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('ngx-color'), require('@angular/common')) :
    typeof define === 'function' && define.amd ? define('ngx-color/chrome', ['exports', '@angular/core', 'ngx-color', '@angular/common'], factory) :
    (factory((global['ngx-color'] = global['ngx-color'] || {}, global['ngx-color'].chrome = {}),global.ng.core,global['ngx-color'],global.ng.common));
}(this, (function (exports,core,ngxColor,common) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b)
                if (b.hasOwnProperty(p))
                    d[p] = b[p]; };
        return extendStatics(d, b);
    };
    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var ChromeFieldsComponent = /** @class */ (function () {
        function ChromeFieldsComponent() {
            this.onChange = new core.EventEmitter();
            this.view = '';
            this.input = {
                fontSize: '11px',
                color: '#333',
                width: '100%',
                borderRadius: '2px',
                border: 'none',
                boxShadow: 'inset 0 0 0 1px #dadada',
                height: '21px',
                'text-align': 'center',
            };
            this.label = {
                'text-transform': 'uppercase',
                fontSize: '11px',
                'line-height': '11px',
                color: '#969696',
                'text-align': 'center',
                display: 'block',
                marginTop: '12px',
            };
        }
        /**
         * @return {?}
         */
        ChromeFieldsComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                if (this.hsl.a === 1 && this.view !== 'hex') {
                    this.view = 'hex';
                }
                else if (this.view !== 'rgb' && this.view !== 'hsl') {
                    this.view = 'rgb';
                }
            };
        /**
         * @return {?}
         */
        ChromeFieldsComponent.prototype.toggleViews = /**
         * @return {?}
         */
            function () {
                if (this.view === 'hex') {
                    this.view = 'rgb';
                }
                else if (this.view === 'rgb') {
                    this.view = 'hsl';
                }
                else if (this.view === 'hsl') {
                    if (this.hsl.a === 1) {
                        this.view = 'hex';
                    }
                    else {
                        this.view = 'rgb';
                    }
                }
            };
        /**
         * @param {?} value
         * @return {?}
         */
        ChromeFieldsComponent.prototype.round = /**
         * @param {?} value
         * @return {?}
         */
            function (value) {
                return Math.round(value);
            };
        /**
         * @param {?} __0
         * @return {?}
         */
        ChromeFieldsComponent.prototype.handleChange = /**
         * @param {?} __0
         * @return {?}
         */
            function (_a) {
                var data = _a.data, $event = _a.$event;
                if (data.hex) {
                    if (ngxColor.isValidHex(data.hex)) {
                        this.onChange.emit({
                            data: {
                                hex: data.hex,
                                source: 'hex',
                            },
                            $event: $event,
                        });
                    }
                }
                else if (data.r || data.g || data.b) {
                    this.onChange.emit({
                        data: {
                            r: data.r || this.rgb.r,
                            g: data.g || this.rgb.g,
                            b: data.b || this.rgb.b,
                            source: 'rgb',
                        },
                        $event: $event,
                    });
                }
                else if (data.a) {
                    if (data.a < 0) {
                        data.a = 0;
                    }
                    else if (data.a > 1) {
                        data.a = 1;
                    }
                    this.onChange.emit({
                        data: {
                            h: this.hsl.h,
                            s: this.hsl.s,
                            l: this.hsl.l,
                            a: Math.round(data.a * 100) / 100,
                            source: 'rgb',
                        },
                        $event: $event,
                    });
                }
                else if (data.h || data.s || data.l) {
                    /** @type {?} */
                    var s = data.s && data.s.replace('%', '');
                    /** @type {?} */
                    var l = data.l && data.l.replace('%', '');
                    this.onChange.emit({
                        data: {
                            h: data.h || this.hsl.h,
                            s: Number(s || this.hsl.s),
                            l: Number(l || this.hsl.l),
                            source: 'hsl',
                        },
                        $event: $event,
                    });
                }
            };
        ChromeFieldsComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'color-chrome-fields',
                        template: "\n    <div class=\"chrome-wrap\">\n      <div class=\"chrome-fields\">\n        <ng-template [ngIf]=\"view === 'hex'\">\n          <div class=\"chrome-field\">\n            <color-editable-input\n              [style]=\"{ input: input, label: label }\"\n              label=\"hex\" [value]=\"hex\"\n              (onChange)=\"handleChange($event)\"\n            ></color-editable-input>\n          </div>\n        </ng-template>\n        <ng-template [ngIf]=\"view === 'rgb'\">\n          <div class=\"chrome-field\">\n            <color-editable-input\n              [style]=\"{ input: input, label: label }\"\n              label=\"r\" [value]=\"rgb.r\"\n              (onChange)=\"handleChange($event)\"\n            ></color-editable-input>\n          </div>\n          <div class=\"chrome-field\">\n            <color-editable-input\n              [style]=\"{ input: input, label: label }\"\n              label=\"g\" [value]=\"rgb.g\"\n              (onChange)=\"handleChange($event)\"\n            ></color-editable-input>\n          </div>\n          <div class=\"chrome-field\">\n            <color-editable-input\n              [style]=\"{ input: input, label: label }\"\n              label=\"b\" [value]=\"rgb.b\"\n              (onChange)=\"handleChange($event)\"\n            ></color-editable-input>\n          </div>\n          <div class=\"chrome-field\">\n            <color-editable-input *ngIf=\"!disableAlpha\"\n              [style]=\"{ input: input, label: label }\"\n              label=\"a\" [value]=\"rgb.a\"\n              [arrowOffset]=\"0.01\"\n              (onChange)=\"handleChange($event)\"\n            ></color-editable-input>\n          </div>\n        </ng-template>\n        <ng-template [ngIf]=\"view === 'hsl'\">\n          <div class=\"chrome-field\">\n            <color-editable-input\n              [style]=\"{ input: input, label: label }\"\n              label=\"h\"\n              [value]=\"round(hsl.h)\"\n              (onChange)=\"handleChange($event)\"\n            ></color-editable-input>\n          </div>\n          <div class=\"chrome-field\">\n            <color-editable-input\n              [style]=\"{ input: input, label: label }\"\n              label=\"s\" [value]=\"round(hsl.s * 100) + '%'\"\n              (onChange)=\"handleChange($event)\"\n            ></color-editable-input>\n          </div>\n          <div class=\"chrome-field\">\n            <color-editable-input\n              [style]=\"{ input: input, label: label }\"\n              label=\"l\" [value]=\"round(hsl.l * 100) + '%'\"\n              (onChange)=\"handleChange($event)\"\n            ></color-editable-input>\n          </div>\n          <div class=\"chrome-field\">\n            <color-editable-input *ngIf=\"!disableAlpha\"\n              [style]=\"{ input: input, label: label }\"\n              label=\"a\" [value]=\"hsl.a\"\n              [arrowOffset]=\"0.01\"\n              (onChange)=\"handleChange($event)\"\n            ></color-editable-input>\n          </div>\n        </ng-template>\n      </div>\n\n      <div class=\"chrome-toggle\">\n        <div class=\"chrome-icon\" (click)=\"toggleViews()\" #icon>\n          <svg class=\"chrome-toggle-svg\" viewBox=\"0 0 24 24\">\n            <path #iconUp fill=\"#333\"\n              d=\"M12,5.83L15.17,9L16.58,7.59L12,3L7.41,7.59L8.83,9L12,5.83Z\"\n            />\n            <path #iconDown fill=\"#333\"\n              d=\"M12,18.17L8.83,15L7.42,16.41L12,21L16.59,16.41L15.17,15Z\"\n            />\n          </svg>\n        </div>\n      </div>\n    </div>\n  ",
                        changeDetection: core.ChangeDetectionStrategy.OnPush,
                        preserveWhitespaces: false,
                        styles: ["\n      .chrome-wrap {\n        padding-top: 16px;\n        display: flex;\n      }\n      .chrome-fields {\n        flex: 1;\n        display: flex;\n        margin-left: -6px;\n      }\n      .chrome-field {\n        padding-left: 6px;\n        width: 100%;\n      }\n      .chrome-toggle {\n        width: 32px;\n        text-align: right;\n        position: relative;\n      }\n      .chrome-icon {\n        margin-right: -4px;\n        margin-top: 12px;\n        cursor: pointer;\n        position: relative;\n      }\n      .chrome-toggle-svg {\n        width: 24px;\n        height: 24px;\n        border: 1px transparent solid;\n        border-radius: 5px;\n      }\n      .chrome-toggle-svg:hover {\n        background: #eee;\n      }\n    "]
                    }] }
        ];
        ChromeFieldsComponent.propDecorators = {
            disableAlpha: [{ type: core.Input }],
            hsl: [{ type: core.Input }],
            rgb: [{ type: core.Input }],
            hex: [{ type: core.Input }],
            onChange: [{ type: core.Output }]
        };
        return ChromeFieldsComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var ChromeComponent = /** @class */ (function (_super) {
        __extends(ChromeComponent, _super);
        function ChromeComponent() {
            var _this = _super.call(this) || this;
            /**
             * Remove alpha slider and options from picker
             */
            _this.disableAlpha = false;
            _this.circle = {
                width: '12px',
                height: '12px',
                borderRadius: '6px',
                boxShadow: 'rgb(255, 255, 255) 0px 0px 0px 1px inset',
                transform: 'translate(-6px, -8px)',
            };
            _this.pointer = {
                width: '12px',
                height: '12px',
                borderRadius: '6px',
                transform: 'translate(-6px, -2px)',
                backgroundColor: 'rgb(248, 248, 248)',
                boxShadow: '0 1px 4px 0 rgba(0, 0, 0, 0.37)',
            };
            return _this;
        }
        /**
         * @return {?}
         */
        ChromeComponent.prototype.afterValidChange = /**
         * @return {?}
         */
            function () {
                this.activeBackground = "rgba(" + this.rgb.r + ", " + this.rgb.g + ", " + this.rgb.b + ", " + this.rgb.a + ")";
            };
        /**
         * @param {?} __0
         * @return {?}
         */
        ChromeComponent.prototype.handleValueChange = /**
         * @param {?} __0
         * @return {?}
         */
            function (_a) {
                var data = _a.data, $event = _a.$event;
                this.handleChange(data, $event);
            };
        ChromeComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'color-chrome',
                        template: "\n  <div class=\"chrome-picker {{ className }}\">\n    <div class=\"saturation\">\n      <color-saturation\n        [hsl]=\"hsl\"\n        [hsv]=\"hsv\"\n        [circle]=\"circle\"\n        (onChange)=\"handleValueChange($event)\"\n      ></color-saturation>\n    </div>\n    <div class=\"chrome-body\">\n      <div class=\"chrome-controls\">\n        <div class=\"chrome-color\">\n          <div class=\"chrome-swatch\">\n            <div class=\"chrome-active\"\n              [style.background]=\"activeBackground\"\n            ></div>\n            <color-checkboard></color-checkboard>\n          </div>\n        </div>\n        <div class=\"chrome-toggles\">\n          <div class=\"chrome-hue\">\n            <color-hue\n              [radius]=\"2\"\n              [hsl]=\"hsl\"\n              [pointer]=\"pointer\"\n              (onChange)=\"handleValueChange($event)\"\n            ></color-hue>\n          </div>\n          <div class=\"chrome-alpha\" *ngIf=\"!disableAlpha\">\n            <color-alpha\n              [radius]=\"2\" [rgb]=\"rgb\" [hsl]=\"hsl\"\n              [pointer]=\"pointer\" (onChange)=\"handleValueChange($event)\"\n            ></color-alpha>\n          </div>\n        </div>\n      </div>\n      <color-chrome-fields\n        [rgb]=\"rgb\" [hsl]=\"hsl\" [hex]=\"hex\"\n        [disableAlpha]=\"disableAlpha\"\n        (onChange)=\"handleValueChange($event)\"\n      ></color-chrome-fields>\n    </div>\n  </div>\n  ",
                        changeDetection: core.ChangeDetectionStrategy.OnPush,
                        preserveWhitespaces: false,
                        styles: ["\n      .chrome-picker {\n        background: #fff;\n        border-radius: 2px;\n        box-shadow: 0 0 2px rgba(0, 0, 0, 0.3), 0 4px 8px rgba(0, 0, 0, 0.3);\n        box-sizing: initial;\n        width: 225px;\n        font-family: 'Menlo';\n      }\n      .chrome-controls {\n        display: flex;\n      }\n      .chrome-color {\n        width: 42px;\n      }\n      .chrome-body {\n        padding: 14px 14px 12px;\n      }\n      .chrome-active {\n        position: absolute;\n        top: 0;\n        bottom: 0;\n        left: 0;\n        right: 0;\n        border-radius: 20px;\n        box-shadow: inset 0 0 0 1px rgba(0, 0, 0, 0.1);\n        z-index: 2;\n      }\n      .chrome-swatch {\n        width: 28px;\n        height: 28px;\n        border-radius: 15px;\n        position: relative;\n        overflow: hidden;\n      }\n      .saturation {\n        width: 100%;\n        padding-bottom: 55%;\n        position: relative;\n        border-radius: 2px 2px 0 0;\n        overflow: hidden;\n      }\n      .chrome-toggles {\n        flex: 1;\n      }\n      .chrome-hue {\n        height: 10px;\n        position: relative;\n        margin-bottom: 8px;\n      }\n      .chrome-alpha {\n        height: 10px;\n        position: relative;\n      }\n    "]
                    }] }
        ];
        /** @nocollapse */
        ChromeComponent.ctorParameters = function () { return []; };
        ChromeComponent.propDecorators = {
            disableAlpha: [{ type: core.Input }]
        };
        return ChromeComponent;
    }(ngxColor.ColorWrap));
    var ColorChromeModule = /** @class */ (function () {
        function ColorChromeModule() {
        }
        ColorChromeModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [ChromeComponent, ChromeFieldsComponent],
                        exports: [ChromeComponent, ChromeFieldsComponent],
                        imports: [
                            common.CommonModule,
                            ngxColor.AlphaModule,
                            ngxColor.CheckboardModule,
                            ngxColor.EditableInputModule,
                            ngxColor.HueModule,
                            ngxColor.SaturationModule,
                        ],
                    },] }
        ];
        return ColorChromeModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */

    exports.ChromeComponent = ChromeComponent;
    exports.ColorChromeModule = ColorChromeModule;
    exports.ɵa = ChromeFieldsComponent;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,